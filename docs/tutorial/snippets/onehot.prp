

// encoder

a = 1<<val

// decoder

decoder = {||
  let clog2 = import('math.clog2')

  assert $.__size == 1
  // For a 8 bit one hot encoding, we could
  // out@(2) = a@|(4,5,6,7)
  // out@(1) = a@|(2,3,6,7)
  // out@(0) = a@|(1,3,5,7)

  let num = $0
  out = 0
  // This is the configurable size decoder
  for i in 0..<clog2(num.__ubits) {
     delta=i+1
     pos = 0
     xset = 0sb?
     while pos<num.__ubits {
        pos += delta
        for j in pos..<(pos+i) {
          xset ++= j
        }
     }
     out@[i] = num@|[set]
  }
  % = out
}

test "trivial" {
  for i in 0..=33 {
    assert decoder(1<<i) == i
  }
}

