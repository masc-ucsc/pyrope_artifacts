

let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}


let a = (1,2,3) |> reduce {||$0 + $1}
assert (a == 6)
reduce = {||
  if $.__size <= 1 { return $ }
  redop = $.__do   // ref, not function call
  var tmp = $
  while true {
    mut tmp2 = ()
    for i in 0..<tmp.__size by 2 {
      tmp2 ++= redop(tmp[i],tmp[i+1])
    }
    if tmp2.__size <=1 { return tmp2 }
    mut tmp = tmp2
    if tmp2.__size@[0] {      // odd number
      mut tmp   = tmp2@[0..=-2]
      mut tmp ++= redop(tmp2@[-2..<0])
    }
  }
  assert false
}
