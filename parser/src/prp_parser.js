// Generated by PEG.js v0.11.0-dev.325, https://pegjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "::";
  var peg$c1 = ".(";
  var peg$c2 = ":";
  var peg$c3 = "..";
  var peg$c4 = "[";
  var peg$c5 = "[[";
  var peg$c6 = "@";
  var peg$c7 = "%";
  var peg$c8 = "/";
  var peg$c9 = "\\";
  var peg$c10 = ".";
  var peg$c11 = "#";
  var peg$c12 = ";";
  var peg$c13 = ",";
  var peg$c14 = "=";
  var peg$c15 = "(";
  var peg$c16 = ")";
  var peg$c17 = "]";
  var peg$c18 = "{";
  var peg$c19 = "}";
  var peg$c20 = "?";
  var peg$c21 = "!";
  var peg$c22 = "|";
  var peg$c23 = "'";
  var peg$c24 = "\"";
  var peg$c25 = "0x";
  var peg$c26 = "s";
  var peg$c27 = "u";
  var peg$c28 = "bits";
  var peg$c29 = "bit";
  var peg$c30 = "0b";
  var peg$c31 = "true";
  var peg$c32 = "TRUE";
  var peg$c33 = "false";
  var peg$c34 = "FALSE";
  var peg$c35 = "-";
  var peg$c36 = "if";
  var peg$c37 = "else";
  var peg$c38 = "elif";
  var peg$c39 = "as";
  var peg$c40 = "is";
  var peg$c41 = "and";
  var peg$c42 = "or";
  var peg$c43 = "intersect";
  var peg$c44 = "union";
  var peg$c45 = "until";
  var peg$c46 = "default";
  var peg$c47 = "try";
  var peg$c48 = "punch";
  var peg$c49 = "I";
  var peg$c50 = "N";
  var peg$c51 = "in";
  var peg$c52 = "for";
  var peg$c53 = "while";
  var peg$c54 = "end";
  var peg$c55 = "by";
  var peg$c56 = "return";
  var peg$c57 = "unique";
  var peg$c58 = "when";
  var peg$c59 = "\t";
  var peg$c60 = "\v";
  var peg$c61 = "\f";
  var peg$c62 = " ";
  var peg$c63 = "\xA0";
  var peg$c64 = "\uFEFF";
  var peg$c65 = "\n";
  var peg$c66 = "\r\n";
  var peg$c67 = "\r";
  var peg$c68 = "\u2028";
  var peg$c69 = "\u2029";
  var peg$c70 = "/*";
  var peg$c71 = "*/";
  var peg$c72 = "//";
  var peg$c73 = "&";
  var peg$c74 = "|>";
  var peg$c75 = "*";
  var peg$c76 = "+";
  var peg$c77 = "~";
  var peg$c78 = "<<";
  var peg$c79 = ">>";
  var peg$c80 = "++";
  var peg$c81 = "**";
  var peg$c82 = "<";
  var peg$c83 = ":<";
  var peg$c84 = ">";
  var peg$c85 = ":>";
  var peg$c86 = "<=";
  var peg$c87 = ":<=";
  var peg$c88 = ">=";
  var peg$c89 = ":>=";
  var peg$c90 = "==";
  var peg$c91 = ":==";
  var peg$c92 = "->";
  var peg$c93 = "!=";
  var peg$c94 = ":!=";
  var peg$c95 = ":=";
  var peg$c96 = "^";
  var peg$c97 = "/=";
  var peg$c98 = "%=";
  var peg$c99 = "unique if";

  var peg$r0 = /^[a-z]/;
  var peg$r1 = /^[A-Z]/;
  var peg$r2 = /^[_]/;
  var peg$r3 = /^[%]/;
  var peg$r4 = /^[$]/;
  var peg$r5 = /^[0-9]/;
  var peg$r6 = /^["?"0-9_]/;
  var peg$r7 = /^[0-9_]/;
  var peg$r8 = /^["?"1-9_]/;
  var peg$r9 = /^["?"0-1_]/;
  var peg$r10 = /^["?"A-Fa-f0-9_]/;
  var peg$r11 = /^[\n\r\u2028\u2029]/;
  var peg$r12 = /^[=]/;

  var peg$e0 = peg$literalExpectation("::", false);
  var peg$e1 = peg$literalExpectation(".(", false);
  var peg$e2 = peg$literalExpectation(":", false);
  var peg$e3 = peg$literalExpectation("..", false);
  var peg$e4 = peg$literalExpectation("[", false);
  var peg$e5 = peg$literalExpectation("[[", false);
  var peg$e6 = peg$literalExpectation("@", false);
  var peg$e7 = peg$literalExpectation("%", false);
  var peg$e8 = peg$literalExpectation("/", false);
  var peg$e9 = peg$literalExpectation("\\", false);
  var peg$e10 = peg$anyExpectation();
  var peg$e11 = peg$literalExpectation(".", false);
  var peg$e12 = peg$literalExpectation("#", false);
  var peg$e13 = peg$literalExpectation(";", false);
  var peg$e14 = peg$literalExpectation(",", false);
  var peg$e15 = peg$literalExpectation("=", false);
  var peg$e16 = peg$literalExpectation("(", false);
  var peg$e17 = peg$literalExpectation(")", false);
  var peg$e18 = peg$literalExpectation("]", false);
  var peg$e19 = peg$literalExpectation("{", false);
  var peg$e20 = peg$literalExpectation("}", false);
  var peg$e21 = peg$literalExpectation("?", false);
  var peg$e22 = peg$literalExpectation("!", false);
  var peg$e23 = peg$literalExpectation("|", false);
  var peg$e24 = peg$literalExpectation("'", false);
  var peg$e25 = peg$literalExpectation("\"", false);
  var peg$e26 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e27 = peg$classExpectation([["A", "Z"]], false, false);
  var peg$e28 = peg$classExpectation(["_"], false, false);
  var peg$e29 = peg$classExpectation(["%"], false, false);
  var peg$e30 = peg$classExpectation(["$"], false, false);
  var peg$e31 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e32 = peg$literalExpectation("0x", false);
  var peg$e33 = peg$literalExpectation("s", false);
  var peg$e34 = peg$literalExpectation("u", false);
  var peg$e35 = peg$classExpectation(["\"", "?", "\"", ["0", "9"], "_"], false, false);
  var peg$e36 = peg$literalExpectation("bits", false);
  var peg$e37 = peg$literalExpectation("bit", false);
  var peg$e38 = peg$literalExpectation("0b", false);
  var peg$e39 = peg$otherExpectation("true or false");
  var peg$e40 = peg$classExpectation([["0", "9"], "_"], false, false);
  var peg$e41 = peg$otherExpectation("integer greater than or equal to zero");
  var peg$e42 = peg$otherExpectation("binary digits");
  var peg$e43 = peg$otherExpectation("hexadecimal characters");
  var peg$e44 = peg$otherExpectation("keywords");
  var peg$e45 = peg$literalExpectation("\t", false);
  var peg$e46 = peg$literalExpectation("\v", false);
  var peg$e47 = peg$literalExpectation("\f", false);
  var peg$e48 = peg$literalExpectation(" ", false);
  var peg$e49 = peg$literalExpectation("\xA0", false);
  var peg$e50 = peg$literalExpectation("\uFEFF", false);
  var peg$e51 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false);
  var peg$e52 = peg$literalExpectation("\n", false);
  var peg$e53 = peg$literalExpectation("\r\n", false);
  var peg$e54 = peg$literalExpectation("\r", false);
  var peg$e55 = peg$literalExpectation("\u2028", false);
  var peg$e56 = peg$literalExpectation("\u2029", false);
  var peg$e57 = peg$literalExpectation("/*", false);
  var peg$e58 = peg$literalExpectation("*/", false);
  var peg$e59 = peg$otherExpectation("comment");
  var peg$e60 = peg$literalExpectation("//", false);
  var peg$e61 = peg$literalExpectation("&", false);
  var peg$e62 = peg$literalExpectation("|>", false);
  var peg$e63 = peg$classExpectation(["="], false, false);
  var peg$e64 = peg$literalExpectation("*", false);
  var peg$e65 = peg$literalExpectation("+", false);
  var peg$e66 = peg$literalExpectation("-", false);
  var peg$e67 = peg$literalExpectation("<<", false);
  var peg$e68 = peg$literalExpectation(">>", false);
  var peg$e69 = peg$literalExpectation("++", false);
  var peg$e70 = peg$literalExpectation("**", false);
  var peg$e71 = peg$literalExpectation("union", false);
  var peg$e72 = peg$literalExpectation("intersect", false);
  var peg$e73 = peg$literalExpectation("<", false);
  var peg$e74 = peg$literalExpectation(":<", false);
  var peg$e75 = peg$literalExpectation(">", false);
  var peg$e76 = peg$literalExpectation(":>", false);
  var peg$e77 = peg$literalExpectation("<=", false);
  var peg$e78 = peg$literalExpectation(":<=", false);
  var peg$e79 = peg$literalExpectation(">=", false);
  var peg$e80 = peg$literalExpectation(":>=", false);
  var peg$e81 = peg$literalExpectation("==", false);
  var peg$e82 = peg$literalExpectation(":==", false);
  var peg$e83 = peg$literalExpectation("is", false);
  var peg$e84 = peg$literalExpectation("!=", false);
  var peg$e85 = peg$literalExpectation(":!=", false);
  var peg$e86 = peg$literalExpectation(":=", false);
  var peg$e87 = peg$literalExpectation("as", false);
  var peg$e88 = peg$literalExpectation("^", false);
  var peg$e89 = peg$literalExpectation("or", false);
  var peg$e90 = peg$literalExpectation("and", false);
  var peg$e91 = peg$literalExpectation("in", false);
  var peg$e92 = peg$literalExpectation("by", false);
  var peg$e93 = peg$literalExpectation("if", false);
  var peg$e94 = peg$literalExpectation("unique if", false);
  var peg$e95 = peg$literalExpectation("elif", false);
  var peg$e96 = peg$literalExpectation("else", false);
  var peg$e97 = peg$literalExpectation("for", false);
  var peg$e98 = peg$literalExpectation("while", false);
  var peg$e99 = peg$literalExpectation("try", false);
  var peg$e100 = peg$literalExpectation("when", false);
  var peg$e101 = peg$literalExpectation("I", false);
  var peg$e102 = peg$literalExpectation("N", false);
  var peg$e103 = peg$literalExpectation("return", false);
  var peg$e104 = peg$literalExpectation("punch", false);

  var peg$f0 = function(head) {
      	var i,j,tmp=[]
          if(head[0]==null){
          	head.splice(0,1)
              return head[0]
          }

      	for(i=0;i<head[1].length;i++){
          	head[0].push(head[1][i])
      	}
          return head[0]
      };
  var peg$f1 = function(head, y, x) {return prettyPrint(y,x)};
  var peg$f2 = function(head, tail) {
     	tail.unshift(head)
      var i,j,tmp=[]
      for(i=0;i<tail.length;i++){
      	for(j=0;j<tail[i].length;j++){
         		tmp.push(tail[i][j])
          }
      }
      return tmp
    	//return tail
    };
  var peg$f3 = function(x, tail) {return tail};
  var peg$f4 = function(x, head) {
          	x.push(head)
              return x
          	//return head
          };
  var peg$f5 = function(cond, x) {return x};
  var peg$f6 = function(cond, sc, x, y, z) {return prettyPrintScope(x,y,z)};
  var peg$f7 = function(cond, sc, body, x) {return x};
  var peg$f8 = function(cond, sc, body, ELSE) {
      	if((sc instanceof Array) && sc.length==0)sc=null
      	if(body!=null){
          	if(sc && sc.length!=4){
          		body.unshift(sc)
              	sc=null
          	} else if(sc && sc.length==4){
          		//body.unshift(sc[3])
              	sc=sc[1]
          	}
         	}else if(body==null) {
          	if(sc && sc.length!=4){
              	body=[sc]
                  sc=null
          	} else if(sc && sc.length==4){
              	body = null //[sc[3]]
                  sc = sc[1]
          	}
          }

   		return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
       		  type:"try",
            try_condition:cond,
            try_scope:sc,
            try_body:body,
            try_else:ELSE
      	}
      };
  var peg$f9 = function(args, sc, x, y, z) {return prettyPrintScope(x,y,z)};
  var peg$f10 = function(args, sc, body, x) {return x};
  var peg$f11 = function(args, sc, body, alt) {
      	var i,j
          for(i=0;i<sc[1].length;i++){
           	sc.push(sc[1][i])
         	}
         	sc.splice(1,1)
          if(sc[0]==null || (sc[0] instanceof Array)){
          	sc.splice(0,1)
          }
          //return body
          if(body==null){
          	body=[]
          }
          j=sc.length-1
          while(sc.length>0 && j>=0){
          	body.unshift(sc[j])
              j = j-1
          }
          if((body instanceof Array) && body.length==0) body=null

    		return {
       		type:"func_decl",
         		scope_args:args,
         		scope_body:body,
         		scope_alt_body:alt
          }
     	};
  var peg$f12 = function(sc, x, y, z) {return prettyPrintScope(x,y,z)};
  var peg$f13 = function(sc, else_true) {
      	var i,j
          for(i=0;i<sc[1].length;i++){
           	sc.push(sc[1][i])
         	}
         	sc.splice(1,1)
          if(sc[0]==null || (sc[0] instanceof Array)){
          	sc.splice(0,1)
          }
  		//return sc
          if(else_true==null){
          	else_true=[]
          }
          j=sc.length-1
          while(sc.length>0 && j>=0){
          	else_true.unshift(sc[j])
              j = j-1
          }
          if((else_true instanceof Array) && else_true.length==0)else_true=null
     		return else_true;
     	};
  var peg$f14 = function(head, x) {return x};
  var peg$f15 = function(head, tail) {
      	if(tail){
            head.push(tail)
          }
          return head
      };
  var peg$f16 = function(head) {return head};
  var peg$f17 = function(args) {
          return args
     };
  var peg$f18 = function(head, tail) {
       return {
         scope_arg_list:head,
         when:tail
       }
     };
  var peg$f19 = function(x) {return x};
  var peg$f20 = function(head, tail) {
       return {
         arg_list:head,
         when:tail
       }
     };
  var peg$f21 = function(head, tail) {
          var char = buildList(head, tail, 1);
         return char
     };
  var peg$f22 = function(if_type, if_test, x) {return x};
  var peg$f23 = function(if_type, if_test, sc, x, y, z) {return prettyPrintScope(x,y,z)};
  var peg$f24 = function(if_type, if_test, sc, if_true, x) {return x};
  var peg$f25 = function(if_type, if_test, sc, if_true, ELSE) {
      	//return sc
          var type_of_if = "if";
          if((sc instanceof Array) && sc.length==0)sc=null
          if(if_true!=null){
          	if(sc && sc.length!=4){
          		if_true.unshift(sc)
              	sc=null
          	}else if(sc && sc.length==4){
          		//if_true.unshift(sc[3])
              	sc=sc[1]
          	}
          } else if(if_true==null) {
          	if(sc && sc.length!=4){
              	if_true=[sc]
                  sc=null
          	} else if(sc && sc.length==4){
              	if_true=[sc[3]]
                  sc=sc[1]
          	}
          }
          if(if_type[0] == "unique if"){
          	type_of_if = "uif";
              return {
         			start_pos:location().start.offset,
          		end_pos:location().end.offset,
              	type:type_of_if,
              	uif_condition:if_test,
         			scope:sc,
         			true_case:if_true,
         			false_case:ELSE
       		}
          }
          //return sc
  		return {
         		start_pos:location().start.offset,
          	end_pos:location().end.offset,
              type:type_of_if,
              condition:if_test,
         		scope:sc,
         		true_case:if_true,
         		false_case:ELSE
       	}
     	};
  var peg$f26 = function(else_test, x) {return x};
  var peg$f27 = function(else_test, sc, x, y, z) {return prettyPrintScope(x,y,z)};
  var peg$f28 = function(else_test, sc, else_true, x) {return x};
  var peg$f29 = function(else_test, sc, else_true, else_false) {
      	if((sc instanceof Array) && sc.length==0)sc=null
     		if(else_true!=null){
          	if(sc && sc.length!=4){
          		else_true.unshift(sc)
              	sc=null
          	} else if(sc && sc.length==4){
          		//else_true.unshift(sc[3])
              	sc=sc[1]
          	}
          } else if(else_true==null) {
          	if(sc && sc.length!=4){
              	else_true=[sc]
                  sc=null
          	} else if(sc && sc.length==4){
              	else_true=[sc[3]]
                  sc=sc[1]
          	}
          }
       	return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
         		type:"if",
              condition:else_test,
         		scope:sc,
         		true_case:else_true,
         		false_case:else_false
       	};
     	};
  var peg$f30 = function(sc, else_true) {
      	if((sc instanceof Array))sc=null
     		if(else_true!=null){
          	if(sc && sc.length!=4){
          		else_true.unshift(sc)
              	sc=null
          	} else if(sc && sc.length==4){
          		else_true.unshift(sc[3])
              	sc=sc[1]
          	}
          } else if(else_true==null) {
          	if(sc && sc.length!=4){
              	else_true=[sc]
                  sc=null
          	} else if(sc && sc.length==4){
              	else_true=[sc[3]]
                  sc=sc[1]
          	}
          }

       	return else_true;
     	};
  var peg$f31 = function(idx, x) {return x};
  var peg$f32 = function(idx, sc, x, y, z) {return prettyPrintScope(x,y,z)};
  var peg$f33 = function(idx, sc, body) {
      	if((sc instanceof Array) && sc.length == 0)sc=null
      	if(body!=null){
          	if(sc && sc.length!=4){
          		body.unshift(sc)
              	sc=null
          	} else if(sc && sc.length==4){
          		//body.unshift(sc[3])
              	sc=sc[1]
          	}
          } else if(body==null) {
          	if(sc && sc.length!=4){
              	body=[sc]
                  sc=null
          	} else if(sc && sc.length==4){
              	body = null //[sc[3]]
                  sc = sc[1]
          	}
          }
      	return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
          	type:"for",
              for_index:idx,
             	scope:sc,
             	for_body:body
         	}
     	};
  var peg$f34 = function(head, tail) {
          //return head
         var char = buildList(head, tail, 1);
         return char
     };
  var peg$f35 = function(p, cond, x) {return x};
  var peg$f36 = function(p, cond, sc, x, y, z) {return prettyPrintScope(x,y,z)};
  var peg$f37 = function(p, cond, sc, body) {
      	//return
      	if((sc instanceof Array) && sc.length==0)sc=null
      	if(body!=null){
          	if(sc && sc.length!=4){
          		body.unshift(sc)
              	sc=null
          	} else if(sc && sc.length==4){
          		//body.unshift(sc[3])
              	sc=sc[1]
          	}
         	}else if(body==null) {
          	if(sc && sc.length!=4){
              	body=[sc]
                  sc=null
          	} else if(sc && sc.length==4){
              	body = null //[sc[3]]
                  sc = sc[1]
          	}
          }

   		return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
       		type:"while",
              while_condition:cond,
              scope:sc,
             	while_body:body
      	}
     	};
  var peg$f38 = function(head) {
      	return{
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
         		type:"return",
              r_arg:head
       	}
      };
  var peg$f39 = function(head) {
   		return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
     			type:"assertion",
         		i_condition:head
    		}
  	};
  var peg$f40 = function(head) {
      	return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
         		type:"negation",
              n_condition:head
       	}
     	};
  var peg$f41 = function(head) {
       	return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
         		type:"compile_check",
              compile_body:head
       	}
     	};
  var peg$f42 = function(head, op, tail) {
      return {
      	start_pos:location().start.offset,
         	end_pos:location().end.offset,
          type:"assignment_expression",
          operator:op,
          left:head,
          right:tail
     	}
    };
  var peg$f43 = function(func, head) { //remove "!not_in_implicit" to support foo::{}
          var arg = [];
          arg.push(head);
          return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
           	type:"function_call",
           	function:func,
           	arguments:arg
         }
       };
  var peg$f44 = function(func, x) {return x};
  var peg$f45 = function(func, head, tail) {
          var char = buildList(head, tail, 1);
          return {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
           	type:"function_call",
           	function:func,
           	arguments:char
         }
       };
  var peg$f46 = function(func) {
         	return {
           	type:"function_call",
           	function:func,
           	arguments:null,
           	body:null
      	}
     	};
  var peg$f47 = function(func, arg, scope, x) {return x};
  var peg$f48 = function(func, arg, scope, chain) {
          if(arg == null && scope){
          	arg = [];
          }
          if(scope) arg.push(scope)

          var fcall_return = {
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
          	type:"function_call",
             	function:func,
             	arguments:arg
         	};
          if(chain.length > 0){
          	return chain.reduce(function(result, element) {
       			return {
          			type: "tuple_dot",
           			dot_obj: result,
           			dot_prop: element,
         			};
   			}, fcall_return);

          }

          return fcall_return
     };
  var peg$f49 = function() {return null};
  var peg$f50 = function(head, x) {return{f:x}};
  var peg$f51 = function(head, tail) {
          return tail.reduce(function(result,element){
          	return{
              	start_pos:location().start.offset,
          		end_pos:location().end.offset,
              	type:"func_pipe",
                  pipe_arg:result,
                  pipe_func:element.f
              }
          },head);
      };
  var peg$f52 = function(ip, sym, op) {
      	op.unshift(sym);
      	return{
          	start_pos:location().start.offset,
          	end_pos:location().end.offset,
              type:"punch",
              punch_inp:ip,
              punch_op:op
          }
      };
  var peg$f53 = function(first, x, y) {
      	var arr = [], arr2 = [], foo = [];
          if(x != null){
      		var tmp1 = buildList(x[0],x[1],1);
          	for(var i = 0; i < tmp1.length; i++){
          		arr.push(tmp1[i]["value"]);
          	}
          }
          for(var j = 0; j < y.length; j++){
          	arr2.push(y[j][1]["value"]);
          }
          arr2 = arr2.join(".");
          arr = arr.join(".");
          foo.push(arr);
          foo.push(arr2);
          return foo
      };
  var peg$f54 = function(head, tail) {
       return buildBinaryExpression(head, tail);
     };
  var peg$f55 = function(head, tail, tail2) {
      	if(tail2){
          	var tmp = buildBinaryExpression(head, tail);
              if(tail2[1] == null){
              	tail2 = null;
              }else{
              	tail2 = tail2[1];
              }
          	return {
         			type:"range",
         			u_bound:tmp,
         			l_bound:tail2
       		}
          }
     		return buildBinaryExpression(head, tail);
    	};
  var peg$f56 = function(head, tail) {
          return buildBinaryExpression(head, tail);
     	};
  var peg$f57 = function(op, arg) {
      	return{
          	type:"not_op",
              not_arg:arg
          }
      };
  var peg$f58 = function(head, xhead) {
    		if(xhead){ //rule and ast for '(' expr ')'[[ ]] - bit sel statements
         		return xhead.reduce(function(result, element) {
         			return {
           			type: "bit_select",
           			bit_obj: result,
           			bit_sel: element.bit_property,
         			};
       		}, head);
          }
          return head;
    	};
  var peg$f59 = function(head, tail) {
         	var char = buildList(head, tail, 1);
          return {
          	type:"tuple_list",
          	elements:char,
          }
     };
  var peg$f60 = function(head, tail, by) {
      	var char = buildList(head, tail, 1);
         	if(by instanceof Array){ //rule and ast for '(' expr ')'[[ ]] - bit sel statements
              var by_tuple = {
          		type:"tuple_list",
          		elements:char,
         		}
      		return by.reduce(function(result, element) {
         			return {
           			type: "bit_select",
           			bit_obj: result,
           			bit_sel: element.bit_property,
         			};
       		}, by_tuple);
   		}else{
          	return{
              	type:"tuple_list",
          		elements:char,
                  skip_by:by
              }
          }

         	var char = buildList(head, tail, 1);
         	return {
          	type:"tuple_list",
          	elements:char
         	}

  	};
  var peg$f61 = function(head, tail, by) {
      	var char = buildList(head, tail, 1);
         	if(by instanceof Array){ //rule and ast for '(' expr ')'[[ ]] - bit sel statements
              var by_tuple = {
          		type:"tuple_list",
          		elements:char,
         		}
      		return by.reduce(function(result, element) {
         			return {
           			type: "bit_select",
           			bit_obj: result,
           			bit_sel: element.bit_property,
         			};
       		}, by_tuple);
   		}else{
          	return{
              	type:"tuple_list",
          		elements:char,
                  skip_by:by
              }
          }

         	var char = buildList(head, tail, 1);
         	return {
          	type:"tuple_list",
          	elements:char
         	}
    	};
  var peg$f62 = function() {
       return {
         type:"tuple_list",
         elements:null
       }
     };
  var peg$f63 = function(head, tail) {
      	var char = buildList(head, tail, 1);
         	return {
          	type:"tuple_list",
          	elements:char
         	}

  	};
  var peg$f64 = function(head, tail) {
      	var char = buildList(head, tail, 1);
         	return {
          	type:"tuple_list",
          	elements:char
         	}
    	};
  var peg$f65 = function(head, tail, by) {
  		if(by){
          	return {
         			type:"range",
         			u_bound:head,
         			l_bound:tail,
                  skip:by
       		}
          }
       	return {
         		type:"range",
         		u_bound:head,
         		l_bound:tail
       	}
     };
  var peg$f66 = function(property) {return {bit_property:property}};
  var peg$f67 = function(head, tail) {
       return tail.reduce(function(result, element) {
         return {
           type: "bit_select",
           bit_obj: result,
           bit_sel: element.bit_property,
         };
       }, head);
     };
  var peg$f68 = function(property) {return {dot_property:property}};
  var peg$f69 = function(head, tail) {
   		return tail.reduce(function(result, element) {
       		return {
          		type: "tuple_dot",
           		dot_obj: result,
           		dot_prop: element.dot_property,
         		};
   		}, head);
  	};
  var peg$f70 = function(property) {return {arr_property:property}};
  var peg$f71 = function(head, tail) {
     		return tail.reduce(function(result, element) {
         		return {
           		type: "tuple_array",
           		arr_obj: result,
           		arr_idx: element.arr_property,
         		};
       	}, head);
     	};
  var peg$f72 = function(x, y) {
          	function slash(y, type){
              	if(y[type]['type'] == "tuple_dot"){
                  	return slash(y['dot_obj'], 'dot_obj');
                  }if(y[type]['type'] == "tuple_array"){
                  	return slash(y['arr_obj'], 'arr_obj');
                  }

                  var arr = [];
                  arr.push('\\');
                  arr.push(y[type]['value']);
                  y[type]['value'] = arr.join('');
              }
          	if(x){
              	var arr = [];
                  arr.push('\\');
                  if(y['type'] == "identifier"){
                  	arr.push(y['value']);
                      y['value'] = arr.join('');
                  }else if(y['type'] == "tuple_dot"){
                  	slash(y, "dot_obj");
                  }else if(y['type'] == "tuple_array"){
                  	slash(y, "arr_obj");
                  }
                  //y['value'] = arr.join('');
              	return y
              }else{
              	return y
              }
          };
  var peg$f73 = function(arg, head) {
      	if(head) {
          	return {
              	type:":",
              	property:arg,
                	var:head
            	}
          }
         	return {
          	type:":",
           	property:arg,
           	var:null
         	}
     	};
  var peg$f74 = function(head) {
       var i, char=[]
       char.push("..");
       char.push(head);
       char.push("..");
       return {
         type:"overload",
         value:char.join('')
         //value:head
       }
     };
  var peg$f75 = function() {return text();};
  var peg$f76 = function(bang, first, chars, postfix) {
       if(bang) {
       	//return bang+first+chars.join('')
         	return {
           	type:"identifier",
           	//prefix:bang,
           	value:bang+first+chars.join('')
         	}
       }
       if(postfix){
       	var tmp = []
       	tmp.push(first+chars.join(''))
          tmp.push(postfix)
       	return{
          	type:"identifier",
              value:tmp.join('')
          }
       }
       //return first+chars.join('')
       return {
         type:"identifier",
         value:first+chars.join('')
       }
     };
  var peg$f77 = function(char) {
       //char = concatenate(char);
       return {type:"string", value:char.join('')}
     };
  var peg$f78 = function(head) {return head;};
  var peg$f79 = function(head, tail, end) {
       var i, char=[], char1=[];
       if (end){
          if (end[1]) {
          	var tmp =[];
              tmp.push(head+tail.join(''));
              tmp.push(end[0]);
              tmp.push(end[1][0].join(''));
          	return {
          		type:"number",
                  value:tmp.join(''),
          	}
         }
         var tmp = [];
         tmp.push(head+tail.join(''));
         tmp.push(end[0]);
         return {
         		type:"number",
           	value:tmp.join(''),
         }
    	}

    	return {
       	type:"number",
         	value:head+tail.join('')
     	}

  };
  var peg$f80 = function(head, tail, end) {
     	if (end) {
          if (end[1]) {
          	var tmp =[];
              tmp.push(head+tail.join(''));
              tmp.push(end[0]);
              tmp.push(end[1][0].join(''));
          	return {
                  type:"number",
                  value:tmp.join(''),
          	}
         	}
          var tmp = [];
         	tmp.push(head+tail.join(''));
         	tmp.push(end[0]);
          return {
          	type:"number",
          	value:tmp.join(''),
          }
       }
       return {
        	type:"number",
       	value:head+tail.join('')
       }
  };
  var peg$f81 = function(head) {
         return {
           type:"number",
           value:head
         }
       };
  var peg$f82 = function(head, tail) {
      if (tail) {
      	if (tail[1]) {
          	var tmp =[];
          	tmp.push(head.value);
          	tmp.push(tail[0]);
              tmp.push(tail[1][0].join(''));
          	return {
                	type:"number",
                  value:tmp.join(''),
            	}
       	}
          var tmp =[];
          tmp.push(head.value);
          tmp.push(tail[0]);
          return {
          	type:"number",
          	value:tmp.join(''),
          }
    	}
  };
  var peg$f83 = function(head, tail, tail2) {
    		var tmp = "0d"
     		if(head) {
         		return {
          		type:"number",
           		value:head+tmp+tail+tail2.join(''),
         		}
     		}

     		return {
       		type:"number",
         		value:tmp+tail+tail2.join(''),
     		}
  	};
  var peg$f84 = function(head) {
      	var tmp = ["0d"];
          tmp.push(head);
          return {
       		type:"number",
         		value:tmp.join(''),
     		}
      };
  var peg$f85 = function(head) {return head.join('')};
  var peg$f86 = function(x) {
      	var i, tmp=[]
          for(i=0;i<x.length;i++){
          	if(x[i].type=="comment"){
              	tmp.push(x[i])
              }
          }
          return tmp
      };
  var peg$f87 = function() {return };
  var peg$f88 = function() {//return "comment"
     		return {
          	type:"comment",
              start_pos:location().start.offset,
          	end_pos:location().end.offset,
              comment:text()
          }
     };
  var peg$f89 = function(x) {return x;};
  var peg$f90 = function(x) {return {type:"arithmetic_operator",value:x};};
  var peg$f91 = function(x) {return {type:"shift_operator",value:x};};
  var peg$f92 = function(x) {return {type:"tuple_operator",value:x};};
  var peg$f93 = function(x) {return {type:"not_operator",value:x};};
  var peg$f94 = function(x) {return {type:"relational_operator",value:x};};
  var peg$f95 = function(x) {return {type:"bitwise_operator",value:x};};
  var peg$f96 = function(x) {return {type:"logical_operator",value:x};};
  var peg$f97 = function(x) {return {type:"in_operator",value:x};};
  var peg$f98 = function(head, tail) {return head};

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsecode_blocks();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse__();
    s2 = [s2, s3];
    s1 = s2;
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsecode_blocks() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsecode_block_int();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseEOS();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecode_block_int();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f1(s1, s4, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseEOS();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecode_block_int();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f1(s1, s4, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecode_block_int() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = peg$parseif_statement();
    if (s2 === peg$FAILED) {
      s2 = peg$parsefor_statement();
      if (s2 === peg$FAILED) {
        s2 = peg$parsewhile_statement();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetry_statement();
          if (s2 === peg$FAILED) {
            s2 = peg$parsepunch_format();
            if (s2 === peg$FAILED) {
              s2 = peg$parseassignment_expression();
              if (s2 === peg$FAILED) {
                s2 = peg$parsefunction_pipe();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsefcall_implicit();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsefcall_explicit();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsereturn_statement();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsecompile_check_statement();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsenegation_statement();
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            s3 = peg$parseassertion_statement();
                            if (s3 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$f3(s1, s3);
                            }
                            s2 = s3;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f4(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetry_statement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseTRY();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselogical_expression();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e0);
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s5 = peg$c0;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseLBRACE();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseEOS();
            if (s7 === peg$FAILED) {
              s7 = peg$parse__();
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseLBRACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 === peg$FAILED) {
              s6 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f5(s2, s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsecode_blocks();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseEOS();
          if (s6 === peg$FAILED) {
            s6 = peg$parse__();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s4;
            s4 = peg$f6(s2, s3, s5, s6, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRBRACE();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              s8 = peg$parsescope_else();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f7(s2, s3, s4, s8);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f8(s2, s3, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsescope_declaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsescope();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBRACE();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseEOS();
        if (s4 === peg$FAILED) {
          s4 = peg$parse__();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsescope_body();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseEOS();
          if (s6 === peg$FAILED) {
            s6 = peg$parse__();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s4;
            s4 = peg$f9(s1, s3, s5, s6, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRBRACE();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              s8 = peg$parsescope_else();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f10(s1, s3, s4, s8);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f11(s1, s3, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsescope_else() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseELSE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLBRACE();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseEOS();
        if (s5 === peg$FAILED) {
          s5 = peg$parse__();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parsescope_body();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseEOS();
          if (s7 === peg$FAILED) {
            s7 = peg$parse__();
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse__();
            peg$savedPos = s5;
            s5 = peg$f12(s4, s6, s7, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseRBRACE();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f13(s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsescope_body() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsecode_blocks();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseEOS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselogical_expression();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          peg$savedPos = s2;
          s2 = peg$f14(s1, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f15(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parselogical_expression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        peg$savedPos = s0;
        s0 = peg$f16(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsescope() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseCOLON();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsescope_condition();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseCOLON();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f17(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsescope_condition() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsescope_argument();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseWHEN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselogical_expression();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f14(s1, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f18(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsescope_argument();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$f19(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseWHEN();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogical_expression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsescope_argument() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseLPAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parseidentifier();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = peg$parseidentifier();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseRPAR();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLPAR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseidentifier();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          s4 = peg$parseRPAR();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f21(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseif_statement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseUNIQUE_IF();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIF();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselogical_expression();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e0);
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s5 = peg$c0;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseLBRACE();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseEOS();
            if (s7 === peg$FAILED) {
              s7 = peg$parse__();
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseLBRACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 === peg$FAILED) {
              s6 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f22(s1, s2, s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsecode_blocks();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseEOS();
          if (s6 === peg$FAILED) {
            s6 = peg$parse__();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s4;
            s4 = peg$f23(s1, s2, s3, s5, s6, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRBRACE();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              s8 = peg$parseelse_statement();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f24(s1, s2, s3, s4, s8);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f25(s1, s2, s3, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseelse_statement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseELIF();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselogical_expression();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e0);
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s5 = peg$c0;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseLBRACE();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseEOS();
            if (s7 === peg$FAILED) {
              s7 = peg$parse__();
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseLBRACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 === peg$FAILED) {
              s6 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f26(s2, s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsecode_blocks();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseEOS();
          if (s6 === peg$FAILED) {
            s6 = peg$parse__();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s4;
            s4 = peg$f27(s2, s3, s5, s6, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRBRACE();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              s8 = peg$parseelse_statement();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f28(s2, s3, s4, s8);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f29(s2, s3, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseELSE();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        rule$expects(peg$e0);
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s4 = peg$c0;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLBRACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 === peg$FAILED) {
              s6 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          s4 = peg$parseLBRACE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEOS();
            if (s5 === peg$FAILED) {
              s5 = peg$parse__();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s2;
              s2 = peg$f19(s5);
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsecode_blocks();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseEOS();
          if (s5 === peg$FAILED) {
            s5 = peg$parse__();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            peg$savedPos = s3;
            s3 = peg$f12(s2, s4, s5, s6);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRBRACE();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f30(s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefor_statement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseFOR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefor_index();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e0);
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s5 = peg$c0;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseLBRACE();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseEOS();
            if (s7 === peg$FAILED) {
              s7 = peg$parse__();
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseLBRACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 === peg$FAILED) {
              s6 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f31(s2, s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsecode_blocks();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseEOS();
          if (s6 === peg$FAILED) {
            s6 = peg$parse__();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s4;
            s4 = peg$f32(s2, s3, s5, s6, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRBRACE();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f33(s2, s3, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefor_index() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parserhs_expression_property();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parserhs_expression_property();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parserhs_expression_property();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f34(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parserhs_expression_property();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCOMMA();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserhs_expression_property();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCOMMA();
          if (s4 !== peg$FAILED) {
            s5 = peg$parserhs_expression_property();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f34(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsewhile_statement() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseWHILE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselogical_expression();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e0);
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s5 = peg$c0;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseLBRACE();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseEOS();
            if (s7 === peg$FAILED) {
              s7 = peg$parse__();
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parseLBRACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 === peg$FAILED) {
              s6 = peg$parse__();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f35(s1, s2, s6);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsecode_blocks();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseEOS();
          if (s6 === peg$FAILED) {
            s6 = peg$parse__();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            peg$savedPos = s4;
            s4 = peg$f36(s1, s2, s3, s5, s6, s7);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRBRACE();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f37(s1, s2, s3, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereturn_statement() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseRETURN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselogical_expression();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassertion_statement() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseASSERTION();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselogical_expression();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f39(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenegation_statement() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNEGATION();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselogical_expression();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f40(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecompile_check_statement() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseCOMPILE_CHECK();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsecode_block_int();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f41(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassignment_expression() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    s2 = peg$parseconstant();
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseoverload_notation();
      if (s2 === peg$FAILED) {
        s2 = peg$parselhs_expression();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        s4 = peg$parseassignment_operator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          s6 = peg$parsefunction_pipe();
          if (s6 === peg$FAILED) {
            s6 = peg$parsefcall_implicit();
            if (s6 === peg$FAILED) {
              s6 = peg$parserhs_expression_property();
              if (s6 === peg$FAILED) {
                s6 = peg$parselogical_expression();
              }
            }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f42(s2, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefcall_implicit() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    s2 = peg$parseconstant();
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetuple_dot_notation();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parsescope_declaration();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$begin();
      s2 = peg$parseconstant();
      peg$end(true);
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetuple_dot_notation();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$begin();
          s4 = peg$parsenot_in_implicit();
          peg$end(true);
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parsewhite_space();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsewhite_space();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parserhs_expression_property();
              if (s6 === peg$FAILED) {
                s6 = peg$parserange_notation();
                if (s6 === peg$FAILED) {
                  s6 = peg$parsebit_selection_notation();
                }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s4 = peg$f44(s2, s6);
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parsewhite_space();
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsewhite_space();
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parserhs_expression_property();
              if (s8 === peg$FAILED) {
                s8 = peg$parserange_notation();
                if (s8 === peg$FAILED) {
                  s8 = peg$parsebit_selection_notation();
                }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parsewhite_space();
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsewhite_space();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parserhs_expression_property();
                if (s8 === peg$FAILED) {
                  s8 = peg$parserange_notation();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parsebit_selection_notation();
                  }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            peg$savedPos = s0;
            s0 = peg$f45(s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenot_in_implicit() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseassignment_operator();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      rule$expects(peg$e1);
      if (input.substr(peg$currPos, 2) === peg$c1) {
        s2 = peg$c1;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e2);
        if (input.charCodeAt(peg$currPos) === 58) {
          s0 = peg$c2;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e3);
          if (input.substr(peg$currPos, 2) === peg$c3) {
            s0 = peg$c3;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e4);
            if (input.charCodeAt(peg$currPos) === 91) {
              s0 = peg$c4;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              rule$expects(peg$e5);
              if (input.substr(peg$currPos, 2) === peg$c5) {
                s0 = peg$c5;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse__();
                s2 = peg$parsePLUS();
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse__();
                  s2 = peg$parseMINUS();
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse__();
                    s2 = peg$parseoverload_notation();
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parse__();
                      s2 = peg$parseSTAR();
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parse__();
                        s2 = peg$parseDIV();
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parse__();
                          s2 = peg$parseT_PLUS();
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parse__();
                            s2 = peg$parseT_STAR();
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parse__();
                              s2 = peg$parseOR();
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parse__();
                                s2 = peg$parseAND();
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parse__();
                                  s2 = peg$parseEQUEQU();
                                  if (s2 !== peg$FAILED) {
                                    s1 = [s1, s2];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parse__();
                                    s2 = peg$parseISEQU();
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parse__();
                                      s2 = peg$parseBANGEQU();
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parse__();
                                        s2 = peg$parseLE();
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parse__();
                                          s2 = peg$parseGE();
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parse__();
                                            s2 = peg$parseLT();
                                            if (s2 !== peg$FAILED) {
                                              s1 = [s1, s2];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parse__();
                                              s2 = peg$parseGT();
                                              if (s2 !== peg$FAILED) {
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parse__();
                                                s2 = peg$parseUNION();
                                                if (s2 !== peg$FAILED) {
                                                  s1 = [s1, s2];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parse__();
                                                  s2 = peg$parseINTERSECT();
                                                  if (s2 !== peg$FAILED) {
                                                    s1 = [s1, s2];
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parse__();
                                                    s2 = peg$parseIN();
                                                    if (s2 !== peg$FAILED) {
                                                      s1 = [s1, s2];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parse__();
                                                      s2 = peg$parseHAT();
                                                      if (s2 !== peg$FAILED) {
                                                        s1 = [s1, s2];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parse__();
                                                        s2 = peg$parsePIPE();
                                                        if (s2 !== peg$FAILED) {
                                                          s1 = [s1, s2];
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parse__();
                                                          s2 = peg$parseAMPERSAND();
                                                          if (s2 !== peg$FAILED) {
                                                            s1 = [s1, s2];
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefcall_implicit_no_arg() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    s2 = peg$parseconstant();
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetuple_dot_notation();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f46(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefcall_explicit() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    s2 = peg$parseconstant();
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetuple_dot_notation();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDOT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsefcall_arg_notation();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsescope_declaration();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parseDOT();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsefcall_explicit();
              if (s9 === peg$FAILED) {
                s9 = peg$parsetuple_dot_notation();
              }
              if (s9 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f47(s2, s4, s5, s9);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parseDOT();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsefcall_explicit();
                if (s9 === peg$FAILED) {
                  s9 = peg$parsetuple_dot_notation();
                }
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s7 = peg$f47(s2, s4, s5, s9);
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            peg$savedPos = s0;
            s0 = peg$f48(s2, s4, s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefcall_arg_notation() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseLPAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserhs_expression_property();
      if (s2 === peg$FAILED) {
        s2 = peg$parselhs_var_name();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parserhs_expression_property();
        if (s6 === peg$FAILED) {
          s6 = peg$parselhs_var_name();
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = peg$parserhs_expression_property();
          if (s6 === peg$FAILED) {
            s6 = peg$parselhs_var_name();
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseRPAR();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLPAR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserhs_expression_property();
        if (s2 === peg$FAILED) {
          s2 = peg$parselogical_expression();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parserhs_expression_property();
            if (s6 === peg$FAILED) {
              s6 = peg$parselogical_expression();
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parserhs_expression_property();
              if (s6 === peg$FAILED) {
                s6 = peg$parselogical_expression();
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          s4 = peg$parseRPAR();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f21(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLPAR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseRPAR();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f49();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsefunction_pipe() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsefcall_implicit();
    if (s1 === peg$FAILED) {
      s1 = peg$parselogical_expression();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseFUNC_PIPE();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsefcall_implicit();
        if (s6 === peg$FAILED) {
          s6 = peg$parsefcall_explicit();
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s4;
          s4 = peg$f50(s1, s6);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseFUNC_PIPE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsefcall_implicit();
            if (s6 === peg$FAILED) {
              s6 = peg$parsefcall_explicit();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              peg$savedPos = s4;
              s4 = peg$f50(s1, s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f51(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepunch_format() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsePUNCH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhite_space();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhite_space();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e6);
          if (input.charCodeAt(peg$currPos) === 64) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            rule$expects(peg$e7);
            if (input.charCodeAt(peg$currPos) === 37) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepunch_rhs();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f52(s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepunch_rhs() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e8);
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseidentifier();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseDOT();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseidentifier();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseDOT();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseidentifier();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      rule$expects(peg$e8);
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseDOT();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseidentifier();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseDOT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseidentifier();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f53(s1, s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e8);
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseidentifier();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseDOT();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseidentifier();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseDOT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseidentifier();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        rule$expects(peg$e8);
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c8;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseDOT();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseidentifier();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseDOT();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseidentifier();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f53(s1, s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselogical_expression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parserelational_expression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseOR();
      if (s5 === peg$FAILED) {
        s5 = peg$parseAND();
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parserelational_expression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseOR();
        if (s5 === peg$FAILED) {
          s5 = peg$parseAND();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parserelational_expression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f54(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserelational_expression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseadditive_expression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseEQUEQU();
      if (s5 === peg$FAILED) {
        s5 = peg$parseISEQU();
        if (s5 === peg$FAILED) {
          s5 = peg$parseBANGEQU();
          if (s5 === peg$FAILED) {
            s5 = peg$parseLE();
            if (s5 === peg$FAILED) {
              s5 = peg$parseGE();
              if (s5 === peg$FAILED) {
                s5 = peg$parseLT();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGT();
                }
              }
            }
          }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseadditive_expression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseEQUEQU();
        if (s5 === peg$FAILED) {
          s5 = peg$parseISEQU();
          if (s5 === peg$FAILED) {
            s5 = peg$parseBANGEQU();
            if (s5 === peg$FAILED) {
              s5 = peg$parseLE();
              if (s5 === peg$FAILED) {
                s5 = peg$parseGE();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseLT();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseGT();
                  }
                }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseadditive_expression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f54(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadditive_expression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsebitwise_expression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseT_PLUS();
      if (s5 === peg$FAILED) {
        s5 = peg$parsePLUS();
        if (s5 === peg$FAILED) {
          s5 = peg$parseMINUS();
          if (s5 === peg$FAILED) {
            s5 = peg$parseLEFT();
            if (s5 === peg$FAILED) {
              s5 = peg$parseRIGHT();
              if (s5 === peg$FAILED) {
                s5 = peg$parseT_STAR();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseUNION();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseINTERSECT();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseoverload_notation();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsebitwise_expression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseT_PLUS();
        if (s5 === peg$FAILED) {
          s5 = peg$parsePLUS();
          if (s5 === peg$FAILED) {
            s5 = peg$parseMINUS();
            if (s5 === peg$FAILED) {
              s5 = peg$parseLEFT();
              if (s5 === peg$FAILED) {
                s5 = peg$parseRIGHT();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseT_STAR();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseUNION();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseINTERSECT();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseoverload_notation();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsebitwise_expression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$currPos;
      rule$expects(peg$e3);
      if (input.substr(peg$currPos, 2) === peg$c3) {
        s4 = peg$c3;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseadditive_expression();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f55(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebitwise_expression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsemultiplicative_expression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseHAT();
      if (s5 === peg$FAILED) {
        s5 = peg$parseAMPERSAND();
        if (s5 === peg$FAILED) {
          s5 = peg$parsePIPE();
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsemultiplicative_expression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseHAT();
        if (s5 === peg$FAILED) {
          s5 = peg$parseAMPERSAND();
          if (s5 === peg$FAILED) {
            s5 = peg$parsePIPE();
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsemultiplicative_expression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f56(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemultiplicative_expression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseunary_expression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      s5 = peg$parseSTAR();
      if (s5 === peg$FAILED) {
        s5 = peg$parseDIV();
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseunary_expression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        s5 = peg$parseSTAR();
        if (s5 === peg$FAILED) {
          s5 = peg$parseDIV();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseunary_expression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f56(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunary_expression() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsefactor();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefactor();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefactor() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseLPAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      s3 = peg$parselogical_expression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        s5 = peg$parseRPAR();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsebit_selection_bracket();
          peg$savedPos = s0;
          s0 = peg$f58(s3, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parserhs_expression();
    }

    return s0;
  }

  function peg$parsetuple_by_notation() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseBY();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselhs_var_name();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f16(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetuple_notation_no_bracket() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsebit_selection_notation();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsebit_selection_notation();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsebit_selection_notation();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f59(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetuple_notation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseLPAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebit_selection_notation();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parsebit_selection_notation();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = peg$parsebit_selection_notation();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseRPAR();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetuple_by_notation();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f60(s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLPAR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserhs_expression_property();
        if (s2 === peg$FAILED) {
          s2 = peg$parselogical_expression();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA();
          if (s6 !== peg$FAILED) {
            s7 = peg$parserhs_expression_property();
            if (s7 === peg$FAILED) {
              s7 = peg$parselogical_expression();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserhs_expression_property();
              if (s7 === peg$FAILED) {
                s7 = peg$parselogical_expression();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$parseRPAR();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetuple_by_notation();
            if (s6 === peg$FAILED) {
              s6 = peg$parsebit_selection_bracket();
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f61(s2, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLPAR();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseRPAR();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f62();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsebit_selection_notation();
        }
      }
    }

    return s0;
  }

  function peg$parsetuple_notation_with_object() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseLPAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebit_selection_notation();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parsebit_selection_notation();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parse_();
          s6 = peg$parsebit_selection_notation();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseRPAR();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLPAR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserhs_expression_property();
        if (s2 === peg$FAILED) {
          s2 = peg$parselogical_expression();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parseCOMMA();
          if (s6 !== peg$FAILED) {
            s7 = peg$parserhs_expression_property();
            if (s7 === peg$FAILED) {
              s7 = peg$parselogical_expression();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse__();
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserhs_expression_property();
              if (s7 === peg$FAILED) {
                s7 = peg$parselogical_expression();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$parseRPAR();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f64(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserange_notation() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsebit_selection_notation();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    rule$expects(peg$e3);
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s2 = peg$c3;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseadditive_expression();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parsetuple_by_notation();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f65(s1, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebit_selection_bracket() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseLBRK();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseLBRK();
      if (s3 !== peg$FAILED) {
        s4 = peg$parselogical_expression();
        if (s4 === peg$FAILED) {
          s4 = peg$parsetuple_notation_no_bracket();
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseRBRK();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseRBRK();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f66(s4);
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parseLBRK();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLBRK();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselogical_expression();
          if (s4 === peg$FAILED) {
            s4 = peg$parsetuple_notation_no_bracket();
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseRBRK();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseRBRK();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s1;
              s1 = peg$f66(s4);
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebit_selection_notation() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsetuple_dot_notation();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebit_selection_bracket();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f67(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetuple_dot_dot() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseDOT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsetuple_array_notation();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f68(s3);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parseDOT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetuple_array_notation();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s1 = peg$f68(s3);
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetuple_dot_notation() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsetuple_array_notation();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetuple_dot_dot();
      peg$savedPos = s0;
      s0 = peg$f69(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetuple_array_bracket() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseLBRK();
    if (s2 !== peg$FAILED) {
      s3 = peg$parselogical_expression();
      if (s3 === peg$FAILED) {
        s3 = peg$parsetuple_notation_no_bracket();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseRBRK();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s1 = peg$f70(s3);
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parseLBRK();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogical_expression();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetuple_notation_no_bracket();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRBRK();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f70(s3);
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetuple_array_notation() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parselhs_var_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetuple_array_bracket();
      peg$savedPos = s0;
      s0 = peg$f71(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselhs_expression() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e9);
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parserange_notation();
    if (s2 === peg$FAILED) {
      s2 = peg$parsetuple_notation();
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f72(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselhs_var_name() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 === peg$FAILED) {
      s1 = peg$parseconstant();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parserhs_expression_property() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCOLON();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefcall_explicit();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetuple_notation();
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f73(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserhs_expression() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsefcall_explicit();
    if (s1 === peg$FAILED) {
      s1 = peg$parselhs_expression();
      if (s1 === peg$FAILED) {
        s1 = peg$parsescope_declaration();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseconstant() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsestring_constant();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumerical_constant();
    }

    return s0;
  }

  function peg$parseoverload_notation() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseDOT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDOT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoverload_name();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDOT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDOT();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f74(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoverload_name() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$begin();
    s4 = peg$parseoverload_exception();
    if (s4 === peg$FAILED) {
      s4 = peg$parseline_terminator();
    }
    peg$end(true);
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      rule$expects(peg$e10);
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$begin();
        s4 = peg$parseoverload_exception();
        if (s4 === peg$FAILED) {
          s4 = peg$parseline_terminator();
        }
        peg$end(true);
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e10);
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoverload_exception() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseline_terminator();
    if (s0 === peg$FAILED) {
      s0 = peg$parsewhite_space();
      if (s0 === peg$FAILED) {
        rule$expects(peg$e11);
        if (input.charCodeAt(peg$currPos) === 46) {
          s0 = peg$c10;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e12);
          if (input.charCodeAt(peg$currPos) === 35) {
            s0 = peg$c11;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e13);
            if (input.charCodeAt(peg$currPos) === 59) {
              s0 = peg$c12;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              rule$expects(peg$e14);
              if (input.charCodeAt(peg$currPos) === 44) {
                s0 = peg$c13;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                rule$expects(peg$e15);
                if (input.charCodeAt(peg$currPos) === 61) {
                  s0 = peg$c14;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  rule$expects(peg$e16);
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s0 = peg$c15;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    rule$expects(peg$e17);
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s0 = peg$c16;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      rule$expects(peg$e4);
                      if (input.charCodeAt(peg$currPos) === 91) {
                        s0 = peg$c4;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        rule$expects(peg$e18);
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s0 = peg$c17;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          rule$expects(peg$e19);
                          if (input.charCodeAt(peg$currPos) === 123) {
                            s0 = peg$c18;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            rule$expects(peg$e20);
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s0 = peg$c19;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              rule$expects(peg$e8);
                              if (input.charCodeAt(peg$currPos) === 47) {
                                s0 = peg$c8;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                rule$expects(peg$e21);
                                if (input.charCodeAt(peg$currPos) === 63) {
                                  s0 = peg$c20;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  rule$expects(peg$e22);
                                  if (input.charCodeAt(peg$currPos) === 33) {
                                    s0 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    rule$expects(peg$e23);
                                    if (input.charCodeAt(peg$currPos) === 124) {
                                      s0 = peg$c22;
                                      peg$currPos++;
                                    } else {
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      rule$expects(peg$e24);
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s0 = peg$c23;
                                        peg$currPos++;
                                      } else {
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        rule$expects(peg$e25);
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s0 = peg$c24;
                                          peg$currPos++;
                                        } else {
                                          s0 = peg$FAILED;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    s2 = peg$parsekeyword();
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseid_prefix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseid_non_digit();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseid_char();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseid_char();
        }
        s5 = peg$parseid_postfix();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f76(s2, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseid_non_digit() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e26);
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e27);
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e28);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e29);
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e30);
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseid_char() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e26);
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e27);
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e31);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e28);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseid_prefix() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseBANG();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLOCAL_REGISTER();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAMPERSAND();
      }
    }

    return s0;
  }

  function peg$parseid_postfix() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e21);
    if (input.charCodeAt(peg$currPos) === 63) {
      s0 = peg$c20;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring_constant() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e25);
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedouble_string();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsedouble_string();
      }
      rule$expects(peg$e25);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c24;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f77(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e24);
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsesingle_string();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesingle_string();
        }
        rule$expects(peg$e24);
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c23;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f77(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedouble_string() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    rule$expects(peg$e25);
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c24;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parseline_terminator();
    }
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e10);
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f75();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingle_string() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$begin();
    rule$expects(peg$e24);
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c23;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parseline_terminator();
    }
    peg$end(true);
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e10);
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f75();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumerical_constant() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseboolean();
    if (s1 === peg$FAILED) {
      s1 = peg$parsehexa_decimal();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebinary();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedecimal_signed();
          if (s1 === peg$FAILED) {
            s1 = peg$parsedecimal_digit();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f78(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehexa_decimal() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e32);
    if (input.substr(peg$currPos, 2) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsehex_digit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsehex_digit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        rule$expects(peg$e33);
        if (input.charCodeAt(peg$currPos) === 115) {
          s4 = peg$c26;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          rule$expects(peg$e34);
          if (input.charCodeAt(peg$currPos) === 117) {
            s4 = peg$c27;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = [];
          rule$expects(peg$e35);
          if (peg$r6.test(input.charAt(peg$currPos))) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              rule$expects(peg$e35);
              if (peg$r6.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
              }
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            rule$expects(peg$e36);
            if (input.substr(peg$currPos, 4) === peg$c28) {
              s7 = peg$c28;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              rule$expects(peg$e37);
              if (input.substr(peg$currPos, 3) === peg$c29) {
                s7 = peg$c29;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
              }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f79(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebinary() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e38);
    if (input.substr(peg$currPos, 2) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsebinary_digit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsebinary_digit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        rule$expects(peg$e33);
        if (input.charCodeAt(peg$currPos) === 115) {
          s4 = peg$c26;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          rule$expects(peg$e34);
          if (input.charCodeAt(peg$currPos) === 117) {
            s4 = peg$c27;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = [];
          rule$expects(peg$e35);
          if (peg$r6.test(input.charAt(peg$currPos))) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              rule$expects(peg$e35);
              if (peg$r6.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
              }
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            rule$expects(peg$e36);
            if (input.substr(peg$currPos, 4) === peg$c28) {
              s7 = peg$c28;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              rule$expects(peg$e37);
              if (input.substr(peg$currPos, 3) === peg$c29) {
                s7 = peg$c29;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
              }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f80(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e39);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c32) {
        s1 = peg$c32;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c33) {
          s1 = peg$c33;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c34) {
            s1 = peg$c34;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f81(s1);
    }
    s0 = s1;
    peg$silentFails--;

    return s0;
  }

  function peg$parsedecimal_signed() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsedecimal_digit();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      rule$expects(peg$e33);
      if (input.charCodeAt(peg$currPos) === 115) {
        s3 = peg$c26;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        rule$expects(peg$e34);
        if (input.charCodeAt(peg$currPos) === 117) {
          s3 = peg$c27;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        rule$expects(peg$e40);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            rule$expects(peg$e40);
            if (peg$r7.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          rule$expects(peg$e36);
          if (input.substr(peg$currPos, 4) === peg$c28) {
            s6 = peg$c28;
            peg$currPos += 4;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            rule$expects(peg$e37);
            if (input.substr(peg$currPos, 3) === peg$c29) {
              s6 = peg$c29;
              peg$currPos += 3;
            } else {
              s6 = peg$FAILED;
            }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f82(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedecimal_digit() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e41);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (peg$r5.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f83(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c20;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f84(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsenon_zero_digit() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$r8.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebinary_digit() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e42);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85(s1);
    }
    s0 = s1;
    peg$silentFails--;

    return s0;
  }

  function peg$parsehex_digit() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e43);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$r10.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r10.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85(s1);
    }
    s0 = s1;
    peg$silentFails--;

    return s0;
  }

  function peg$parsekeyword() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e44);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c37) {
        s1 = peg$c37;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c38) {
          s1 = peg$c38;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c39) {
            s1 = peg$c39;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c40) {
              s1 = peg$c40;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c41) {
                s1 = peg$c41;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c42) {
                  s1 = peg$c42;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c43) {
                    s1 = peg$c43;
                    peg$currPos += 9;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c44) {
                      s1 = peg$c44;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c45) {
                        s1 = peg$c45;
                        peg$currPos += 5;
                      } else {
                        s1 = peg$FAILED;
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c46) {
                          s1 = peg$c46;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c47) {
                            s1 = peg$c47;
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c48) {
                              s1 = peg$c48;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                            }
                            if (s1 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 73) {
                                s1 = peg$c49;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                              }
                              if (s1 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 78) {
                                  s1 = peg$c50;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c51) {
                                    s1 = peg$c51;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c52) {
                                      s1 = peg$c52;
                                      peg$currPos += 3;
                                    } else {
                                      s1 = peg$FAILED;
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5) === peg$c53) {
                                        s1 = peg$c53;
                                        peg$currPos += 5;
                                      } else {
                                        s1 = peg$FAILED;
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c54) {
                                          s1 = peg$c54;
                                          peg$currPos += 3;
                                        } else {
                                          s1 = peg$FAILED;
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c55) {
                                            s1 = peg$c55;
                                            peg$currPos += 2;
                                          } else {
                                            s1 = peg$FAILED;
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 6) === peg$c56) {
                                              s1 = peg$c56;
                                              peg$currPos += 6;
                                            } else {
                                              s1 = peg$FAILED;
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 5) === peg$c33) {
                                                s1 = peg$c33;
                                                peg$currPos += 5;
                                              } else {
                                                s1 = peg$FAILED;
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c34) {
                                                  s1 = peg$c34;
                                                  peg$currPos += 5;
                                                } else {
                                                  s1 = peg$FAILED;
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 4) === peg$c32) {
                                                    s1 = peg$c32;
                                                    peg$currPos += 4;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c31) {
                                                      s1 = peg$c31;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 6) === peg$c57) {
                                                        s1 = peg$c57;
                                                        peg$currPos += 6;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 4) === peg$c58) {
                                                          s1 = peg$c58;
                                                          peg$currPos += 4;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      s3 = peg$parseid_char();
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseassignment_operator() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseEQU();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseT_PLUSEQU();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSTAREQU();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePLUSEQU();
            if (s0 === peg$FAILED) {
              s0 = peg$parseMINUSEQU();
              if (s0 === peg$FAILED) {
                s0 = peg$parseLEFTEQU();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseRIGHTEQU();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhite_space();
    if (s2 === peg$FAILED) {
      s2 = peg$parseline_terminator_sequence();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecomment();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhite_space();
      if (s2 === peg$FAILED) {
        s2 = peg$parseline_terminator_sequence();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomment();
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f86(s1);
    s0 = s1;

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    s1 = peg$parsewhite_space();
    if (s1 === peg$FAILED) {
      s1 = peg$parsemulti_line_comment_no_line_terminator();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsewhite_space();
      if (s1 === peg$FAILED) {
        s1 = peg$parsemulti_line_comment_no_line_terminator();
      }
    }

    return s0;
  }

  function peg$parsewhite_space() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e45);
    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c59;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e46);
      if (input.charCodeAt(peg$currPos) === 11) {
        s0 = peg$c60;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e47);
        if (input.charCodeAt(peg$currPos) === 12) {
          s0 = peg$c61;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e48);
          if (input.charCodeAt(peg$currPos) === 32) {
            s0 = peg$c62;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e49);
            if (input.charCodeAt(peg$currPos) === 160) {
              s0 = peg$c63;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              rule$expects(peg$e50);
              if (input.charCodeAt(peg$currPos) === 65279) {
                s0 = peg$c64;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEOS() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    s2 = [];
    s3 = peg$parseSEMI_COLON();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSEMI_COLON();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f87();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsesingle_line_comment();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseline_terminator_sequence();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse__();
        s2 = peg$parseEOF();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    peg$begin();
    rule$expects(peg$e10);
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    peg$end(true);
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseline_terminator() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e51);
    if (peg$r11.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseline_terminator_sequence() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e52);
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c65;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e53);
      if (input.substr(peg$currPos, 2) === peg$c66) {
        s0 = peg$c66;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e54);
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c67;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e55);
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c68;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            rule$expects(peg$e56);
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c69;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemulti_line_comment_no_line_terminator() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e57);
    if (input.substr(peg$currPos, 2) === peg$c70) {
      s1 = peg$c70;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$begin();
      rule$expects(peg$e58);
      if (input.substr(peg$currPos, 2) === peg$c71) {
        s5 = peg$c71;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = peg$parseline_terminator();
      }
      peg$end(true);
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        rule$expects(peg$e10);
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$begin();
        rule$expects(peg$e58);
        if (input.substr(peg$currPos, 2) === peg$c71) {
          s5 = peg$c71;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseline_terminator();
        }
        peg$end(true);
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          rule$expects(peg$e10);
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      rule$expects(peg$e58);
      if (input.substr(peg$currPos, 2) === peg$c71) {
        s3 = peg$c71;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e59);
    peg$silentFails++;
    s0 = peg$parsemulti_line_comment();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesingle_line_comment();
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsesingle_line_comment() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e60);
    if (input.substr(peg$currPos, 2) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$begin();
      s5 = peg$parseline_terminator();
      peg$end(true);
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        rule$expects(peg$e10);
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$begin();
        s5 = peg$parseline_terminator();
        peg$end(true);
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          rule$expects(peg$e10);
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f88();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemulti_line_comment() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c70) {
      s1 = peg$c70;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$begin();
      if (input.substr(peg$currPos, 2) === peg$c71) {
        s5 = peg$c71;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
      }
      peg$end(true);
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$begin();
        if (input.substr(peg$currPos, 2) === peg$c71) {
          s5 = peg$c71;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        peg$end(true);
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c71) {
        s3 = peg$c71;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f88();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSEMI_COLON() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e13);
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLOCAL_REGISTER() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e6);
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAMPERSAND() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e61);
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c73;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFUNC_PIPE() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e62);
    if (input.substr(peg$currPos, 2) === peg$c74) {
      s1 = peg$c74;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBANG() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e22);
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      rule$expects(peg$e63);
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLBRK() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e4);
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRBRK() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhite_space();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhite_space();
    }
    rule$expects(peg$e18);
    if (input.charCodeAt(peg$currPos) === 93) {
      s2 = peg$c17;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLPAR() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e16);
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRPAR() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhite_space();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhite_space();
    }
    rule$expects(peg$e17);
    if (input.charCodeAt(peg$currPos) === 41) {
      s2 = peg$c16;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLBRACE() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e19);
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRBRACE() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhite_space();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhite_space();
    }
    rule$expects(peg$e20);
    if (input.charCodeAt(peg$currPos) === 125) {
      s2 = peg$c19;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRANGE_DOT() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f89(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTAR() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e64);
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c75;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePLUS() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e65);
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c76;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMINUS() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e66);
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c35;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTILDA() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.charCodeAt(peg$currPos) === 126) {
      s0 = peg$c77;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDIV() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e8);
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      rule$expects(peg$e63);
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f90(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLEFT() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e67);
    if (input.substr(peg$currPos, 2) === peg$c78) {
      s1 = peg$c78;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f91(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRIGHT() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e68);
    if (input.substr(peg$currPos, 2) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f91(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseT_PLUS() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e69);
    if (input.substr(peg$currPos, 2) === peg$c80) {
      s1 = peg$c80;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f92(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseT_STAR() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e70);
    if (input.substr(peg$currPos, 2) === peg$c81) {
      s1 = peg$c81;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f92(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNION() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e71);
    if (input.substr(peg$currPos, 5) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f92(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINTERSECT() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e72);
    if (input.substr(peg$currPos, 9) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f92(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNOT() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e22);
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f93(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLT() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e73);
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c82;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e74);
      if (input.substr(peg$currPos, 2) === peg$c83) {
        s1 = peg$c83;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      rule$expects(peg$e63);
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f94(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGT() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e75);
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c84;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e76);
      if (input.substr(peg$currPos, 2) === peg$c85) {
        s1 = peg$c85;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      rule$expects(peg$e63);
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f94(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLE() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e77);
    if (input.substr(peg$currPos, 2) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e78);
      if (input.substr(peg$currPos, 3) === peg$c87) {
        s1 = peg$c87;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f94(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGE() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e79);
    if (input.substr(peg$currPos, 2) === peg$c88) {
      s1 = peg$c88;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e80);
      if (input.substr(peg$currPos, 3) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f94(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEQUEQU() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e81);
    if (input.substr(peg$currPos, 2) === peg$c90) {
      s1 = peg$c90;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e82);
      if (input.substr(peg$currPos, 3) === peg$c91) {
        s1 = peg$c91;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f94(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseASSIGN_RIGHT() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseISEQU() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e83);
    if (input.substr(peg$currPos, 2) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      peg$savedPos = s0;
      s0 = peg$f94(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBANGEQU() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e84);
    if (input.substr(peg$currPos, 2) === peg$c93) {
      s1 = peg$c93;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e85);
      if (input.substr(peg$currPos, 3) === peg$c94) {
        s1 = peg$c94;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      peg$savedPos = s0;
      s0 = peg$f94(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEQU() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e15);
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e86);
      if (input.substr(peg$currPos, 2) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      rule$expects(peg$e15);
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c14;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsewhite_space();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsewhite_space();
        }
        peg$savedPos = s0;
        s0 = peg$f89(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAS() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e87);
    if (input.substr(peg$currPos, 2) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      peg$savedPos = s0;
      s0 = peg$f89(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHAT() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e88);
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c96;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$begin();
      rule$expects(peg$e63);
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      peg$end(true);
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f95(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOR() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e89);
    if (input.substr(peg$currPos, 2) === peg$c42) {
      s1 = peg$c42;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f96(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAND() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e90);
    if (input.substr(peg$currPos, 3) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f96(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIN() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e91);
    if (input.substr(peg$currPos, 2) === peg$c51) {
      s1 = peg$c51;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f97(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseT_PLUSEQU() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseT_PLUS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQU();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f98(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTAREQU() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseSTAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQU();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDIVEQU() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMODEQU() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c98) {
      s1 = peg$c98;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePLUSEQU() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsePLUS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQU();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMINUSEQU() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseMINUS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQU();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLEFTEQU() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseLEFT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQU();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRIGHTEQU() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseRIGHT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQU();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e14);
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c13;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOLON() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e2);
    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOUBLE_COLON() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOT() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e11);
    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c10;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBY() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e92);
    if (input.substr(peg$currPos, 2) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIF() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e93);
    if (input.substr(peg$currPos, 2) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUNIQUE_IF() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e94);
    if (input.substr(peg$currPos, 9) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseELIF() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e95);
    if (input.substr(peg$currPos, 4) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseELSE() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e96);
    if (input.substr(peg$currPos, 4) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFOR() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e97);
    if (input.substr(peg$currPos, 3) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWHILE() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e98);
    if (input.substr(peg$currPos, 5) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTRY() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e99);
    if (input.substr(peg$currPos, 3) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWHEN() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e100);
    if (input.substr(peg$currPos, 4) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMPILE_CHECK() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e12);
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseASSERTION() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e101);
    if (input.charCodeAt(peg$currPos) === 73) {
      s1 = peg$c49;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNEGATION() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e102);
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEND() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c54) {
      s1 = peg$c54;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRETURN() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e103);
    if (input.substr(peg$currPos, 6) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSLASH() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsewhite_space();
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePIPE() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e23);
    if (input.charCodeAt(peg$currPos) === 124) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePUNCH() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e104);
    if (input.substr(peg$currPos, 5) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsewhite_space();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhite_space();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


   function buildBinaryExpression(head, tail) {
     return tail.reduce(function(result, element) {
       return {
         type: "binary_expression",
         operator: element[1],
         left: result,
         right: element[3]
       };
     }, head);
   }

   function buildMultiLineBinaryExpression(head, tail) {
     return tail.reduce(function(result, element) {
       return {
         type: "binary_expression",
         operator: element[1],
         left: result,
         right: element[2]
       };
     }, head);
   }

   function extractList(list, index) {
     return list.map(function(element) { return element[index]; });
   }

   function buildList(head, tail, index) {
     return [head].concat(extractList(tail, index));
   }

   function optionalList(value) {
     return value !== null ? value : [];
   }

   function extractOptional(optional, index) {
     return optional ? optional[index] : null;
   }

   function prettyPrint(head,tail){
   	var i,tmp=[]
      if((head!=null)){
      	tail.unshift(head)
      }
      return tail
   }

   function prettyPrintScope(head,tail,end){
   	var i,tmp=[]
      if(!(tail instanceof Array) && head==null){
      	tmp.push(tail)
          return tmp
      }
      if(head==null){
      	return head
      }

      if(!(tail instanceof Array) && tail!=null){
      	head.push(tail)
      }

      if(end){
      	for(i=0;i<end.length;i++){
          	head.push(end[i])
      	}
      }
     	return head
   }

   function prettyPrintArray(head,tail){
   	var tmp
      tmp = tail.reduce(function flat(a,b) {
          if(Array.isArray(b)){
          	return b.reduce(flat,a)
          }
          if(b instanceof Object){
          	b = b.value
          }
       	a.push(b)
          return a
     	},[]);
      tmp.unshift(head.value)
      return tmp.join('')
   }



  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
