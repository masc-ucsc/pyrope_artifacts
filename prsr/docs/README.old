
++++ LEARN NEW RULES

 +Step 1: Regenerate the tests directory out of the inputs directory

 ./???

++++ Sample Usage



++++ Internals




LIST OF FOLDERS:

1. src: Contains all sources files.
2. inputs: Contains user-defined input files (.prp format). It also has the output file generated by prp0.
3. bin: Contains all executables
4. data: Contains all files generated during the course of execution
5. tests: Contains all the test files generated by prpreg0.

***********************=========================================================********************************************

DESCRIPTION OF DIFFERENT FILES:



1. The input example file used for testing is "foo.prp". New input files can be added by users as we add more rules 
to the parser

mascd9:~/live/LivePyrope$cat ./inputs/foo.prp 

123
error alpha
 abc
4567
112233
error alphanum
 123a   
b456c
224466


2. prp0:

Create a folder tests in the LivePyrope directory 
> mkdir <some path>/live/LivePyrope/tests

> ./bin/prp0 ./inputs/foo.prp 
It generates a cleaned up version of "foo.prp" with an extension "foo_toParse.prp". This file is passed as input to prp.


3. prp:


> ./bin/prp ./inputs/<inputfile>.prp 
            (or) 
  ./bin/prp ./tests/<input>.prp

prp is the actual parser. Right now, it parses the file with an extension "<something>_toParse.prp" and prints nothing
if the input satisfies the parsing rules. If there are errors, it prints the error message 


4. prpreg0:

Extract error blocks from foo.prp:
>./bin/extractError ./inputs/foo.prp     #output of extractError is written to data/

Then run the prpreg0 for foo.prp
>./bin/prpreg0 ../inputs/foo.prp

Generates a set of files in which each file has one error block from the actual input file. In this example, foo.prp has 
two error blocks in the folder "~/live/LivePyrope/tests/". prpreg0 generates two files foo_error1.prp and foo_erro2.prp and each of these files has one error block
foo.prp.


error block associated with each file is added one the last line with "#" prefix


5. prpreg:


>./bin/prpreg ./tests/<input>_error<number>.prp    

Prints pass or fail

Lets consider foo_error1.prp

Condition to pass: If the error message of generated by prp on line 3 (this line has "abc") matches the last line of this
                   file (i.e #error alpha), then it prints pass

Condition to fail: If the error message of generated by prp on line 3 (this line has "abc") does not matche the last line of 
                   this file (i.e #error alpha), then it prints "fail" and a detailed message             


6. prplearn:


> ./bin/prplearn

Learns the error block and its tokens associated with each input file in "tests" 
folder. Generates a JSON(data/prplearn.json) file linking user defined error message with pegjs 
grammar that failed. 

NOTE: If the user wants to build the learning of prplearn from scratch:
  a. Delate "data/prplearn.json"
  b. Create "data/prplearn.json". The content of the file must be "[]"
  c. Run ./prplearn


7. After using prplearn, now run the <inputfile>_toParse.prp with prp


>./bin/prp ./inputs/foo_toParse.prp (the user can use any other input file)

It will print the user defined error messages instead of the pegjs error 
messages.

If the failing parser rule does not have a matching user defined error message in prplearn.json, then prp will print the pegjs generated 
error message.


***********************=========================================================********************************************

EXECUTION STEPS:

step 1: Run ./bin/prp0 ./inputs/<input>.prp
step 2: Run ./bin/extractError ./inputs/<input>.prp
step 3: Run ./bin/prpreg0 ./inputs/<input>.prp
step 4: Run ./bin/prplearn
step 5: Run ./bin/prpreg ./tests/<testfile>.prp
Step 6: Run ./bin/prp ./inputs/<input>_toParse.prp
       (or) ./bin/prp ./tests/<input>_error1.prp (or <input>_error2 and so on...)


***********************=========================================================********************************************



