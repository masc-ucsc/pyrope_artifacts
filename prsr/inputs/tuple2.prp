clarify about:
1. "field"
3. last line rule in this file


a= (a:3, b:2)     #done
I a.a == 3 and a.b == 2

b= (4,true)       #done      
I b.0 == 4 and b.1 == true

c as (b as bool, c as __bits:3)       #done
c = (true,2)                        #done
I c.b == true and b.c.__bits == 3 and b.c == 2

d as (_ as __bits:2, _ as __bits:3)     #done
# d.0 as __bits:2
# d.1 as __bits:3

e.field1 as __bits:2
e = 3
I e.field1 == 3 and e == 3
e.f2 = 4
I e == (3,4) and e.field1 == 3 and e.field2 == 4


#done
foo = (a:3, 4)  # Legal to mix named and unnamed fields

# Fields can start with _
a._field2 = 3 

error __id attribute is a read only field:
  a.__id = 3 

error __parent attribute is a read only field:
  a.__parent = 3 


I a.__id != a.b.__id
I a.b.c.__parent.__id         == b.__id
I a.b.c.__parent.__parent.__id == a.__id


# OK remove commas for single element tuples

a = 2     #done
I (1 a 3) == (1, 2, 3)

#Expressions in a tuple can use newlines as a way to separate elements instead of commas.

a = (3
    2+4
    5)              #done

error expressions need commas or newlines in tuples:
  a = (3 4*4 5)   #done

error commas or not commas, but not skipping some:
  a = (3,4 5)     #done


a = 3  # both a and 3 are tuples, but no need to say it           #done
(b) = (3) # verbose but correct
I a == b
b = a + 3  # not ambiguous                    #done

I 1 + (3 3)  == (4 4)     #done
I (1 2 3 4) >> 1 == (0 1 1 2)     #done


# In pyrope everything is a tuple, but single expression tuples do not need parenthesis

a = 1+3          #done
a = (1+3)       #done
I a.0 == 4
I a[0] == 4 == a.0.0.0

# Tuple parenthesis can also be avoided for single line tuples with multiple single elements
a = b c         #done
c = a:1 b:2     #done

error expression in a tuple needs commas or newline as delimiters:
  a = b+1 c     #done



