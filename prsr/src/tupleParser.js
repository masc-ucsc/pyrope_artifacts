/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = "if",
      peg$c1 = peg$literalExpectation("if", false),
      peg$c2 = "::",
      peg$c3 = peg$literalExpectation("::", false),
      peg$c4 = ":",
      peg$c5 = peg$literalExpectation(":", false),
      peg$c6 = function(head) {return head;},
      peg$c7 = "elif",
      peg$c8 = peg$literalExpectation("elif", false),
      peg$c9 = "else",
      peg$c10 = peg$literalExpectation("else", false),
      peg$c11 = ";",
      peg$c12 = peg$literalExpectation(";", false),
      peg$c13 = "for",
      peg$c14 = peg$literalExpectation("for", false),
      peg$c15 = ",",
      peg$c16 = peg$literalExpectation(",", false),
      peg$c17 = "(",
      peg$c18 = peg$literalExpectation("(", false),
      peg$c19 = "\"",
      peg$c20 = peg$literalExpectation("\"", false),
      peg$c21 = "'",
      peg$c22 = peg$literalExpectation("'", false),
      peg$c23 = ")",
      peg$c24 = peg$literalExpectation(")", false),
      peg$c25 = "try",
      peg$c26 = peg$literalExpectation("try", false),
      peg$c27 = "catch",
      peg$c28 = peg$literalExpectation("catch", false),
      peg$c29 = "as",
      peg$c30 = peg$literalExpectation("as", false),
      peg$c31 = "=",
      peg$c32 = peg$literalExpectation("=", false),
      peg$c33 = ":=",
      peg$c34 = peg$literalExpectation(":=", false),
      peg$c35 = "+=",
      peg$c36 = peg$literalExpectation("+=", false),
      peg$c37 = "-=",
      peg$c38 = peg$literalExpectation("-=", false),
      peg$c39 = "*=",
      peg$c40 = peg$literalExpectation("*=", false),
      peg$c41 = "/=",
      peg$c42 = peg$literalExpectation("/=", false),
      peg$c43 = "<-",
      peg$c44 = peg$literalExpectation("<-", false),
      peg$c45 = "++=",
      peg$c46 = peg$literalExpectation("++=", false),
      peg$c47 = "--=",
      peg$c48 = peg$literalExpectation("--=", false),
      peg$c49 = "**=",
      peg$c50 = peg$literalExpectation("**=", false),
      peg$c51 = "return",
      peg$c52 = peg$literalExpectation("return", false),
      peg$c53 = "__init",
      peg$c54 = peg$literalExpectation("__init", false),
      peg$c55 = ".",
      peg$c56 = peg$literalExpectation(".", false),
      peg$c57 = "->",
      peg$c58 = peg$literalExpectation("->", false),
      peg$c59 = ".*",
      peg$c60 = peg$literalExpectation(".*", false),
      peg$c61 = "I",
      peg$c62 = peg$literalExpectation("I", false),
      peg$c63 = "C",
      peg$c64 = peg$literalExpectation("C", false),
      peg$c65 = "N",
      peg$c66 = peg$literalExpectation("N", false),
      peg$c67 = "goto",
      peg$c68 = peg$literalExpectation("goto", false),
      peg$c69 = "when",
      peg$c70 = peg$literalExpectation("when", false),
      peg$c71 = /^[a-zA-Z0-9_?]/,
      peg$c72 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "?"], false, false),
      peg$c73 = peg$otherExpectation("variables"),
      peg$c74 = "$",
      peg$c75 = peg$literalExpectation("$", false),
      peg$c76 = "%",
      peg$c77 = peg$literalExpectation("%", false),
      peg$c78 = "!",
      peg$c79 = peg$literalExpectation("!", false),
      peg$c80 = /^[0-9A-Za-z_?]/,
      peg$c81 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "_", "?"], false, false),
      peg$c82 = "&",
      peg$c83 = peg$literalExpectation("&", false),
      peg$c84 = "read",
      peg$c85 = peg$literalExpectation("read", false),
      peg$c86 = "write",
      peg$c87 = peg$literalExpectation("write", false),
      peg$c88 = "init",
      peg$c89 = peg$literalExpectation("init", false),
      peg$c90 = "flop",
      peg$c91 = peg$literalExpectation("flop", false),
      peg$c92 = "parent",
      peg$c93 = peg$literalExpectation("parent", false),
      peg$c94 = "index_read",
      peg$c95 = peg$literalExpectation("index_read", false),
      peg$c96 = "index_write",
      peg$c97 = peg$literalExpectation("index_write", false),
      peg$c98 = "fluid",
      peg$c99 = peg$literalExpectation("fluid", false),
      peg$c100 = "nelems",
      peg$c101 = peg$literalExpectation("nelems", false),
      peg$c102 = "bits",
      peg$c103 = peg$literalExpectation("bits", false),
      peg$c104 = "assoc",
      peg$c105 = peg$literalExpectation("assoc", false),
      peg$c106 = "[",
      peg$c107 = peg$literalExpectation("[", false),
      peg$c108 = "]",
      peg$c109 = peg$literalExpectation("]", false),
      peg$c110 = peg$otherExpectation("keywords"),
      peg$c111 = "and",
      peg$c112 = peg$literalExpectation("and", false),
      peg$c113 = "or",
      peg$c114 = peg$literalExpectation("or", false),
      peg$c115 = "bool",
      peg$c116 = peg$literalExpectation("bool", false),
      peg$c117 = "const",
      peg$c118 = peg$literalExpectation("const", false),
      peg$c119 = "intersect",
      peg$c120 = peg$literalExpectation("intersect", false),
      peg$c121 = "union",
      peg$c122 = peg$literalExpectation("union", false),
      peg$c123 = "to",
      peg$c124 = peg$literalExpectation("to", false),
      peg$c125 = "by",
      peg$c126 = peg$literalExpectation("by", false),
      peg$c127 = "default",
      peg$c128 = peg$literalExpectation("default", false),
      peg$c129 = "puts",
      peg$c130 = peg$literalExpectation("puts", false),
      peg$c131 = "in",
      peg$c132 = peg$literalExpectation("in", false),
      peg$c133 = peg$anyExpectation(),
      peg$c134 = "++",
      peg$c135 = peg$literalExpectation("++", false),
      peg$c136 = "def",
      peg$c137 = peg$literalExpectation("def", false),
      peg$c138 = "type:set",
      peg$c139 = peg$literalExpectation("type:set", false),
      peg$c140 = "is",
      peg$c141 = peg$literalExpectation("is", false),
      peg$c142 = "{",
      peg$c143 = peg$literalExpectation("{", false),
      peg$c144 = "}",
      peg$c145 = peg$literalExpectation("}", false),
      peg$c146 = "..",
      peg$c147 = peg$literalExpectation("..", false),
      peg$c148 = "until",
      peg$c149 = peg$literalExpectation("until", false),
      peg$c150 = "==",
      peg$c151 = peg$literalExpectation("==", false),
      peg$c152 = ":==",
      peg$c153 = peg$literalExpectation(":==", false),
      peg$c154 = "!=",
      peg$c155 = peg$literalExpectation("!=", false),
      peg$c156 = ":!=",
      peg$c157 = peg$literalExpectation(":!=", false),
      peg$c158 = "+",
      peg$c159 = peg$literalExpectation("+", false),
      peg$c160 = "-",
      peg$c161 = peg$literalExpectation("-", false),
      peg$c162 = "--",
      peg$c163 = peg$literalExpectation("--", false),
      peg$c164 = "*",
      peg$c165 = peg$literalExpectation("*", false),
      peg$c166 = "**",
      peg$c167 = peg$literalExpectation("**", false),
      peg$c168 = "/",
      peg$c169 = peg$literalExpectation("/", false),
      peg$c170 = "<<<",
      peg$c171 = peg$literalExpectation("<<<", false),
      peg$c172 = ">>>",
      peg$c173 = peg$literalExpectation(">>>", false),
      peg$c174 = "<<",
      peg$c175 = peg$literalExpectation("<<", false),
      peg$c176 = ">>",
      peg$c177 = peg$literalExpectation(">>", false),
      peg$c178 = " ",
      peg$c179 = peg$literalExpectation(" ", false),
      peg$c180 = function(head, tail) {
          	var i;
          	for (i=0; i<tail.length; i++) {
              
              	//"<<" precedence
             		if ((tail[i][1] == ">>>" || tail[i][1] == "<<<" || tail[i][1] == ">>" || tail[i][1] == "<<") && tail.length == 1) {
              		if (tail[i][0] == " " && tail[i][2] == " ") {}
                  	else if (tail[i][0] != " " && tail[i][2] != " ") {}
                  	//1>> 2, 1 <<2
                  	if ((tail[i][0] != "" && tail[i][2] == "") || (tail[i][0] == "" && tail[i][2] != "")) {return false;}
                  	// a >> 3+4                   # error: unclear (a>>3)+4 : a>>(3+4)
                  	//if(tail[i][3][1][0][1] == "+" || tail[i][3][1][0][1] == "-" || tail[i][3][1][0][1] == "*" || tail[i][3][1][0][1] == "/") {return false;}
                 		//all working perfect
            		}
              	else if ((tail[i][1] == ">>>" || tail[i][1] == "<<<" || tail[i][1] == ">>" || tail[i][1] == "<<") && i != tail.length - 1) {
              		if (tail[i][0] == " " && tail[i][2] == " ") {} 
                  	//1>>2>>3 is error! same precedence operators must have brackets
                 		if(tail[i+1][1] == ">>>" || tail[i+1][1] == "<<<" || tail[i+1][1] == ">>" || tail[i+1][1] == "<<") {return false;}
                      //a >> 3+4
                  	if((tail[i+1][1] == "+" || tail[i+1][1] == "-" || tail[i+1][1] == "*" || tail[i+1][1] == "/") && tail[i][0] != "" && tail[i][2] != "" && tail[i+1][0] == "") {return false;}
                      //a >>3+4, a>> 3+4
                      //if((tail[i+1][1] == "+" || tail[i+1][1] == "-" || tail[i+1][1] == "*" || tail[i+1][1] == "/") && ((tail[i][0] == " " && tail[i][2] == null)||(tail[i][0] == null && tail[i][2] == " ")) && tail[i+1][0] == null) {return "rule2";}
                      //a>>3+4, a>>3* 4, (a>>3*4) + 5, (a>>3*4)*5
                      if((tail[i+1][1] == "+" || tail[i+1][1] == "-" || tail[i+1][1] == "*" || tail[i+1][1] == "/") && tail[i][0] == "" && tail[i][2] == "" && tail[i+1][0] == "") {return false;}
                      //a>> 3 + 5, a >>3 * 5, a >>3+4, a>> 3+4
                      if((tail[i+1][1] == "+" || tail[i+1][1] == "-" || tail[i+1][1] == "*" || tail[i+1][1] == "/") && ((tail[i][0] != "" && tail[i][2] == "")||(tail[i][0] == "" && tail[i][2] != ""))) {return false;}
                      //a >> 3 + 4, a >> 3*4
                      if((tail[i+1][1] == "+" || tail[i+1][1] == "-" || tail[i+1][1] == "*" || tail[i+1][1] == "/") && tail[i][0] != "" && tail[i][2] != "") {return false;}
             		}
                  else if ((tail[i][1] == ">>>" || tail[i][1] == "<<<" || tail[i][1] == ">>" || tail[i][1] == "<<") && i == tail.length - 1) {
                  	//a+1>>3, a+ 1>>2,
                  	if((tail[i-1][1] == "+" || tail[i-1][1] == "-" || tail[i-1][1] == "*" || tail[i-1][1] == "/") && tail[i][0] == "" && tail[i][2] == "" && (tail[i-1][0] == "" || tail[i-1][2] == "")) {return false;}
                      //a+1>> 2, a + 1 >>3, a + 1>> 3
                      if((tail[i-1][1] == "+" || tail[i-1][1] == "-" || tail[i-1][1] == "*" || tail[i-1][1] == "/") && ((tail[i][0] != "" && tail[i][2] == "")||(tail[i][0] == "" && tail[i][2] != ""))) {return false;}
                      //a + 1 >> 3
                      if((tail[i-1][1] == "+" || tail[i-1][1] == "-" || tail[i-1][1] == "*" || tail[i-1][1] == "/") && tail[i][0] != "" && tail[i][2] != "") {return false;}
                  
                  }
                  
              //"+" precedence
              	if ((tail[i][1] == "+" || tail[i][1] == "-") && tail.length == 1) {
                 		if (tail[i][0] == " " && tail[i][2] == " ") {}
                      else if (tail[i][0] == "" && tail[i][2] == "") {}
                      //1+ 2, 1 -2
                      if ((tail[i][0] != "" && tail[i][2] == "") || (tail[i][0] == "" && tail[i][2] != "")) {return false;}
                      //all working perfect
                  }
          		else if ((tail[i][1] == "+" || tail[i][1] == "-") && i != tail.length - 1) {
                 		if (tail[i][0] == " " && tail[i][2] == " ") {} 
                      //1+2+3 is error! same precedence operators must have brackets
                      //if(tail[i+1][1] == "+" || tail[i+1][1] == "-") {return false;}
                       //1+2*3, 1+2 *3, 1+2* 3, 1+2 * 3 // * and / both working for rule2
                      if (tail[i][0] == "" && tail[i][2] == "" && (tail[i+1][1] == "*" || tail[i+1][1] == "/")) {return false;}
                      //1+ 2*3, 1 +2*3, 1 +2* 3, 1 +2+ 3, 1*2 +3*4
                      if ((tail[i][0] == "" || tail[i][2] == "") && (tail[i+1][1] == "*" || tail[i+1][1] == "/")) {return false;}
                      //1 + 2+ 3, 1 + 2+3, 1+2 + 3 // + and - works perfectly
                      if ((tail[i][0] != "" && tail[i][2] != "" && tail[i+1][0] == "" && (tail[i+1][1] == "+" || tail[i+1][1] == "-")) || ((tail[i][0] == "" || tail[i][2] == "") && tail[i+1][0] != "")) {return false;}
                      //if ((tail[i][0] == " " && tail[i][2] == " " && tail[i+1][0] != " " && tail[i+1][1] != "/") || (tail[i+1][0] == " " && tail[i+1][2] == " " && tail[i][0] != " " && tail[i][1] != "/")) {return "rule4.1";}
                      //+ and - working perfectly with * and /
                  }
                  else if ((tail[i][1] == "+" || tail[i][1] == "-") && i == tail.length - 1) {
                 		if (tail[i][0] == " " && tail[i][2] == " ") {} 
                      //1 + 2 +3, 1*2+ 3, 1*2 +3, 1+2+ 3
                      if ((tail[i][0] == "" && tail[i][2] != "") || (tail[i][0] != "" && tail[i][2] == "")) {return false;}
                      //rule 6 matches examples that satisfy rule5! rule6 maybe redundant (check and remove)
                      //1*2+3 //both * AND / working perfectly
                      if ((tail[i-1][0] == "" && tail[i-1][2] == "" && (tail[i-1][1] == "*" || tail[i-1][1] == "/") && tail[i][0] == "")) {return false;}
                      //+ and - working perfectly with * and /
                  }
                  
                  
                  //"*" precedence
                  if ((tail[i][1] == "*" || tail[i][1] == "/") && tail.length == 1) {
                 		if (tail[i][0] == " " && tail[i][2] == " ") {}
                      else if (tail[i][0] == "" && tail[i][2] == "") {}
                      //1* 2, 1 /2
                      if((tail[i][0] != "" && tail[i][2] == "") || (tail[i][0] == "" && tail[i][2] != "")) {return false;}
                      //all working perfect
                  }
                  else if ((tail[i][1] == "*" || tail[i][1] == "/") && i != tail.length - 1) {
                 		if (tail[i][0] == " " && tail[i][2] == " ") {} 
                      //1*2*3 is error! same precedence operators must have brackets
                      //if(tail[i+1][1] == "*" || tail[i+1][1] == "/") {return false;}
                      //1* 2 + 3, 1 *2 + 3, 1 *2+3, 1*  2+ 3, 1 *2 * 3, 1* 2 * 3 
                      if ((tail[i][0] == "" && tail[i][2] != "") || (tail[i][0] != "" && tail[i][2] == "")) {return false;}
                      //1 * 2 + 3, 1 * 2+3, 1 * 2+ 3, 1 * 2 +3  //second part of rule 9 is useless (rule 8 covers that part already) (check and remove)
                      if ((tail[i][0] != "" && tail[i][2] != "" && (tail[i+1][1] == "+" || tail[i+1][1] == "-"))) {return false;}   
                      //4*3 * 3, 1*2 * 3*4 and 1 * 2*3
                      if ((tail[i][0] != "" && tail[i][2] != "" && tail[i+1][0] == "" && tail[i+1][1] == "*") || (tail[i+1][0] != "" && tail[i+1][2] != "" && tail[i][0] == "" && tail[i+1][1] == "*")) {return false;}
                      if ((tail[i][0] != "" && tail[i][2] != "" && tail[i+1][0] == "" && tail[i+1][1] == "/") || (tail[i+1][0] != "" && tail[i+1][2] != "" && tail[i][0] == "" && tail[i+1][1] == "/")) {return false;}           
                      //1*2 + 3
                      if ((tail[i+1][0] == " " && tail[i+1][2] == " " && tail[i][0] != " " && (tail[i+1][1] == "+" || tail[i+1][1] == "-"))) {}
                      //1 + 2*3>>4
                      if ((tail[i+1][1] == "<<<" || tail[i+1][1] == ">>>" || tail[i+1][1] == "<<" || tail[i+1][1] == ">>") && (tail[i-1][1] == "+" || tail[i-1][1] == "-")) {return false;}
                      //* and / works perfectly with + and -
                  }
                  else if ((tail[i][1] == "*" || tail[i][1] == "/") && i == tail.length - 1) {
                  	if (tail[i][0] == " " && tail[i][2] == " ") {}
                      //1 + 2 * 3. works with * and /
                 		if (tail[i][0] != "" && tail[i][2] != "" && (tail[i-1][1] == "+" || tail[i-1][1] == "-")) {return false;} 
                      //1 + 2* 3, 1 + 2 *3. works with * and /
                      if ((tail[i][0] != "" && tail[i][2] == "") || (tail[i][0] == "" && tail[i][2] != "")) {return false;}
                      //if ((tail[i-1][0] != " " && tail[i-1][2] != " " && tail[i-1][1] == "*" && tail[i][0] != " " && tail[i][1] != "*")) {return "rule13";}
                      //* and / works perfectly wih + and -
                  }
                  
          	}
              //return head+tail;
              return true;
          },
      peg$c181 = function(head, tail) {
          var tmp = [].concat.apply([], tail)
          return head+[].concat.apply([], tmp).join('');},
      peg$c182 = "()",
      peg$c183 = peg$literalExpectation("()", false),
      peg$c184 = peg$otherExpectation("correct indentation"),
      peg$c185 = function(spaces) { return spaces.length === indentLevel * INDENT_STEP; },
      peg$c186 = function() { indentLevel++; return true; },
      peg$c187 = function() { indentLevel--; return true; },
      peg$c188 = "0x",
      peg$c189 = peg$literalExpectation("0x", false),
      peg$c190 = "s",
      peg$c191 = peg$literalExpectation("s", false),
      peg$c192 = "u",
      peg$c193 = peg$literalExpectation("u", false),
      peg$c194 = "0b",
      peg$c195 = peg$literalExpectation("0b", false),
      peg$c196 = "_",
      peg$c197 = peg$literalExpectation("_", false),
      peg$c198 = peg$otherExpectation("true or false"),
      peg$c199 = "true",
      peg$c200 = peg$literalExpectation("true", false),
      peg$c201 = "TRUE",
      peg$c202 = peg$literalExpectation("TRUE", false),
      peg$c203 = "false",
      peg$c204 = peg$literalExpectation("false", false),
      peg$c205 = "FALSE",
      peg$c206 = peg$literalExpectation("FALSE", false),
      peg$c207 = peg$otherExpectation("integer greater than or equal to zero"),
      peg$c208 = /^["?"0-9]/,
      peg$c209 = peg$classExpectation(["\"", "?", "\"", ["0", "9"]], false, false),
      peg$c210 = peg$otherExpectation("integer greater than zero"),
      peg$c211 = /^["?"1-9]/,
      peg$c212 = peg$classExpectation(["\"", "?", "\"", ["1", "9"]], false, false),
      peg$c213 = peg$otherExpectation("binary digits"),
      peg$c214 = /^["?"0-1]/,
      peg$c215 = peg$classExpectation(["\"", "?", "\"", ["0", "1"]], false, false),
      peg$c216 = peg$otherExpectation("hexadecimal characters"),
      peg$c217 = /^["?"A-F]/,
      peg$c218 = peg$classExpectation(["\"", "?", "\"", ["A", "F"]], false, false),
      peg$c219 = peg$otherExpectation("integer"),
      peg$c220 = "<=",
      peg$c221 = peg$literalExpectation("<=", false),
      peg$c222 = ">=",
      peg$c223 = peg$literalExpectation(">=", false),
      peg$c224 = ">",
      peg$c225 = peg$literalExpectation(">", false),
      peg$c226 = "<",
      peg$c227 = peg$literalExpectation("<", false),
      peg$c228 = ":<=",
      peg$c229 = peg$literalExpectation(":<=", false),
      peg$c230 = ":>=",
      peg$c231 = peg$literalExpectation(":>=", false),
      peg$c232 = ":>",
      peg$c233 = peg$literalExpectation(":>", false),
      peg$c234 = ":<",
      peg$c235 = peg$literalExpectation(":<", false),
      peg$c236 = peg$otherExpectation("End of Input"),
      peg$c237 = "",
      peg$c238 = peg$otherExpectation("newline"),
      peg$c239 = "\n",
      peg$c240 = peg$literalExpectation("\n", false),
      peg$c241 = peg$otherExpectation("blank space"),
      peg$c242 = peg$otherExpectation("whitespace"),
      peg$c243 = "\t",
      peg$c244 = peg$literalExpectation("\t", false),
      peg$c245 = "\x0B",
      peg$c246 = peg$literalExpectation("\x0B", false),
      peg$c247 = "\f",
      peg$c248 = peg$literalExpectation("\f", false),
      peg$c249 = "\xA0",
      peg$c250 = peg$literalExpectation("\xA0", false),
      peg$c251 = "\uFEFF",
      peg$c252 = peg$literalExpectation("\uFEFF", false),
      peg$c253 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
      peg$c254 = peg$classExpectation([" ", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false),
      peg$c255 = peg$otherExpectation("comments"),
      peg$c256 = "###",
      peg$c257 = peg$literalExpectation("###", false),
      peg$c258 = "###}",
      peg$c259 = peg$literalExpectation("###}", false),
      peg$c260 = "#",
      peg$c261 = peg$literalExpectation("#", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parseblocks();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment();
    }

    return s0;
  }

  function peg$parseexpressionParsing() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpressions();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsenewLine();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexpressions();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsenewLine();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpressions();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseblocks() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsecodeBlocks();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecodeBlocks();
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecodeBlocks() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsesamedent();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseforLoop();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsesamedent();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseforLoop();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsetryStatement();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsesamedent();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecatchStatement();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsesingleLineIfStatement();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOS();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseifStatement();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parsesamedent();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseelifStatement();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$parsesamedent();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseelifStatement();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parsesamedent();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseelseStatement();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseifStatement();
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parsesamedent();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseelseStatement();
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsedef();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseinternalScope();
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseputs();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseEOS();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parsereturnStatement();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseEOS();
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parseexpressionAssignment();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseEOS();
                          if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parsecompileCheckStatement();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseEOS();
                            if (s4 !== peg$FAILED) {
                              s3 = [s3, s4];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            s3 = peg$parseassertionStatement();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseEOS();
                              if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parsenegationStatement();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseEOS();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parsegoto();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseEOS();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$parseisExpressions();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseEOS();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    s3 = peg$parsebitSelectionAssignment();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseEOS();
                                      if (s4 !== peg$FAILED) {
                                        s3 = [s3, s4];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$currPos;
                                      s3 = peg$parseassignmentStatement();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseEOS();
                                        if (s4 !== peg$FAILED) {
                                          s3 = [s3, s4];
                                          s2 = s3;
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$currPos;
                                        s3 = peg$parsemultiLineExpression();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseEOS();
                                          if (s4 !== peg$FAILED) {
                                            s3 = [s3, s4];
                                            s2 = s3;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$currPos;
                                          s3 = peg$parsestringExpressions();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parseEOS();
                                            if (s4 !== peg$FAILED) {
                                              s3 = [s3, s4];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$FAILED;
                                          }
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$currPos;
                                            s3 = peg$parsefunctionCall();
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parseEOS();
                                              if (s4 !== peg$FAILED) {
                                                s3 = [s3, s4];
                                                s2 = s3;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                            if (s2 === peg$FAILED) {
                                              s2 = peg$currPos;
                                              s3 = peg$parsecomment();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseEOS();
                                                if (s4 !== peg$FAILED) {
                                                  s3 = [s3, s4];
                                                  s2 = s3;
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$FAILED;
                                              }
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$parseEOL();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseifStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblankSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicalExpressions();
        if (s3 === peg$FAILED) {
          s3 = peg$parserelationalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenumbers();
              if (s3 === peg$FAILED) {
                s3 = peg$parsestrings();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsescopeColonNotation();
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c2) {
                s5 = peg$c2;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s5 = peg$c4;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCA();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parsenewLine();
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parsecomment();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsenewLine();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parsenewLine();
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parsecomment();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsenewLine();
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      }
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseindent();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseblocks();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsededent();
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c6(s1);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseelifStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseblankSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicalExpressions();
        if (s3 === peg$FAILED) {
          s3 = peg$parserelationalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenumbers();
              if (s3 === peg$FAILED) {
                s3 = peg$parsestrings();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsescopeColonNotation();
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c2) {
                s5 = peg$c2;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s5 = peg$c4;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCA();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseCN();
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseCN();
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseindent();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseblocks();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsededent();
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c6(s1);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseelseStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsescopeColonNotation();
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c2) {
            s3 = peg$c2;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c4;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCA();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseCN();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseCN();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseindent();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseblocks();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsededent();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c6(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingleLineIfStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicalExpressions();
        if (s3 === peg$FAILED) {
          s3 = peg$parserelationalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenumbers();
              if (s3 === peg$FAILED) {
                s3 = peg$parsestrings();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsescopeColonNotation();
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c2) {
                s5 = peg$c2;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s5 = peg$c4;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesingleLineIfBlockElements();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$currPos;
                  s10 = [];
                  s11 = peg$parseblankSpace();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parseblankSpace();
                  }
                  if (s10 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s11 = peg$c11;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c12); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = [];
                      s13 = peg$parseblankSpace();
                      while (s13 !== peg$FAILED) {
                        s12.push(s13);
                        s13 = peg$parseblankSpace();
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsesingleLineIfBlockElements();
                        if (s13 !== peg$FAILED) {
                          s10 = [s10, s11, s12, s13];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$currPos;
                    s10 = [];
                    s11 = peg$parseblankSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseblankSpace();
                    }
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s11 = peg$c11;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = [];
                        s13 = peg$parseblankSpace();
                        while (s13 !== peg$FAILED) {
                          s12.push(s13);
                          s13 = peg$parseblankSpace();
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsesingleLineIfBlockElements();
                          if (s13 !== peg$FAILED) {
                            s10 = [s10, s11, s12, s13];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$currPos;
                    s11 = peg$parsenewLine();
                    if (s11 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c7) {
                        s12 = peg$c7;
                        peg$currPos += 4;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c8); }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = [];
                        s14 = peg$parseblankSpace();
                        if (s14 !== peg$FAILED) {
                          while (s14 !== peg$FAILED) {
                            s13.push(s14);
                            s14 = peg$parseblankSpace();
                          }
                        } else {
                          s13 = peg$FAILED;
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parselogicalExpressions();
                          if (s14 === peg$FAILED) {
                            s14 = peg$parserelationalExpressions();
                            if (s14 === peg$FAILED) {
                              s14 = peg$parseexpressions();
                              if (s14 === peg$FAILED) {
                                s14 = peg$parsenumbers();
                                if (s14 === peg$FAILED) {
                                  s14 = peg$parsestrings();
                                }
                              }
                            }
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = [];
                            s16 = peg$parseblankSpace();
                            while (s16 !== peg$FAILED) {
                              s15.push(s16);
                              s16 = peg$parseblankSpace();
                            }
                            if (s15 !== peg$FAILED) {
                              s16 = peg$parsescopeColonNotation();
                              if (s16 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c2) {
                                  s16 = peg$c2;
                                  peg$currPos += 2;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                }
                                if (s16 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s16 = peg$c4;
                                    peg$currPos++;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                  }
                                }
                              }
                              if (s16 !== peg$FAILED) {
                                s17 = [];
                                s18 = peg$parseblankSpace();
                                while (s18 !== peg$FAILED) {
                                  s17.push(s18);
                                  s18 = peg$parseblankSpace();
                                }
                                if (s17 !== peg$FAILED) {
                                  s18 = peg$parsesingleLineIfBlockElements();
                                  if (s18 !== peg$FAILED) {
                                    s19 = [];
                                    s20 = peg$currPos;
                                    s21 = [];
                                    s22 = peg$parseblankSpace();
                                    while (s22 !== peg$FAILED) {
                                      s21.push(s22);
                                      s22 = peg$parseblankSpace();
                                    }
                                    if (s21 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 59) {
                                        s22 = peg$c11;
                                        peg$currPos++;
                                      } else {
                                        s22 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                      }
                                      if (s22 !== peg$FAILED) {
                                        s23 = [];
                                        s24 = peg$parseblankSpace();
                                        while (s24 !== peg$FAILED) {
                                          s23.push(s24);
                                          s24 = peg$parseblankSpace();
                                        }
                                        if (s23 !== peg$FAILED) {
                                          s24 = peg$parsesingleLineIfBlockElements();
                                          if (s24 !== peg$FAILED) {
                                            s21 = [s21, s22, s23, s24];
                                            s20 = s21;
                                          } else {
                                            peg$currPos = s20;
                                            s20 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s20;
                                          s20 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s20;
                                        s20 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s20;
                                      s20 = peg$FAILED;
                                    }
                                    while (s20 !== peg$FAILED) {
                                      s19.push(s20);
                                      s20 = peg$currPos;
                                      s21 = [];
                                      s22 = peg$parseblankSpace();
                                      while (s22 !== peg$FAILED) {
                                        s21.push(s22);
                                        s22 = peg$parseblankSpace();
                                      }
                                      if (s21 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 59) {
                                          s22 = peg$c11;
                                          peg$currPos++;
                                        } else {
                                          s22 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                        }
                                        if (s22 !== peg$FAILED) {
                                          s23 = [];
                                          s24 = peg$parseblankSpace();
                                          while (s24 !== peg$FAILED) {
                                            s23.push(s24);
                                            s24 = peg$parseblankSpace();
                                          }
                                          if (s23 !== peg$FAILED) {
                                            s24 = peg$parsesingleLineIfBlockElements();
                                            if (s24 !== peg$FAILED) {
                                              s21 = [s21, s22, s23, s24];
                                              s20 = s21;
                                            } else {
                                              peg$currPos = s20;
                                              s20 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s20;
                                            s20 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s20;
                                          s20 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s20;
                                        s20 = peg$FAILED;
                                      }
                                    }
                                    if (s19 !== peg$FAILED) {
                                      s11 = [s11, s12, s13, s14, s15, s16, s17, s18, s19];
                                      s10 = s11;
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    if (s10 !== peg$FAILED) {
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$currPos;
                        s11 = peg$parsenewLine();
                        if (s11 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c7) {
                            s12 = peg$c7;
                            peg$currPos += 4;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = [];
                            s14 = peg$parseblankSpace();
                            if (s14 !== peg$FAILED) {
                              while (s14 !== peg$FAILED) {
                                s13.push(s14);
                                s14 = peg$parseblankSpace();
                              }
                            } else {
                              s13 = peg$FAILED;
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parselogicalExpressions();
                              if (s14 === peg$FAILED) {
                                s14 = peg$parserelationalExpressions();
                                if (s14 === peg$FAILED) {
                                  s14 = peg$parseexpressions();
                                  if (s14 === peg$FAILED) {
                                    s14 = peg$parsenumbers();
                                    if (s14 === peg$FAILED) {
                                      s14 = peg$parsestrings();
                                    }
                                  }
                                }
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = [];
                                s16 = peg$parseblankSpace();
                                while (s16 !== peg$FAILED) {
                                  s15.push(s16);
                                  s16 = peg$parseblankSpace();
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parsescopeColonNotation();
                                  if (s16 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c2) {
                                      s16 = peg$c2;
                                      peg$currPos += 2;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                    }
                                    if (s16 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 58) {
                                        s16 = peg$c4;
                                        peg$currPos++;
                                      } else {
                                        s16 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                      }
                                    }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = [];
                                    s18 = peg$parseblankSpace();
                                    while (s18 !== peg$FAILED) {
                                      s17.push(s18);
                                      s18 = peg$parseblankSpace();
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parsesingleLineIfBlockElements();
                                      if (s18 !== peg$FAILED) {
                                        s19 = [];
                                        s20 = peg$currPos;
                                        s21 = [];
                                        s22 = peg$parseblankSpace();
                                        while (s22 !== peg$FAILED) {
                                          s21.push(s22);
                                          s22 = peg$parseblankSpace();
                                        }
                                        if (s21 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 59) {
                                            s22 = peg$c11;
                                            peg$currPos++;
                                          } else {
                                            s22 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                          }
                                          if (s22 !== peg$FAILED) {
                                            s23 = [];
                                            s24 = peg$parseblankSpace();
                                            while (s24 !== peg$FAILED) {
                                              s23.push(s24);
                                              s24 = peg$parseblankSpace();
                                            }
                                            if (s23 !== peg$FAILED) {
                                              s24 = peg$parsesingleLineIfBlockElements();
                                              if (s24 !== peg$FAILED) {
                                                s21 = [s21, s22, s23, s24];
                                                s20 = s21;
                                              } else {
                                                peg$currPos = s20;
                                                s20 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s20;
                                              s20 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s20;
                                            s20 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s20;
                                          s20 = peg$FAILED;
                                        }
                                        while (s20 !== peg$FAILED) {
                                          s19.push(s20);
                                          s20 = peg$currPos;
                                          s21 = [];
                                          s22 = peg$parseblankSpace();
                                          while (s22 !== peg$FAILED) {
                                            s21.push(s22);
                                            s22 = peg$parseblankSpace();
                                          }
                                          if (s21 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 59) {
                                              s22 = peg$c11;
                                              peg$currPos++;
                                            } else {
                                              s22 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                            }
                                            if (s22 !== peg$FAILED) {
                                              s23 = [];
                                              s24 = peg$parseblankSpace();
                                              while (s24 !== peg$FAILED) {
                                                s23.push(s24);
                                                s24 = peg$parseblankSpace();
                                              }
                                              if (s23 !== peg$FAILED) {
                                                s24 = peg$parsesingleLineIfBlockElements();
                                                if (s24 !== peg$FAILED) {
                                                  s21 = [s21, s22, s23, s24];
                                                  s20 = s21;
                                                } else {
                                                  peg$currPos = s20;
                                                  s20 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s20;
                                                s20 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s20;
                                              s20 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s20;
                                            s20 = peg$FAILED;
                                          }
                                        }
                                        if (s19 !== peg$FAILED) {
                                          s11 = [s11, s12, s13, s14, s15, s16, s17, s18, s19];
                                          s10 = s11;
                                        } else {
                                          peg$currPos = s10;
                                          s10 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s10;
                                        s10 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      }
                    } else {
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      s11 = peg$parsenewLine();
                      if (s11 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c9) {
                          s12 = peg$c9;
                          peg$currPos += 4;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c10); }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = [];
                          s14 = peg$parseblankSpace();
                          while (s14 !== peg$FAILED) {
                            s13.push(s14);
                            s14 = peg$parseblankSpace();
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsescopeColonNotation();
                            if (s14 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c2) {
                                s14 = peg$c2;
                                peg$currPos += 2;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c3); }
                              }
                              if (s14 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s14 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                              }
                            }
                            if (s14 !== peg$FAILED) {
                              s15 = [];
                              s16 = peg$parseblankSpace();
                              while (s16 !== peg$FAILED) {
                                s15.push(s16);
                                s16 = peg$parseblankSpace();
                              }
                              if (s15 !== peg$FAILED) {
                                s16 = peg$parsesingleLineIfBlockElements();
                                if (s16 !== peg$FAILED) {
                                  s17 = [];
                                  s18 = peg$currPos;
                                  s19 = [];
                                  s20 = peg$parseblankSpace();
                                  while (s20 !== peg$FAILED) {
                                    s19.push(s20);
                                    s20 = peg$parseblankSpace();
                                  }
                                  if (s19 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 59) {
                                      s20 = peg$c11;
                                      peg$currPos++;
                                    } else {
                                      s20 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                    }
                                    if (s20 !== peg$FAILED) {
                                      s21 = [];
                                      s22 = peg$parseblankSpace();
                                      while (s22 !== peg$FAILED) {
                                        s21.push(s22);
                                        s22 = peg$parseblankSpace();
                                      }
                                      if (s21 !== peg$FAILED) {
                                        s22 = peg$parsesingleLineIfBlockElements();
                                        if (s22 !== peg$FAILED) {
                                          s19 = [s19, s20, s21, s22];
                                          s18 = s19;
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                  while (s18 !== peg$FAILED) {
                                    s17.push(s18);
                                    s18 = peg$currPos;
                                    s19 = [];
                                    s20 = peg$parseblankSpace();
                                    while (s20 !== peg$FAILED) {
                                      s19.push(s20);
                                      s20 = peg$parseblankSpace();
                                    }
                                    if (s19 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 59) {
                                        s20 = peg$c11;
                                        peg$currPos++;
                                      } else {
                                        s20 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                      }
                                      if (s20 !== peg$FAILED) {
                                        s21 = [];
                                        s22 = peg$parseblankSpace();
                                        while (s22 !== peg$FAILED) {
                                          s21.push(s22);
                                          s22 = peg$parseblankSpace();
                                        }
                                        if (s21 !== peg$FAILED) {
                                          s22 = peg$parsesingleLineIfBlockElements();
                                          if (s22 !== peg$FAILED) {
                                            s19 = [s19, s20, s21, s22];
                                            s18 = s19;
                                          } else {
                                            peg$currPos = s18;
                                            s18 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                  }
                                  if (s17 !== peg$FAILED) {
                                    s11 = [s11, s12, s13, s14, s15, s16, s17];
                                    s10 = s11;
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s1 = peg$c0;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselogicalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parserelationalExpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parseexpressions();
              if (s3 === peg$FAILED) {
                s3 = peg$parsenumbers();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsestrings();
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsescopeColonNotation();
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c2) {
                  s5 = peg$c2;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s5 = peg$c4;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsesingleLineIfBlockElements();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$currPos;
                    s10 = [];
                    s11 = peg$parseblankSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseblankSpace();
                    }
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s11 = peg$c11;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = [];
                        s13 = peg$parseblankSpace();
                        while (s13 !== peg$FAILED) {
                          s12.push(s13);
                          s13 = peg$parseblankSpace();
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsesingleLineIfBlockElements();
                          if (s13 !== peg$FAILED) {
                            s10 = [s10, s11, s12, s13];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$currPos;
                      s10 = [];
                      s11 = peg$parseblankSpace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parseblankSpace();
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s11 = peg$c11;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c12); }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = [];
                          s13 = peg$parseblankSpace();
                          while (s13 !== peg$FAILED) {
                            s12.push(s13);
                            s13 = peg$parseblankSpace();
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsesingleLineIfBlockElements();
                            if (s13 !== peg$FAILED) {
                              s10 = [s10, s11, s12, s13];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenewLine();
                      if (s9 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c9) {
                          s10 = peg$c9;
                          peg$currPos += 4;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c10); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parseblankSpace();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseblankSpace();
                          }
                          if (s11 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c2) {
                              s12 = peg$c2;
                              peg$currPos += 2;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c3); }
                            }
                            if (s12 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s12 = peg$c4;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = [];
                              s14 = peg$parseblankSpace();
                              while (s14 !== peg$FAILED) {
                                s13.push(s14);
                                s14 = peg$parseblankSpace();
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsesingleLineIfBlockElements();
                                if (s14 !== peg$FAILED) {
                                  s15 = [];
                                  s16 = peg$currPos;
                                  s17 = [];
                                  s18 = peg$parseblankSpace();
                                  while (s18 !== peg$FAILED) {
                                    s17.push(s18);
                                    s18 = peg$parseblankSpace();
                                  }
                                  if (s17 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 59) {
                                      s18 = peg$c11;
                                      peg$currPos++;
                                    } else {
                                      s18 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                    }
                                    if (s18 !== peg$FAILED) {
                                      s19 = [];
                                      s20 = peg$parseblankSpace();
                                      while (s20 !== peg$FAILED) {
                                        s19.push(s20);
                                        s20 = peg$parseblankSpace();
                                      }
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parsesingleLineIfBlockElements();
                                        if (s20 !== peg$FAILED) {
                                          s17 = [s17, s18, s19, s20];
                                          s16 = s17;
                                        } else {
                                          peg$currPos = s16;
                                          s16 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s16;
                                    s16 = peg$FAILED;
                                  }
                                  while (s16 !== peg$FAILED) {
                                    s15.push(s16);
                                    s16 = peg$currPos;
                                    s17 = [];
                                    s18 = peg$parseblankSpace();
                                    while (s18 !== peg$FAILED) {
                                      s17.push(s18);
                                      s18 = peg$parseblankSpace();
                                    }
                                    if (s17 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 59) {
                                        s18 = peg$c11;
                                        peg$currPos++;
                                      } else {
                                        s18 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s19 = [];
                                        s20 = peg$parseblankSpace();
                                        while (s20 !== peg$FAILED) {
                                          s19.push(s20);
                                          s20 = peg$parseblankSpace();
                                        }
                                        if (s19 !== peg$FAILED) {
                                          s20 = peg$parsesingleLineIfBlockElements();
                                          if (s20 !== peg$FAILED) {
                                            s17 = [s17, s18, s19, s20];
                                            s16 = s17;
                                          } else {
                                            peg$currPos = s16;
                                            s16 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s16;
                                          s16 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$FAILED;
                                    }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c0) {
          s1 = peg$c0;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c1); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parselogicalExpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parserelationalExpressions();
              if (s3 === peg$FAILED) {
                s3 = peg$parseexpressions();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsenumbers();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsestrings();
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseblankSpace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsescopeColonNotation();
                if (s5 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c2) {
                    s5 = peg$c2;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c3); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s5 = peg$c4;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseblankSpace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsesingleLineIfBlockElements();
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$currPos;
                      s10 = [];
                      s11 = peg$parseblankSpace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parseblankSpace();
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s11 = peg$c11;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c12); }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = [];
                          s13 = peg$parseblankSpace();
                          while (s13 !== peg$FAILED) {
                            s12.push(s13);
                            s13 = peg$parseblankSpace();
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsesingleLineIfBlockElements();
                            if (s13 !== peg$FAILED) {
                              s10 = [s10, s11, s12, s13];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$currPos;
                        s10 = [];
                        s11 = peg$parseblankSpace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseblankSpace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s11 = peg$c11;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c12); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseblankSpace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseblankSpace();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsesingleLineIfBlockElements();
                              if (s13 !== peg$FAILED) {
                                s10 = [s10, s11, s12, s13];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s9 = peg$c11;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c12); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = [];
                          s11 = peg$parseblankSpace();
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$parseblankSpace();
                          }
                          if (s10 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c7) {
                              s11 = peg$c7;
                              peg$currPos += 4;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c8); }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = [];
                              s13 = peg$parseblankSpace();
                              if (s13 !== peg$FAILED) {
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parseblankSpace();
                                }
                              } else {
                                s12 = peg$FAILED;
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parselogicalExpressions();
                                if (s13 === peg$FAILED) {
                                  s13 = peg$parserelationalExpressions();
                                  if (s13 === peg$FAILED) {
                                    s13 = peg$parseexpressions();
                                    if (s13 === peg$FAILED) {
                                      s13 = peg$parsenumbers();
                                      if (s13 === peg$FAILED) {
                                        s13 = peg$parsestrings();
                                      }
                                    }
                                  }
                                }
                                if (s13 !== peg$FAILED) {
                                  s14 = [];
                                  s15 = peg$parseblankSpace();
                                  while (s15 !== peg$FAILED) {
                                    s14.push(s15);
                                    s15 = peg$parseblankSpace();
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parsescopeColonNotation();
                                    if (s15 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c2) {
                                        s15 = peg$c2;
                                        peg$currPos += 2;
                                      } else {
                                        s15 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                      }
                                      if (s15 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 58) {
                                          s15 = peg$c4;
                                          peg$currPos++;
                                        } else {
                                          s15 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                        }
                                      }
                                    }
                                    if (s15 !== peg$FAILED) {
                                      s16 = [];
                                      s17 = peg$parseblankSpace();
                                      while (s17 !== peg$FAILED) {
                                        s16.push(s17);
                                        s17 = peg$parseblankSpace();
                                      }
                                      if (s16 !== peg$FAILED) {
                                        s17 = peg$parsesingleLineIfBlockElements();
                                        if (s17 !== peg$FAILED) {
                                          s18 = [];
                                          s19 = peg$currPos;
                                          s20 = [];
                                          s21 = peg$parseblankSpace();
                                          while (s21 !== peg$FAILED) {
                                            s20.push(s21);
                                            s21 = peg$parseblankSpace();
                                          }
                                          if (s20 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 59) {
                                              s21 = peg$c11;
                                              peg$currPos++;
                                            } else {
                                              s21 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                            }
                                            if (s21 !== peg$FAILED) {
                                              s22 = [];
                                              s23 = peg$parseblankSpace();
                                              while (s23 !== peg$FAILED) {
                                                s22.push(s23);
                                                s23 = peg$parseblankSpace();
                                              }
                                              if (s22 !== peg$FAILED) {
                                                s23 = peg$parsesingleLineIfBlockElements();
                                                if (s23 !== peg$FAILED) {
                                                  s20 = [s20, s21, s22, s23];
                                                  s19 = s20;
                                                } else {
                                                  peg$currPos = s19;
                                                  s19 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s19;
                                                s19 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s19;
                                              s19 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s19;
                                            s19 = peg$FAILED;
                                          }
                                          while (s19 !== peg$FAILED) {
                                            s18.push(s19);
                                            s19 = peg$currPos;
                                            s20 = [];
                                            s21 = peg$parseblankSpace();
                                            while (s21 !== peg$FAILED) {
                                              s20.push(s21);
                                              s21 = peg$parseblankSpace();
                                            }
                                            if (s20 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 59) {
                                                s21 = peg$c11;
                                                peg$currPos++;
                                              } else {
                                                s21 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                              }
                                              if (s21 !== peg$FAILED) {
                                                s22 = [];
                                                s23 = peg$parseblankSpace();
                                                while (s23 !== peg$FAILED) {
                                                  s22.push(s23);
                                                  s23 = peg$parseblankSpace();
                                                }
                                                if (s22 !== peg$FAILED) {
                                                  s23 = peg$parsesingleLineIfBlockElements();
                                                  if (s23 !== peg$FAILED) {
                                                    s20 = [s20, s21, s22, s23];
                                                    s19 = s20;
                                                  } else {
                                                    peg$currPos = s19;
                                                    s19 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s19;
                                                  s19 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s19;
                                                s19 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s19;
                                              s19 = peg$FAILED;
                                            }
                                          }
                                          if (s18 !== peg$FAILED) {
                                            s19 = peg$currPos;
                                            s20 = [];
                                            s21 = peg$parseblankSpace();
                                            while (s21 !== peg$FAILED) {
                                              s20.push(s21);
                                              s21 = peg$parseblankSpace();
                                            }
                                            if (s20 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 59) {
                                                s21 = peg$c11;
                                                peg$currPos++;
                                              } else {
                                                s21 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                              }
                                              if (s21 !== peg$FAILED) {
                                                s22 = [];
                                                s23 = peg$parseblankSpace();
                                                while (s23 !== peg$FAILED) {
                                                  s22.push(s23);
                                                  s23 = peg$parseblankSpace();
                                                }
                                                if (s22 !== peg$FAILED) {
                                                  if (input.substr(peg$currPos, 4) === peg$c9) {
                                                    s23 = peg$c9;
                                                    peg$currPos += 4;
                                                  } else {
                                                    s23 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
                                                  }
                                                  if (s23 !== peg$FAILED) {
                                                    s24 = [];
                                                    s25 = peg$parseblankSpace();
                                                    while (s25 !== peg$FAILED) {
                                                      s24.push(s25);
                                                      s25 = peg$parseblankSpace();
                                                    }
                                                    if (s24 !== peg$FAILED) {
                                                      s25 = peg$parsescopeColonNotation();
                                                      if (s25 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c2) {
                                                          s25 = peg$c2;
                                                          peg$currPos += 2;
                                                        } else {
                                                          s25 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                                        }
                                                        if (s25 === peg$FAILED) {
                                                          if (input.charCodeAt(peg$currPos) === 58) {
                                                            s25 = peg$c4;
                                                            peg$currPos++;
                                                          } else {
                                                            s25 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                                          }
                                                        }
                                                      }
                                                      if (s25 !== peg$FAILED) {
                                                        s26 = [];
                                                        s27 = peg$parseblankSpace();
                                                        while (s27 !== peg$FAILED) {
                                                          s26.push(s27);
                                                          s27 = peg$parseblankSpace();
                                                        }
                                                        if (s26 !== peg$FAILED) {
                                                          s27 = peg$parsesingleLineIfBlockElements();
                                                          if (s27 !== peg$FAILED) {
                                                            s28 = [];
                                                            s29 = peg$currPos;
                                                            s30 = [];
                                                            s31 = peg$parseblankSpace();
                                                            while (s31 !== peg$FAILED) {
                                                              s30.push(s31);
                                                              s31 = peg$parseblankSpace();
                                                            }
                                                            if (s30 !== peg$FAILED) {
                                                              if (input.charCodeAt(peg$currPos) === 59) {
                                                                s31 = peg$c11;
                                                                peg$currPos++;
                                                              } else {
                                                                s31 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                                              }
                                                              if (s31 !== peg$FAILED) {
                                                                s32 = [];
                                                                s33 = peg$parseblankSpace();
                                                                while (s33 !== peg$FAILED) {
                                                                  s32.push(s33);
                                                                  s33 = peg$parseblankSpace();
                                                                }
                                                                if (s32 !== peg$FAILED) {
                                                                  s33 = peg$parsesingleLineIfBlockElements();
                                                                  if (s33 !== peg$FAILED) {
                                                                    s30 = [s30, s31, s32, s33];
                                                                    s29 = s30;
                                                                  } else {
                                                                    peg$currPos = s29;
                                                                    s29 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s29;
                                                                  s29 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s29;
                                                                s29 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s29;
                                                              s29 = peg$FAILED;
                                                            }
                                                            while (s29 !== peg$FAILED) {
                                                              s28.push(s29);
                                                              s29 = peg$currPos;
                                                              s30 = [];
                                                              s31 = peg$parseblankSpace();
                                                              while (s31 !== peg$FAILED) {
                                                                s30.push(s31);
                                                                s31 = peg$parseblankSpace();
                                                              }
                                                              if (s30 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 59) {
                                                                  s31 = peg$c11;
                                                                  peg$currPos++;
                                                                } else {
                                                                  s31 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                                                }
                                                                if (s31 !== peg$FAILED) {
                                                                  s32 = [];
                                                                  s33 = peg$parseblankSpace();
                                                                  while (s33 !== peg$FAILED) {
                                                                    s32.push(s33);
                                                                    s33 = peg$parseblankSpace();
                                                                  }
                                                                  if (s32 !== peg$FAILED) {
                                                                    s33 = peg$parsesingleLineIfBlockElements();
                                                                    if (s33 !== peg$FAILED) {
                                                                      s30 = [s30, s31, s32, s33];
                                                                      s29 = s30;
                                                                    } else {
                                                                      peg$currPos = s29;
                                                                      s29 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s29;
                                                                    s29 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s29;
                                                                  s29 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s29;
                                                                s29 = peg$FAILED;
                                                              }
                                                            }
                                                            if (s28 !== peg$FAILED) {
                                                              s20 = [s20, s21, s22, s23, s24, s25, s26, s27, s28];
                                                              s19 = s20;
                                                            } else {
                                                              peg$currPos = s19;
                                                              s19 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s19;
                                                            s19 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s19;
                                                          s19 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s19;
                                                        s19 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s19;
                                                      s19 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s19;
                                                    s19 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s19;
                                                  s19 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s19;
                                                s19 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s19;
                                              s19 = peg$FAILED;
                                            }
                                            if (s19 === peg$FAILED) {
                                              s19 = null;
                                            }
                                            if (s19 !== peg$FAILED) {
                                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c0) {
            s1 = peg$c0;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseblankSpace();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseblankSpace();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parselogicalExpressions();
              if (s3 === peg$FAILED) {
                s3 = peg$parserelationalExpressions();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseexpressions();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsenumbers();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsestrings();
                    }
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseblankSpace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c2) {
                    s5 = peg$c2;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c3); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s5 = peg$c4;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseblankSpace();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseblankSpace();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsesingleLineIfBlockElements();
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$currPos;
                        s10 = [];
                        s11 = peg$parseblankSpace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseblankSpace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s11 = peg$c11;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c12); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseblankSpace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseblankSpace();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsesingleLineIfBlockElements();
                              if (s13 !== peg$FAILED) {
                                s10 = [s10, s11, s12, s13];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$currPos;
                          s10 = [];
                          s11 = peg$parseblankSpace();
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$parseblankSpace();
                          }
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s11 = peg$c11;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c12); }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = [];
                              s13 = peg$parseblankSpace();
                              while (s13 !== peg$FAILED) {
                                s12.push(s13);
                                s13 = peg$parseblankSpace();
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parsesingleLineIfBlockElements();
                                if (s13 !== peg$FAILED) {
                                  s10 = [s10, s11, s12, s13];
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        }
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s9 = peg$c11;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c12); }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = [];
                            s11 = peg$parseblankSpace();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parseblankSpace();
                            }
                            if (s10 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c9) {
                                s11 = peg$c9;
                                peg$currPos += 4;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c10); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = [];
                                s13 = peg$parseblankSpace();
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parseblankSpace();
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsescopeColonNotation();
                                  if (s13 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c2) {
                                      s13 = peg$c2;
                                      peg$currPos += 2;
                                    } else {
                                      s13 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                    }
                                    if (s13 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 58) {
                                        s13 = peg$c4;
                                        peg$currPos++;
                                      } else {
                                        s13 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                      }
                                    }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s14 = [];
                                    s15 = peg$parseblankSpace();
                                    while (s15 !== peg$FAILED) {
                                      s14.push(s15);
                                      s15 = peg$parseblankSpace();
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parsesingleLineIfBlockElements();
                                      if (s15 !== peg$FAILED) {
                                        s16 = [];
                                        s17 = peg$currPos;
                                        s18 = [];
                                        s19 = peg$parseblankSpace();
                                        while (s19 !== peg$FAILED) {
                                          s18.push(s19);
                                          s19 = peg$parseblankSpace();
                                        }
                                        if (s18 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 59) {
                                            s19 = peg$c11;
                                            peg$currPos++;
                                          } else {
                                            s19 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                          }
                                          if (s19 !== peg$FAILED) {
                                            s20 = [];
                                            s21 = peg$parseblankSpace();
                                            while (s21 !== peg$FAILED) {
                                              s20.push(s21);
                                              s21 = peg$parseblankSpace();
                                            }
                                            if (s20 !== peg$FAILED) {
                                              s21 = peg$parsesingleLineIfBlockElements();
                                              if (s21 !== peg$FAILED) {
                                                s18 = [s18, s19, s20, s21];
                                                s17 = s18;
                                              } else {
                                                peg$currPos = s17;
                                                s17 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s17;
                                              s17 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s17;
                                            s17 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s17;
                                          s17 = peg$FAILED;
                                        }
                                        while (s17 !== peg$FAILED) {
                                          s16.push(s17);
                                          s17 = peg$currPos;
                                          s18 = [];
                                          s19 = peg$parseblankSpace();
                                          while (s19 !== peg$FAILED) {
                                            s18.push(s19);
                                            s19 = peg$parseblankSpace();
                                          }
                                          if (s18 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 59) {
                                              s19 = peg$c11;
                                              peg$currPos++;
                                            } else {
                                              s19 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                            }
                                            if (s19 !== peg$FAILED) {
                                              s20 = [];
                                              s21 = peg$parseblankSpace();
                                              while (s21 !== peg$FAILED) {
                                                s20.push(s21);
                                                s21 = peg$parseblankSpace();
                                              }
                                              if (s20 !== peg$FAILED) {
                                                s21 = peg$parsesingleLineIfBlockElements();
                                                if (s21 !== peg$FAILED) {
                                                  s18 = [s18, s19, s20, s21];
                                                  s17 = s18;
                                                } else {
                                                  peg$currPos = s17;
                                                  s17 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s17;
                                                s17 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s17;
                                              s17 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s17;
                                            s17 = peg$FAILED;
                                          }
                                        }
                                        if (s16 !== peg$FAILED) {
                                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c0) {
              s1 = peg$c0;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseblankSpace();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseblankSpace();
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parselogicalExpressions();
                if (s3 === peg$FAILED) {
                  s3 = peg$parserelationalExpressions();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseexpressions();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsenumbers();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsestrings();
                      }
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseblankSpace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseblankSpace();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsescopeColonNotation();
                    if (s5 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c2) {
                        s5 = peg$c2;
                        peg$currPos += 2;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                      }
                      if (s5 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s5 = peg$c4;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parseblankSpace();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseblankSpace();
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsesingleLineIfBlockElements();
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = peg$currPos;
                          s10 = [];
                          s11 = peg$parseblankSpace();
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$parseblankSpace();
                          }
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s11 = peg$c11;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c12); }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = [];
                              s13 = peg$parseblankSpace();
                              while (s13 !== peg$FAILED) {
                                s12.push(s13);
                                s13 = peg$parseblankSpace();
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parsesingleLineIfBlockElements();
                                if (s13 !== peg$FAILED) {
                                  s10 = [s10, s11, s12, s13];
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$currPos;
                            s10 = [];
                            s11 = peg$parseblankSpace();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parseblankSpace();
                            }
                            if (s10 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 59) {
                                s11 = peg$c11;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = [];
                                s13 = peg$parseblankSpace();
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parseblankSpace();
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsesingleLineIfBlockElements();
                                  if (s13 !== peg$FAILED) {
                                    s10 = [s10, s11, s12, s13];
                                    s9 = s10;
                                  } else {
                                    peg$currPos = s9;
                                    s9 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          }
                          if (s8 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                              s9 = peg$c11;
                              peg$currPos++;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c12); }
                            }
                            if (s9 !== peg$FAILED) {
                              s10 = [];
                              s11 = peg$parseblankSpace();
                              while (s11 !== peg$FAILED) {
                                s10.push(s11);
                                s11 = peg$parseblankSpace();
                              }
                              if (s10 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c7) {
                                  s11 = peg$c7;
                                  peg$currPos += 4;
                                } else {
                                  s11 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c8); }
                                }
                                if (s11 !== peg$FAILED) {
                                  s12 = [];
                                  s13 = peg$parseblankSpace();
                                  if (s13 !== peg$FAILED) {
                                    while (s13 !== peg$FAILED) {
                                      s12.push(s13);
                                      s13 = peg$parseblankSpace();
                                    }
                                  } else {
                                    s12 = peg$FAILED;
                                  }
                                  if (s12 !== peg$FAILED) {
                                    s13 = peg$parselogicalExpressions();
                                    if (s13 === peg$FAILED) {
                                      s13 = peg$parserelationalExpressions();
                                      if (s13 === peg$FAILED) {
                                        s13 = peg$parseexpressions();
                                        if (s13 === peg$FAILED) {
                                          s13 = peg$parsenumbers();
                                          if (s13 === peg$FAILED) {
                                            s13 = peg$parsestrings();
                                          }
                                        }
                                      }
                                    }
                                    if (s13 !== peg$FAILED) {
                                      s14 = [];
                                      s15 = peg$parseblankSpace();
                                      while (s15 !== peg$FAILED) {
                                        s14.push(s15);
                                        s15 = peg$parseblankSpace();
                                      }
                                      if (s14 !== peg$FAILED) {
                                        s15 = peg$parsescopeColonNotation();
                                        if (s15 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c2) {
                                            s15 = peg$c2;
                                            peg$currPos += 2;
                                          } else {
                                            s15 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                          }
                                          if (s15 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 58) {
                                              s15 = peg$c4;
                                              peg$currPos++;
                                            } else {
                                              s15 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                            }
                                          }
                                        }
                                        if (s15 !== peg$FAILED) {
                                          s16 = [];
                                          s17 = peg$parseblankSpace();
                                          while (s17 !== peg$FAILED) {
                                            s16.push(s17);
                                            s17 = peg$parseblankSpace();
                                          }
                                          if (s16 !== peg$FAILED) {
                                            s17 = peg$parsesingleLineIfBlockElements();
                                            if (s17 !== peg$FAILED) {
                                              s18 = [];
                                              s19 = peg$currPos;
                                              s20 = [];
                                              s21 = peg$parseblankSpace();
                                              while (s21 !== peg$FAILED) {
                                                s20.push(s21);
                                                s21 = peg$parseblankSpace();
                                              }
                                              if (s20 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 59) {
                                                  s21 = peg$c11;
                                                  peg$currPos++;
                                                } else {
                                                  s21 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                                }
                                                if (s21 !== peg$FAILED) {
                                                  s22 = [];
                                                  s23 = peg$parseblankSpace();
                                                  while (s23 !== peg$FAILED) {
                                                    s22.push(s23);
                                                    s23 = peg$parseblankSpace();
                                                  }
                                                  if (s22 !== peg$FAILED) {
                                                    s23 = peg$parsesingleLineIfBlockElements();
                                                    if (s23 !== peg$FAILED) {
                                                      s20 = [s20, s21, s22, s23];
                                                      s19 = s20;
                                                    } else {
                                                      peg$currPos = s19;
                                                      s19 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s19;
                                                    s19 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s19;
                                                  s19 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s19;
                                                s19 = peg$FAILED;
                                              }
                                              while (s19 !== peg$FAILED) {
                                                s18.push(s19);
                                                s19 = peg$currPos;
                                                s20 = [];
                                                s21 = peg$parseblankSpace();
                                                while (s21 !== peg$FAILED) {
                                                  s20.push(s21);
                                                  s21 = peg$parseblankSpace();
                                                }
                                                if (s20 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 59) {
                                                    s21 = peg$c11;
                                                    peg$currPos++;
                                                  } else {
                                                    s21 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                                  }
                                                  if (s21 !== peg$FAILED) {
                                                    s22 = [];
                                                    s23 = peg$parseblankSpace();
                                                    while (s23 !== peg$FAILED) {
                                                      s22.push(s23);
                                                      s23 = peg$parseblankSpace();
                                                    }
                                                    if (s22 !== peg$FAILED) {
                                                      s23 = peg$parsesingleLineIfBlockElements();
                                                      if (s23 !== peg$FAILED) {
                                                        s20 = [s20, s21, s22, s23];
                                                        s19 = s20;
                                                      } else {
                                                        peg$currPos = s19;
                                                        s19 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s19;
                                                      s19 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s19;
                                                    s19 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s19;
                                                  s19 = peg$FAILED;
                                                }
                                              }
                                              if (s18 !== peg$FAILED) {
                                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c0) {
                s1 = peg$c0;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c1); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblankSpace();
                if (s3 !== peg$FAILED) {
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblankSpace();
                  }
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parselogicalExpressions();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parserelationalExpressions();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseexpressions();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsenumbers();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsestrings();
                        }
                      }
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parseblankSpace();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parseblankSpace();
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsescopeColonNotation();
                      if (s5 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c2) {
                          s5 = peg$c2;
                          peg$currPos += 2;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c3); }
                        }
                        if (s5 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s5 = peg$c4;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                        }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parseblankSpace();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parseblankSpace();
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parsesingleLineIfBlockElements();
                          if (s7 !== peg$FAILED) {
                            s8 = [];
                            s9 = peg$currPos;
                            s10 = [];
                            s11 = peg$parseblankSpace();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parseblankSpace();
                            }
                            if (s10 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 59) {
                                s11 = peg$c11;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = [];
                                s13 = peg$parseblankSpace();
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parseblankSpace();
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsesingleLineIfBlockElements();
                                  if (s13 !== peg$FAILED) {
                                    s10 = [s10, s11, s12, s13];
                                    s9 = s10;
                                  } else {
                                    peg$currPos = s9;
                                    s9 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                            while (s9 !== peg$FAILED) {
                              s8.push(s9);
                              s9 = peg$currPos;
                              s10 = [];
                              s11 = peg$parseblankSpace();
                              while (s11 !== peg$FAILED) {
                                s10.push(s11);
                                s11 = peg$parseblankSpace();
                              }
                              if (s10 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                  s11 = peg$c11;
                                  peg$currPos++;
                                } else {
                                  s11 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                                }
                                if (s11 !== peg$FAILED) {
                                  s12 = [];
                                  s13 = peg$parseblankSpace();
                                  while (s13 !== peg$FAILED) {
                                    s12.push(s13);
                                    s13 = peg$parseblankSpace();
                                  }
                                  if (s12 !== peg$FAILED) {
                                    s13 = peg$parsesingleLineIfBlockElements();
                                    if (s13 !== peg$FAILED) {
                                      s10 = [s10, s11, s12, s13];
                                      s9 = s10;
                                    } else {
                                      peg$currPos = s9;
                                      s9 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s9;
                                    s9 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            }
                            if (s8 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesingleLineIfBlockElements() {
    var s0;

    s0 = peg$parseputs();
    if (s0 === peg$FAILED) {
      s0 = peg$parsereturnStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpressionAssignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegoto();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebitSelectionAssignment();
            if (s0 === peg$FAILED) {
              s0 = peg$parseassignmentStatement();
              if (s0 === peg$FAILED) {
                s0 = peg$parsefunctionCall();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseforLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseforLoopIndexNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleArrayNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parsetupleDotNotation();
            if (s3 === peg$FAILED) {
              s3 = peg$parsestrings();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsescopeColonNotation();
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c2) {
                s5 = peg$c2;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s5 = peg$c4;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCA();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseCN();
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseCN();
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = peg$parseindent();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseblocks();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsededent();
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseforLoopIndexNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parsestrings();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c4;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseblankSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseblankSpace();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parserangeNotation();
          if (s4 === peg$FAILED) {
            s4 = peg$parsesingleElementTupleNotation();
            if (s4 === peg$FAILED) {
              s4 = peg$parsetupleArrayIndex();
              if (s4 === peg$FAILED) {
                s4 = peg$parsetupleArrayNotation();
                if (s4 === peg$FAILED) {
                  s4 = peg$parsetupleDotNotation();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parsestrings();
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parseblankSpace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseblankSpace();
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c15;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parseblankSpace();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseblankSpace();
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsestrings();
                  if (s10 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s11 = peg$c4;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = [];
                      s13 = peg$parseblankSpace();
                      while (s13 !== peg$FAILED) {
                        s12.push(s13);
                        s13 = peg$parseblankSpace();
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parserangeNotation();
                        if (s13 === peg$FAILED) {
                          s13 = peg$parsesingleElementTupleNotation();
                          if (s13 === peg$FAILED) {
                            s13 = peg$parsetupleArrayIndex();
                            if (s13 === peg$FAILED) {
                              s13 = peg$parsetupleArrayNotation();
                              if (s13 === peg$FAILED) {
                                s13 = peg$parsetupleDotNotation();
                                if (s13 === peg$FAILED) {
                                  s13 = peg$parsestrings();
                                }
                              }
                            }
                          }
                        }
                        if (s13 !== peg$FAILED) {
                          s7 = [s7, s8, s9, s10, s11, s12, s13];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parseblankSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseblankSpace();
              }
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c15;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseblankSpace();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parseblankSpace();
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsestrings();
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s11 = peg$c4;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = [];
                        s13 = peg$parseblankSpace();
                        while (s13 !== peg$FAILED) {
                          s12.push(s13);
                          s13 = peg$parseblankSpace();
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parserangeNotation();
                          if (s13 === peg$FAILED) {
                            s13 = peg$parsesingleElementTupleNotation();
                            if (s13 === peg$FAILED) {
                              s13 = peg$parsetupleArrayIndex();
                              if (s13 === peg$FAILED) {
                                s13 = peg$parsetupleArrayNotation();
                                if (s13 === peg$FAILED) {
                                  s13 = peg$parsetupleDotNotation();
                                  if (s13 === peg$FAILED) {
                                    s13 = peg$parsestrings();
                                  }
                                }
                              }
                            }
                          }
                          if (s13 !== peg$FAILED) {
                            s7 = [s7, s8, s9, s10, s11, s12, s13];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsestrings();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c4;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseblankSpace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseblankSpace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseinteger();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsestrings();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c4;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c17;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenestedTuples();
            if (s3 === peg$FAILED) {
              s3 = peg$parsetupleStructure();
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c15;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseblankSpace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s10 = peg$c4;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseexpressions();
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s10 = peg$c19;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s12 = peg$c19;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s10 = peg$c21;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s12 = peg$c21;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsestrings();
                        }
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c15;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseblankSpace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parsestrings();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s10 = peg$c4;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseexpressions();
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s12 = peg$c19;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s10 = peg$c21;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsestrings();
                            if (s11 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s12 = peg$c21;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s12 !== peg$FAILED) {
                                s10 = [s10, s11, s12];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$parsestrings();
                          }
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c23;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsetryStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsescopeColonNotation();
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c2) {
            s3 = peg$c2;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c4;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCA();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseCN();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseCN();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseindent();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseblocks();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsededent();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecatchStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsescopeColonNotation();
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c2) {
            s3 = peg$c2;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c4;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCA();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseCN();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseCN();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseindent();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseblocks();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsededent();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedef() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$parsefunctionWithoutDef();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
          if (s1 === peg$FAILED) {
            s1 = peg$parseoverloadNotation();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c29) {
            s3 = peg$c29;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c31;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c33) {
                s3 = peg$c33;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c35) {
                  s3 = peg$c35;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c37) {
                    s3 = peg$c37;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c38); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c39) {
                      s3 = peg$c39;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c40); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c41) {
                        s3 = peg$c41;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c42); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c43) {
                          s3 = peg$c43;
                          peg$currPos += 2;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c44); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c45) {
                            s3 = peg$c45;
                            peg$currPos += 3;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c46); }
                          }
                          if (s3 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c47) {
                              s3 = peg$c47;
                              peg$currPos += 3;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c48); }
                            }
                            if (s3 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c49) {
                                s3 = peg$c49;
                                peg$currPos += 3;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c50); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsescopeColonNotation();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCA();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseCN();
                    if (s9 !== peg$FAILED) {
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseCN();
                      }
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parseindent();
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parsedefBlockElements();
                        if (s12 !== peg$FAILED) {
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parsedefBlockElements();
                          }
                        } else {
                          s11 = peg$FAILED;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsededent();
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c2) {
          s1 = peg$c2;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseCA();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseCN();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseCN();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseindent();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsedefBlockElements();
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parsedefBlockElements();
                    }
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsededent();
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsefunctionCallStatement();
          if (s1 === peg$FAILED) {
            s1 = peg$parsefunctionCall();
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseblankSpace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsescopeColonNotation();
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c2) {
                  s3 = peg$c2;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s3 = peg$c4;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseblankSpace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseCA();
                  if (s5 === peg$FAILED) {
                    s5 = null;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseCN();
                    if (s7 !== peg$FAILED) {
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseCN();
                      }
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$currPos;
                      s8 = peg$parseindent();
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parsedefBlockElements();
                        if (s10 !== peg$FAILED) {
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$parsedefBlockElements();
                          }
                        } else {
                          s9 = peg$FAILED;
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsededent();
                          if (s10 !== peg$FAILED) {
                            s8 = [s8, s9, s10];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedefBlockElements() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsesamedent();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseforLoop();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parsesamedent();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseforLoop();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsetryStatement();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsesamedent();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecatchStatement();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsesingleLineIfStatement();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOS();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseifStatement();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parsesamedent();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseelifStatement();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$parsesamedent();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseelifStatement();
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parsesamedent();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseelseStatement();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseifStatement();
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parsesamedent();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseelseStatement();
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsedef();
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseputs();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseEOS();
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsegoto();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseEOS();
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseinternalScope();
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parsereturnStatement();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseEOS();
                          if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseexpressionAssignment();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseEOS();
                            if (s4 !== peg$FAILED) {
                              s3 = [s3, s4];
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                          if (s2 === peg$FAILED) {
                            s2 = peg$currPos;
                            s3 = peg$parsecompileCheckStatement();
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseEOS();
                              if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parseassertionStatement();
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseEOS();
                                if (s4 !== peg$FAILED) {
                                  s3 = [s3, s4];
                                  s2 = s3;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 === peg$FAILED) {
                                s2 = peg$currPos;
                                s3 = peg$parseisExpressions();
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseEOS();
                                  if (s4 !== peg$FAILED) {
                                    s3 = [s3, s4];
                                    s2 = s3;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                                if (s2 === peg$FAILED) {
                                  s2 = peg$currPos;
                                  s3 = peg$parsebitSelectionAssignment();
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parseEOS();
                                    if (s4 !== peg$FAILED) {
                                      s3 = [s3, s4];
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$currPos;
                                    s3 = peg$parseassignmentStatement();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parseEOS();
                                      if (s4 !== peg$FAILED) {
                                        s3 = [s3, s4];
                                        s2 = s3;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                    if (s2 === peg$FAILED) {
                                      s2 = peg$currPos;
                                      s3 = peg$parsemultiLineExpression();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parseEOS();
                                        if (s4 !== peg$FAILED) {
                                          s3 = [s3, s4];
                                          s2 = s3;
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                      if (s2 === peg$FAILED) {
                                        s2 = peg$currPos;
                                        s3 = peg$parsetupleArithmeticExpression();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parseEOS();
                                          if (s4 !== peg$FAILED) {
                                            s3 = [s3, s4];
                                            s2 = s3;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$currPos;
                                          s3 = peg$parseprecedenceExpression();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parseEOS();
                                            if (s4 !== peg$FAILED) {
                                              s3 = [s3, s4];
                                              s2 = s3;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$FAILED;
                                          }
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$currPos;
                                            s3 = peg$parselogicalExpressions();
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parseEOS();
                                              if (s4 !== peg$FAILED) {
                                                s3 = [s3, s4];
                                                s2 = s3;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                            if (s2 === peg$FAILED) {
                                              s2 = peg$currPos;
                                              s3 = peg$parserelationalExpressions();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parseEOS();
                                                if (s4 !== peg$FAILED) {
                                                  s3 = [s3, s4];
                                                  s2 = s3;
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$FAILED;
                                              }
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$currPos;
                                                s3 = peg$parsestringExpressions();
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parseEOS();
                                                  if (s4 !== peg$FAILED) {
                                                    s3 = [s3, s4];
                                                    s2 = s3;
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s2;
                                                  s2 = peg$FAILED;
                                                }
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$currPos;
                                                  s3 = peg$parsefactor();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parseEOS();
                                                    if (s4 !== peg$FAILED) {
                                                      s3 = [s3, s4];
                                                      s2 = s3;
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$FAILED;
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    s2 = peg$currPos;
                                                    s3 = peg$parsefunctionCall();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parseEOS();
                                                      if (s4 !== peg$FAILED) {
                                                        s3 = [s3, s4];
                                                        s2 = s3;
                                                      } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s2;
                                                      s2 = peg$FAILED;
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      s2 = peg$currPos;
                                                      s3 = peg$parsenumbers();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parseEOS();
                                                        if (s4 !== peg$FAILED) {
                                                          s3 = [s3, s4];
                                                          s2 = s3;
                                                        } else {
                                                          peg$currPos = s2;
                                                          s2 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$FAILED;
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        s2 = peg$parsecomment();
                                                        if (s2 === peg$FAILED) {
                                                          s2 = peg$parseEOL();
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefunctionWithoutDef() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsestrings();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunctionCallNotation();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsescopeColonNotation();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseblankSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseblankSpace();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCA();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseCN();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseCN();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseindent();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parsedefBlockElements();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsedefBlockElements();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsededent();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinternalScope() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c4;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseinternalScopeElements();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c4;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s1 = peg$c4;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCA();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseCN();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseCN();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseindent();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsedefBlockElements();
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsedefBlockElements();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsededent();
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinternalScopeElements() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$parsewhen();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsestrings();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetupleDotNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s4 = peg$c19;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestrings();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s6 = peg$c19;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s4 = peg$c21;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsestrings();
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s6 = peg$c21;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s6 !== peg$FAILED) {
                      s4 = [s4, s5, s6];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parsestrings();
                }
              }
            }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c15;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseblankSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseblankSpace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parsestrings();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s10 = peg$c4;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetupleDotNotation();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parseexpressions();
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s10 = peg$c19;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s12 = peg$c19;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s10 = peg$c21;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s12 = peg$c21;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsestrings();
                        }
                      }
                    }
                  }
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c15;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseblankSpace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s10 = peg$c4;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsetupleDotNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parseexpressions();
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s12 = peg$c19;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s10 = peg$c21;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsestrings();
                            if (s11 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s12 = peg$c21;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s12 !== peg$FAILED) {
                                s10 = [s10, s11, s12];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$parsestrings();
                          }
                        }
                      }
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c23;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsescopeColonNotation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinternalScopeElements();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c4;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s0 = peg$c2;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s0 = peg$c4;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
      }
    }

    return s0;
  }

  function peg$parsereturnStatement() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c51) {
      s1 = peg$c51;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parserangeNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parselogicalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parserelationalExpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsestrings();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsefunctionCallNotation();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$parsesingleElementTupleNotation();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsetupleArrayIndex();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsetupleArrayNotation();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsetupleDotNotation();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseexpressions();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsestrings();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinitStatement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleDotNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleArrayNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestrings();
            if (s3 === peg$FAILED) {
              s3 = peg$parseoverloadNotation();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseassignmentStatement() {
    var s0;

    s0 = peg$parserangeAssignment();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefunctionCallStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetupleAssignment();
        if (s0 === peg$FAILED) {
          s0 = peg$parsevariableAssignment();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinitStatement();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefunctionCall() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsefunctionCallNotation();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c55;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetupleDotNotation();
      if (s2 === peg$FAILED) {
        s2 = peg$parsetupleArrayNotation();
        if (s2 === peg$FAILED) {
          s2 = peg$parsestrings();
          if (s2 === peg$FAILED) {
            s2 = peg$parseoverloadNotation();
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseblankSpace();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseblankSpace();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefunctionCallNotation();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c55;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsestrings();
            if (s7 === peg$FAILED) {
              s7 = peg$parseoverloadNotation();
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseblankSpace();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseblankSpace();
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsefunctionCallNotation();
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c55;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestrings();
              if (s7 === peg$FAILED) {
                s7 = peg$parseoverloadNotation();
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseblankSpace();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseblankSpace();
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsefunctionCallNotation();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefunctionCallNotation();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c55;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetupleDotNotation();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetupleArrayNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsestrings();
            if (s2 === peg$FAILED) {
              s2 = peg$parseoverloadNotation();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefunctionCallNotation();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c55;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestrings();
              if (s7 === peg$FAILED) {
                s7 = peg$parseoverloadNotation();
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseblankSpace();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseblankSpace();
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsefunctionCallNotation();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s6 = peg$c55;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestrings();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseoverloadNotation();
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseblankSpace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseblankSpace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsefunctionCallNotation();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefunctionCallNotation();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseoverloadNotation();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefunctionCallNotation();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parseoverloadNotation();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseblankSpace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsefunctionCallNotation();
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parseoverloadNotation();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseblankSpace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsefunctionCallNotation();
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsefunctionCallNotation();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseoverloadNotation();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parseblankSpace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsefunctionCallNotation();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$currPos;
                s6 = peg$parseoverloadNotation();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseblankSpace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsefunctionCallNotation();
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$parseoverloadNotation();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseblankSpace();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsefunctionCallNotation();
                      if (s8 !== peg$FAILED) {
                        s6 = [s6, s7, s8];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefunctionCallStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parsetupleDotNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebitSelectionNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c43) {
              s3 = peg$c43;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parsefunctionCallNotation();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s7 = peg$c55;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestrings();
              if (s6 === peg$FAILED) {
                s6 = peg$parseoverloadNotation();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = [];
                s9 = peg$parseblankSpace();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseblankSpace();
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsefunctionCallNotation();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s10 = peg$c55;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c56); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsestrings();
                    if (s11 === peg$FAILED) {
                      s11 = peg$parseoverloadNotation();
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = [];
                      s13 = peg$parseblankSpace();
                      while (s13 !== peg$FAILED) {
                        s12.push(s13);
                        s13 = peg$parseblankSpace();
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsefunctionCallNotation();
                        if (s13 !== peg$FAILED) {
                          s10 = [s10, s11, s12, s13];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s10 = peg$c55;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c56); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsestrings();
                      if (s11 === peg$FAILED) {
                        s11 = peg$parseoverloadNotation();
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = [];
                        s13 = peg$parseblankSpace();
                        while (s13 !== peg$FAILED) {
                          s12.push(s13);
                          s13 = peg$parseblankSpace();
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsefunctionCallNotation();
                          if (s13 !== peg$FAILED) {
                            s10 = [s10, s11, s12, s13];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefunctionCallNotation();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c55;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestrings();
        if (s2 === peg$FAILED) {
          s2 = peg$parseoverloadNotation();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefunctionCallNotation();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c55;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestrings();
              if (s7 === peg$FAILED) {
                s7 = peg$parseoverloadNotation();
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseblankSpace();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseblankSpace();
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsefunctionCallNotation();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s6 = peg$c55;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestrings();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseoverloadNotation();
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseblankSpace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseblankSpace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsefunctionCallNotation();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c57) {
                s5 = peg$c57;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c58); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetupleDotNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleArrayNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsebitSelectionNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsestrings();
                      }
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleArrayNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsebitSelectionNotation();
            if (s1 === peg$FAILED) {
              s1 = peg$parsestrings();
            }
          }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c33) {
              s3 = peg$c33;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c31;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c43) {
                  s3 = peg$c43;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseblankSpace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsefunctionCallNotation();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseoverloadNotation();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = [];
                    s9 = peg$parseblankSpace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseblankSpace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsefunctionCallNotation();
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$currPos;
                      s10 = peg$parseoverloadNotation();
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parseblankSpace();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parseblankSpace();
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsefunctionCallNotation();
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$currPos;
                        s10 = peg$parseoverloadNotation();
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parseblankSpace();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseblankSpace();
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsefunctionCallNotation();
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsefunctionCallNotation();
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseoverloadNotation();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parseblankSpace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsefunctionCallNotation();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$currPos;
                s6 = peg$parseoverloadNotation();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseblankSpace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsefunctionCallNotation();
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = peg$parseoverloadNotation();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseblankSpace();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsefunctionCallNotation();
                      if (s8 !== peg$FAILED) {
                        s6 = [s6, s7, s8];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c57) {
                    s5 = peg$c57;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c58); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseblankSpace();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseblankSpace();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsetupleDotNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsetupleArrayNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsebitSelectionNotation();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsestrings();
                          }
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefunctionCallNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parsestrings();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetupleArrayNotation();
        if (s4 === peg$FAILED) {
          s4 = peg$parsetupleDotNotation();
          if (s4 === peg$FAILED) {
            s4 = peg$parseexpressions();
            if (s4 === peg$FAILED) {
              s4 = peg$parsefactor();
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s5 = peg$c19;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsestrings();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s7 = peg$c19;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s5 = peg$c21;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsestrings();
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s7 = peg$c21;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseputs();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parsestrings();
                      if (s4 === peg$FAILED) {
                        s4 = peg$parsenumbers();
                        if (s4 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c2) {
                            s4 = peg$c2;
                            peg$currPos += 2;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c3); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                              s4 = peg$c4;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseblankSpace();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseblankSpace();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parsestrings();
          if (s7 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s8 = peg$c4;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetupleDotNotation();
            if (s7 === peg$FAILED) {
              s7 = peg$parseexpressions();
              if (s7 === peg$FAILED) {
                s7 = peg$parsefactor();
                if (s7 === peg$FAILED) {
                  s7 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s8 = peg$c19;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsestrings();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s10 = peg$c19;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s10 !== peg$FAILED) {
                        s8 = [s8, s9, s10];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s8 = peg$c21;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestrings();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s10 = peg$c21;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$parseputs();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsestrings();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsenumbers();
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c2) {
                              s7 = peg$c2;
                              peg$currPos += 2;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c3); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s7 = peg$c4;
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseblankSpace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseblankSpace();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parsestrings();
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s8 = peg$c4;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetupleDotNotation();
              if (s7 === peg$FAILED) {
                s7 = peg$parseexpressions();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsefactor();
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c19;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestrings();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s8 = peg$c21;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsestrings();
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s10 = peg$c21;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s10 !== peg$FAILED) {
                            s8 = [s8, s9, s10];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = peg$parseputs();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsestrings();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsenumbers();
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c2) {
                                s7 = peg$c2;
                                peg$currPos += 2;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c3); }
                              }
                              if (s7 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s7 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s7 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c23;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsestrings();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetupleDotNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s4 = peg$c19;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestrings();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s6 = peg$c19;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s4 = peg$c21;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsestrings();
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s6 = peg$c21;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s6 !== peg$FAILED) {
                      s4 = [s4, s5, s6];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parseputs();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsestrings();
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c2) {
                        s3 = peg$c2;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s3 = peg$c4;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c15;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseblankSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseblankSpace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parsestrings();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s10 = peg$c4;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetupleDotNotation();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parseexpressions();
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s10 = peg$c19;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s12 = peg$c19;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s10 = peg$c21;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s12 = peg$c21;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$parseputs();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parsestrings();
                            if (s9 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c2) {
                                s9 = peg$c2;
                                peg$currPos += 2;
                              } else {
                                s9 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c3); }
                              }
                              if (s9 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s9 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s9 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c15;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseblankSpace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s10 = peg$c4;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsetupleDotNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parseexpressions();
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s12 = peg$c19;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s10 = peg$c21;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsestrings();
                            if (s11 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s12 = peg$c21;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s12 !== peg$FAILED) {
                                s10 = [s10, s11, s12];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$parseputs();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parsestrings();
                              if (s9 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c2) {
                                  s9 = peg$c2;
                                  peg$currPos += 2;
                                } else {
                                  s9 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                }
                                if (s9 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s9 = peg$c4;
                                    peg$currPos++;
                                  } else {
                                    s9 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c23;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c59) {
            s2 = peg$c59;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c23;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseexpressionAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsetupleDotNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebitSelectionNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c35) {
              s3 = peg$c35;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c37) {
                s3 = peg$c37;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c39) {
                  s3 = peg$c39;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c41) {
                    s3 = peg$c41;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c43) {
                      s3 = peg$c43;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c44); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c45) {
                        s3 = peg$c45;
                        peg$currPos += 3;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c46); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c47) {
                          s3 = peg$c47;
                          peg$currPos += 3;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c48); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c49) {
                            s3 = peg$c49;
                            peg$currPos += 3;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c50); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$currPos;
            s7 = peg$parsestrings();
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s8 = peg$c4;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s8 = peg$c19;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsestrings();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s10 = peg$c19;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s8 = peg$c21;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s10 = peg$c21;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$parsemultiLineExpression();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parseexpressions();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parseprecedenceExpression();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parselogicalExpressions();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parserelationalExpressions();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsetupleDotNotation();
                            if (s7 === peg$FAILED) {
                              s7 = peg$parsetupleArrayNotation();
                              if (s7 === peg$FAILED) {
                                s7 = peg$parsefunctionCall();
                                if (s7 === peg$FAILED) {
                                  s7 = peg$parsenumbers();
                                  if (s7 === peg$FAILED) {
                                    s7 = peg$parsestrings();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parsestrings();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c4;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s4 = peg$c19;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsestrings();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s6 = peg$c19;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s4 = peg$c21;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestrings();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s6 = peg$c21;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parsemultiLineExpression();
            if (s3 === peg$FAILED) {
              s3 = peg$parseexpressions();
              if (s3 === peg$FAILED) {
                s3 = peg$parseprecedenceExpression();
                if (s3 === peg$FAILED) {
                  s3 = peg$parselogicalExpressions();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parserelationalExpressions();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsetupleDotNotation();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsetupleArrayNotation();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsefunctionCall();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parsenumbers();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parsestrings();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c57) {
            s3 = peg$c57;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetupleDotNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parsetupleArrayNotation();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsebitSelectionNotation();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsestrings();
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsevariableAssignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetupleDotNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebitSelectionNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c43) {
              s3 = peg$c43;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenumbers();
            if (s5 === peg$FAILED) {
              s5 = peg$parsestrings();
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenumbers();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c57) {
            s3 = peg$c57;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetupleDotNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parsetupleArrayNotation();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsebitSelectionNotation();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsestrings();
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseassertionStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 73) {
      s1 = peg$c61;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicalExpressions();
        if (s3 === peg$FAILED) {
          s3 = peg$parserelationalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parserangeExpressions();
              if (s3 === peg$FAILED) {
                s3 = peg$parseisExpressions();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsetrueFalse();
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseblankSpace();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseputsNotation();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecompileCheckStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 67) {
      s1 = peg$c63;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c4;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenewLine();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseindent();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parsesamedent();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseexpressionAssignment();
              if (s8 === peg$FAILED) {
                s8 = peg$parseassignmentStatement();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseassertionStatement();
                }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsenewLine();
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parsesamedent();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexpressionAssignment();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseassignmentStatement();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseassertionStatement();
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenewLine();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsededent();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestart();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseEOS();
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 67) {
        s1 = peg$c63;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsesingleLineIfStatement();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseEOS();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseifStatement();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parsesamedent();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseelifStatement();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parsesamedent();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseelifStatement();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsesamedent();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseelseStatement();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parseifStatement();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parsesamedent();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseelseStatement();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsesingleLineIfStatement();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseEOS();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parseifStatement();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$currPos;
                  s8 = peg$parsesamedent();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseelifStatement();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$currPos;
                      s8 = peg$parsesamedent();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseelifStatement();
                        if (s9 !== peg$FAILED) {
                          s8 = [s8, s9];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    }
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parsesamedent();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseelseStatement();
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parseifStatement();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parsesamedent();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseelseStatement();
                      if (s8 !== peg$FAILED) {
                        s7 = [s7, s8];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestart();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEOS();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 67) {
          s1 = peg$c63;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parselogicalExpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parserelationalExpressions();
              if (s3 === peg$FAILED) {
                s3 = peg$parseexpressions();
                if (s3 === peg$FAILED) {
                  s3 = peg$parserangeExpressions();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseisExpressions();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsetrueFalse();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseexpressionAssignment();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseassignmentStatement();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parseassertionStatement();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parsenegationStatement();
                              if (s3 === peg$FAILED) {
                                s3 = peg$parsestrings();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parseblankSpace();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseputsNotation();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsenegationStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c65;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicalExpressions();
        if (s3 === peg$FAILED) {
          s3 = peg$parserelationalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parseexpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parserangeExpressions();
              if (s3 === peg$FAILED) {
                s3 = peg$parseisExpressions();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsetrueFalse();
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseblankSpace();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseputsNotation();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegoto() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleDotNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleArrayNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestrings();
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhen() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselogicalExpressions();
        if (s3 === peg$FAILED) {
          s3 = peg$parserelationalExpressions();
          if (s3 === peg$FAILED) {
            s3 = peg$parseisExpressions();
            if (s3 === peg$FAILED) {
              s3 = peg$parsetrueFalse();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableNames() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsekeywords();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestrings() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsekeywords();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c71.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c74;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c76;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsekeywords();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c71.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c71.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 33) {
              s4 = peg$c78;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c76;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 37) {
            s3 = peg$c76;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 36) {
            s1 = peg$c74;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c75); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 36) {
              s3 = peg$c74;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c75); }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0;

    if (peg$c80.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }

    return s0;
  }

  function peg$parseaccessAllNotation() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c17;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s2 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c59) {
        s3 = peg$c59;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c23;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseimplicitVarAccess() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s3 = peg$c74;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s3 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s3 = peg$c76;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c82;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c55;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parsekeywords();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsestring();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsestring();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s7 = peg$c4;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s7 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6, s7];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c15;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseblankSpace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseblankSpace();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 36) {
              s8 = peg$c74;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c75); }
            }
            if (s8 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s8 = peg$c76;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c77); }
              }
              if (s8 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 38) {
                  s8 = peg$c82;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
              }
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            if (s8 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s9 = peg$c55;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$currPos;
                peg$silentFails++;
                s11 = peg$parsekeywords();
                peg$silentFails--;
                if (s11 === peg$FAILED) {
                  s10 = void 0;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$parsestring();
                  if (s12 !== peg$FAILED) {
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$parsestring();
                    }
                  } else {
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s12 = peg$c4;
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s12 !== peg$FAILED) {
                      s8 = [s8, s9, s10, s11, s12];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c15;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseblankSpace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 36) {
                s8 = peg$c74;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c75); }
              }
              if (s8 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 37) {
                  s8 = peg$c76;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c77); }
                }
                if (s8 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 38) {
                    s8 = peg$c82;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c83); }
                  }
                }
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s9 = peg$c55;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c56); }
                }
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$currPos;
                  peg$silentFails++;
                  s11 = peg$parsekeywords();
                  peg$silentFails--;
                  if (s11 === peg$FAILED) {
                    s10 = void 0;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    s12 = peg$parsestring();
                    if (s12 !== peg$FAILED) {
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parsestring();
                      }
                    } else {
                      s11 = peg$FAILED;
                    }
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s12 = peg$c4;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s12 !== peg$FAILED) {
                        s8 = [s8, s9, s10, s11, s12];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c23;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseblankSpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsestring();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsestring();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoverloadNotation() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c55;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsekeywords();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = [];
          s4 = peg$parseoperator();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseoperator();
            }
          } else {
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c55;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c55;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c55;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsekeywords();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c71.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c72); }
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c55;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s6 = peg$c55;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c56); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseoperator();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseoperator();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseoperator();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parsetupleOps();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsetupleOps();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseoperatorOverloadVar() {
    var s0;

    s0 = peg$parseoperator();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetupleOps();
    }

    return s0;
  }

  function peg$parsevariableMethods() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c86) {
        s0 = peg$c86;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c88) {
          s0 = peg$c88;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c89); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c90) {
            s0 = peg$c90;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c92) {
              s0 = peg$c92;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c94) {
                s0 = peg$c94;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c95); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c96) {
                  s0 = peg$c96;
                  peg$currPos += 11;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c97); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c98) {
                    s0 = peg$c98;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c99); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c100) {
                      s0 = peg$c100;
                      peg$currPos += 6;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c101); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c102) {
                        s0 = peg$c102;
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c103); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c104) {
                          s0 = peg$c104;
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c105); }
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseasDatatype();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepercentageNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c76;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c55;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsekeywords();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsestring();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsestring();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c76;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c106;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetupleArrayIndex();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c19;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parsekeywords();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsestring();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsestring();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s7 = peg$c19;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 39) {
                s4 = peg$c21;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$parsekeywords();
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsestring();
                  if (s7 !== peg$FAILED) {
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parsestring();
                    }
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s7 = peg$c21;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s7 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parsekeywords();
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = void 0;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parsestring();
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsestring();
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parseexpressions();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseinteger();
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c108;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s7 = peg$c106;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s9 = peg$c19;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$currPos;
                  peg$silentFails++;
                  s11 = peg$parsekeywords();
                  peg$silentFails--;
                  if (s11 === peg$FAILED) {
                    s10 = void 0;
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    s12 = peg$parsestring();
                    if (s12 !== peg$FAILED) {
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parsestring();
                      }
                    } else {
                      s11 = peg$FAILED;
                    }
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s12 = peg$c19;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s12 !== peg$FAILED) {
                        s9 = [s9, s10, s11, s12];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s9 = peg$c21;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    peg$silentFails++;
                    s11 = peg$parsekeywords();
                    peg$silentFails--;
                    if (s11 === peg$FAILED) {
                      s10 = void 0;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$parsestring();
                      if (s12 !== peg$FAILED) {
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parsestring();
                        }
                      } else {
                        s11 = peg$FAILED;
                      }
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s12 = peg$c21;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s12 !== peg$FAILED) {
                          s9 = [s9, s10, s11, s12];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$currPos;
                    peg$silentFails++;
                    s10 = peg$parsekeywords();
                    peg$silentFails--;
                    if (s10 === peg$FAILED) {
                      s9 = void 0;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parsestring();
                      if (s11 !== peg$FAILED) {
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsestring();
                        }
                      } else {
                        s10 = peg$FAILED;
                      }
                      if (s10 !== peg$FAILED) {
                        s9 = [s9, s10];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseexpressions();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseinteger();
                      }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s9 = peg$c108;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c109); }
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                  s7 = peg$c106;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c107); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s9 = peg$c19;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    peg$silentFails++;
                    s11 = peg$parsekeywords();
                    peg$silentFails--;
                    if (s11 === peg$FAILED) {
                      s10 = void 0;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$parsestring();
                      if (s12 !== peg$FAILED) {
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parsestring();
                        }
                      } else {
                        s11 = peg$FAILED;
                      }
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s12 = peg$c19;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s12 !== peg$FAILED) {
                          s9 = [s9, s10, s11, s12];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s9 = peg$c21;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      peg$silentFails++;
                      s11 = peg$parsekeywords();
                      peg$silentFails--;
                      if (s11 === peg$FAILED) {
                        s10 = void 0;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parsestring();
                        if (s12 !== peg$FAILED) {
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parsestring();
                          }
                        } else {
                          s11 = peg$FAILED;
                        }
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s12 = peg$c21;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s12 !== peg$FAILED) {
                            s9 = [s9, s10, s11, s12];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      s9 = peg$currPos;
                      peg$silentFails++;
                      s10 = peg$parsekeywords();
                      peg$silentFails--;
                      if (s10 === peg$FAILED) {
                        s9 = void 0;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsestring();
                        if (s11 !== peg$FAILED) {
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$parsestring();
                          }
                        } else {
                          s10 = peg$FAILED;
                        }
                        if (s10 !== peg$FAILED) {
                          s9 = [s9, s10];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseexpressions();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseinteger();
                        }
                      }
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s9 = peg$c108;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c109); }
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsekeywords() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsestring();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsestring();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c7) {
          s1 = peg$c7;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parsestring();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c29) {
            s1 = peg$c29;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parsestring();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = void 0;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c111) {
              s1 = peg$c111;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c112); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              s3 = peg$parsestring();
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = void 0;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c113) {
                s1 = peg$c113;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c114); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parsestring();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = void 0;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s1 = [s1, s2];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c13) {
                  s1 = peg$c13;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  peg$silentFails++;
                  s3 = peg$parsestring();
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = void 0;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c115) {
                    s1 = peg$c115;
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parsestring();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                      s2 = void 0;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 5) === peg$c117) {
                      s1 = peg$c117;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c118); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$currPos;
                      peg$silentFails++;
                      s3 = peg$parsestring();
                      peg$silentFails--;
                      if (s3 === peg$FAILED) {
                        s2 = void 0;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 9) === peg$c119) {
                        s1 = peg$c119;
                        peg$currPos += 9;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c120); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        s3 = peg$parsestring();
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                          s2 = void 0;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                          s1 = [s1, s2];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 5) === peg$c121) {
                          s1 = peg$c121;
                          peg$currPos += 5;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c122); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$currPos;
                          peg$silentFails++;
                          s3 = peg$parsestring();
                          peg$silentFails--;
                          if (s3 === peg$FAILED) {
                            s2 = void 0;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                          if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c123) {
                            s1 = peg$c123;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c124); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$currPos;
                            peg$silentFails++;
                            s3 = peg$parsestring();
                            peg$silentFails--;
                            if (s3 === peg$FAILED) {
                              s2 = void 0;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                            if (s2 !== peg$FAILED) {
                              s1 = [s1, s2];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c125) {
                              s1 = peg$c125;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c126); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$currPos;
                              peg$silentFails++;
                              s3 = peg$parsestring();
                              peg$silentFails--;
                              if (s3 === peg$FAILED) {
                                s2 = void 0;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                              if (s2 !== peg$FAILED) {
                                s1 = [s1, s2];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 7) === peg$c127) {
                                s1 = peg$c127;
                                peg$currPos += 7;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c128); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$currPos;
                                peg$silentFails++;
                                s3 = peg$parsestring();
                                peg$silentFails--;
                                if (s3 === peg$FAILED) {
                                  s2 = void 0;
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                                if (s2 !== peg$FAILED) {
                                  s1 = [s1, s2];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 3) === peg$c25) {
                                  s1 = peg$c25;
                                  peg$currPos += 3;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$currPos;
                                  peg$silentFails++;
                                  s3 = peg$parsestring();
                                  peg$silentFails--;
                                  if (s3 === peg$FAILED) {
                                    s2 = void 0;
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s1 = [s1, s2];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 5) === peg$c27) {
                                    s1 = peg$c27;
                                    peg$currPos += 5;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$currPos;
                                    peg$silentFails++;
                                    s3 = peg$parsestring();
                                    peg$silentFails--;
                                    if (s3 === peg$FAILED) {
                                      s2 = void 0;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                    if (s2 !== peg$FAILED) {
                                      s1 = [s1, s2];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 6) === peg$c51) {
                                      s1 = peg$c51;
                                      peg$currPos += 6;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$currPos;
                                      peg$silentFails++;
                                      s3 = peg$parsestring();
                                      peg$silentFails--;
                                      if (s3 === peg$FAILED) {
                                        s2 = void 0;
                                      } else {
                                        peg$currPos = s2;
                                        s2 = peg$FAILED;
                                      }
                                      if (s2 !== peg$FAILED) {
                                        s1 = [s1, s2];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 4) === peg$c129) {
                                        s1 = peg$c129;
                                        peg$currPos += 4;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$currPos;
                                        peg$silentFails++;
                                        s3 = peg$parsestring();
                                        peg$silentFails--;
                                        if (s3 === peg$FAILED) {
                                          s2 = void 0;
                                        } else {
                                          peg$currPos = s2;
                                          s2 = peg$FAILED;
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s1 = [s1, s2];
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 2) === peg$c131) {
                                          s1 = peg$c131;
                                          peg$currPos += 2;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$currPos;
                                          peg$silentFails++;
                                          s3 = peg$parsestring();
                                          peg$silentFails--;
                                          if (s3 === peg$FAILED) {
                                            s2 = void 0;
                                          } else {
                                            peg$currPos = s2;
                                            s2 = peg$FAILED;
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s1 = [s1, s2];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 4) === peg$c67) {
                                            s1 = peg$c67;
                                            peg$currPos += 4;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c68); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$currPos;
                                            peg$silentFails++;
                                            s3 = peg$parsestring();
                                            peg$silentFails--;
                                            if (s3 === peg$FAILED) {
                                              s2 = void 0;
                                            } else {
                                              peg$currPos = s2;
                                              s2 = peg$FAILED;
                                            }
                                            if (s2 !== peg$FAILED) {
                                              s1 = [s1, s2];
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 4) === peg$c69) {
                                              s1 = peg$c69;
                                              peg$currPos += 4;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c70); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$currPos;
                                              peg$silentFails++;
                                              s3 = peg$parsestring();
                                              peg$silentFails--;
                                              if (s3 === peg$FAILED) {
                                                s2 = void 0;
                                              } else {
                                                peg$currPos = s2;
                                                s2 = peg$FAILED;
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s1 = [s1, s2];
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c110); }
    }

    return s0;
  }

  function peg$parseputs() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c129) {
      s1 = peg$c129;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c130); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleArrayIndex();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleDotNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parsetupleArrayNotation();
            if (s3 === peg$FAILED) {
              s3 = peg$parsebitSelectionNotation();
              if (s3 === peg$FAILED) {
                s3 = peg$parsestrings();
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s4 = peg$c19;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$currPos;
                    s7 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c19;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    peg$silentFails--;
                    if (s8 === peg$FAILED) {
                      s7 = void 0;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s8 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c133); }
                      }
                      if (s8 !== peg$FAILED) {
                        s7 = [s7, s8];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$currPos;
                      s7 = peg$currPos;
                      peg$silentFails++;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s8 = peg$c19;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      peg$silentFails--;
                      if (s8 === peg$FAILED) {
                        s7 = void 0;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s8 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c133); }
                        }
                        if (s8 !== peg$FAILED) {
                          s7 = [s7, s8];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s6 = peg$c19;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s6 !== peg$FAILED) {
                        s4 = [s4, s5, s6];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsefactor();
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parseblankSpace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c134) {
              s7 = peg$c134;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c135); }
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseblankSpace();
              if (s9 !== peg$FAILED) {
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseblankSpace();
                }
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetupleArrayIndex();
                if (s9 === peg$FAILED) {
                  s9 = peg$parsetupleDotNotation();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parsetupleArrayNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsebitSelectionNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsestrings();
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s10 = peg$c19;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = [];
                            s12 = peg$currPos;
                            s13 = peg$currPos;
                            peg$silentFails++;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s14 = peg$c19;
                              peg$currPos++;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            peg$silentFails--;
                            if (s14 === peg$FAILED) {
                              s13 = void 0;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                            if (s13 !== peg$FAILED) {
                              if (input.length > peg$currPos) {
                                s14 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c133); }
                              }
                              if (s14 !== peg$FAILED) {
                                s13 = [s13, s14];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            while (s12 !== peg$FAILED) {
                              s11.push(s12);
                              s12 = peg$currPos;
                              s13 = peg$currPos;
                              peg$silentFails++;
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s14 = peg$c19;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              peg$silentFails--;
                              if (s14 === peg$FAILED) {
                                s13 = void 0;
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                              if (s13 !== peg$FAILED) {
                                if (input.length > peg$currPos) {
                                  s14 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s13 = [s13, s14];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            }
                            if (s11 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s12 = peg$c19;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s12 !== peg$FAILED) {
                                s10 = [s10, s11, s12];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$parsefactor();
                          }
                        }
                      }
                    }
                  }
                }
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseblankSpace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c134) {
                s7 = peg$c134;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c135); }
              }
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseblankSpace();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseblankSpace();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetupleArrayIndex();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parsetupleDotNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsetupleArrayNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsebitSelectionNotation();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsestrings();
                          if (s9 === peg$FAILED) {
                            s9 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s10 = peg$c19;
                              peg$currPos++;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = [];
                              s12 = peg$currPos;
                              s13 = peg$currPos;
                              peg$silentFails++;
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s14 = peg$c19;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              peg$silentFails--;
                              if (s14 === peg$FAILED) {
                                s13 = void 0;
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                              if (s13 !== peg$FAILED) {
                                if (input.length > peg$currPos) {
                                  s14 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s13 = [s13, s14];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              while (s12 !== peg$FAILED) {
                                s11.push(s12);
                                s12 = peg$currPos;
                                s13 = peg$currPos;
                                peg$silentFails++;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s14 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                peg$silentFails--;
                                if (s14 === peg$FAILED) {
                                  s13 = void 0;
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                                if (s13 !== peg$FAILED) {
                                  if (input.length > peg$currPos) {
                                    s14 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s13 = [s13, s14];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              }
                              if (s11 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s12 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s10 = [s10, s11, s12];
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                            if (s9 === peg$FAILED) {
                              s9 = peg$parsefactor();
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c129) {
        s1 = peg$c129;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c130); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestrings();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c19;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 34) {
                s8 = peg$c19;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = void 0;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c133); }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s8 = peg$c19;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = void 0;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s8 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c133); }
                  }
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s6 = peg$c19;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseputsNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayIndex();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleArrayNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebitSelectionNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestrings();
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s2 = peg$c19;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s6 = peg$c19;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = void 0;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c133); }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s6 = peg$c19;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  peg$silentFails--;
                  if (s6 === peg$FAILED) {
                    s5 = void 0;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c133); }
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s4 = peg$c19;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s4 !== peg$FAILED) {
                    s2 = [s2, s3, s4];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$parsefactor();
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseblankSpace();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseblankSpace();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c134) {
          s5 = peg$c134;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseblankSpace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetupleArrayIndex();
            if (s7 === peg$FAILED) {
              s7 = peg$parsetupleDotNotation();
              if (s7 === peg$FAILED) {
                s7 = peg$parsetupleArrayNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsebitSelectionNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsestrings();
                    if (s7 === peg$FAILED) {
                      s7 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s8 = peg$c19;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$currPos;
                        s11 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s12 = peg$c19;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        peg$silentFails--;
                        if (s12 === peg$FAILED) {
                          s11 = void 0;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 !== peg$FAILED) {
                          if (input.length > peg$currPos) {
                            s12 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c133); }
                          }
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$currPos;
                          s11 = peg$currPos;
                          peg$silentFails++;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s12 = peg$c19;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          peg$silentFails--;
                          if (s12 === peg$FAILED) {
                            s11 = void 0;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                          if (s11 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                              s12 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c133); }
                            }
                            if (s12 !== peg$FAILED) {
                              s11 = [s11, s12];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s10 = peg$c19;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s10 !== peg$FAILED) {
                            s8 = [s8, s9, s10];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsefactor();
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseblankSpace();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c134) {
            s5 = peg$c134;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c135); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseblankSpace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetupleArrayIndex();
              if (s7 === peg$FAILED) {
                s7 = peg$parsetupleDotNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsetupleArrayNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsebitSelectionNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsestrings();
                      if (s7 === peg$FAILED) {
                        s7 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s8 = peg$c19;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = [];
                          s10 = peg$currPos;
                          s11 = peg$currPos;
                          peg$silentFails++;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s12 = peg$c19;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          peg$silentFails--;
                          if (s12 === peg$FAILED) {
                            s11 = void 0;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                          if (s11 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                              s12 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c133); }
                            }
                            if (s12 !== peg$FAILED) {
                              s11 = [s11, s12];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                          while (s10 !== peg$FAILED) {
                            s9.push(s10);
                            s10 = peg$currPos;
                            s11 = peg$currPos;
                            peg$silentFails++;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s12 = peg$c19;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            peg$silentFails--;
                            if (s12 === peg$FAILED) {
                              s11 = void 0;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                            if (s11 !== peg$FAILED) {
                              if (input.length > peg$currPos) {
                                s12 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c133); }
                              }
                              if (s12 !== peg$FAILED) {
                                s11 = [s11, s12];
                                s10 = s11;
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          }
                          if (s9 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s10 = peg$c19;
                              peg$currPos++;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s10 !== peg$FAILED) {
                              s8 = [s8, s9, s10];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsefactor();
                        }
                      }
                    }
                  }
                }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsestrings();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 34) {
            s6 = peg$c19;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = void 0;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 34) {
              s6 = peg$c19;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = void 0;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c19;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetupleAssignment() {
    var s0;

    s0 = peg$parseasTupleNotation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemultiLineTuples();
      if (s0 === peg$FAILED) {
        s0 = peg$parsemultiDimensionalTuples();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesingleDimensionalTuples();
          if (s0 === peg$FAILED) {
            s0 = peg$parsesingleElementTuples();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesingleElementTuples() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parserangeAccess();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$currPos;
                s9 = peg$parsestrings();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s10 = peg$c4;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetupleArrayNotation();
                  if (s9 === peg$FAILED) {
                    s9 = peg$parsetupleDotNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsefactor();
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s12 = peg$c19;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s10 = peg$c21;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsestrings();
                            if (s11 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s12 = peg$c21;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s12 !== peg$FAILED) {
                                s10 = [s10, s11, s12];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$parsestrings();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parsenumbers();
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$currPos;
                  s10 = [];
                  s11 = peg$parseblankSpace();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parseblankSpace();
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$currPos;
                    s12 = peg$parsestrings();
                    if (s12 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s13 = peg$c4;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s13 !== peg$FAILED) {
                        s12 = [s12, s13];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    if (s11 === peg$FAILED) {
                      s11 = null;
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsetupleDotNotation();
                      if (s12 === peg$FAILED) {
                        s12 = peg$parsefactor();
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s13 = peg$c19;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsestrings();
                            if (s14 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s15 = peg$c19;
                                peg$currPos++;
                              } else {
                                s15 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s15 !== peg$FAILED) {
                                s13 = [s13, s14, s15];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s13 = peg$c21;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s15 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s13 = [s13, s14, s15];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$parsestrings();
                              if (s12 === peg$FAILED) {
                                s12 = peg$parsenumbers();
                              }
                            }
                          }
                        }
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$currPos;
                    s10 = [];
                    s11 = peg$parseblankSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseblankSpace();
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$currPos;
                      s12 = peg$parsestrings();
                      if (s12 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s13 = peg$c4;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                        if (s13 !== peg$FAILED) {
                          s12 = [s12, s13];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      if (s11 === peg$FAILED) {
                        s11 = null;
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsetupleDotNotation();
                        if (s12 === peg$FAILED) {
                          s12 = peg$parsefactor();
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s13 = peg$c19;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s15 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s13 = [s13, s14, s15];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s13 = peg$c21;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsestrings();
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s15 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s13 = [s13, s14, s15];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              if (s12 === peg$FAILED) {
                                s12 = peg$parsestrings();
                                if (s12 === peg$FAILED) {
                                  s12 = peg$parsenumbers();
                                }
                              }
                            }
                          }
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseblankSpace();
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseblankSpace();
                    }
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s10 = peg$c23;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                      }
                      if (s10 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parserangeAccess();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleArrayNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleDotNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestrings();
          }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c31;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c17;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$currPos;
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s10 = peg$c4;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsetupleArrayNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsetupleDotNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsefactor();
                        if (s9 === peg$FAILED) {
                          s9 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s10 = peg$c19;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsestrings();
                            if (s11 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s12 = peg$c19;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s12 !== peg$FAILED) {
                                s10 = [s10, s11, s12];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 === peg$FAILED) {
                            s9 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s10 = peg$c21;
                              peg$currPos++;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsestrings();
                              if (s11 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s12 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s10 = [s10, s11, s12];
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                            if (s9 === peg$FAILED) {
                              s9 = peg$parsestrings();
                              if (s9 === peg$FAILED) {
                                s9 = peg$parsenumbers();
                              }
                            }
                          }
                        }
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$currPos;
                    s10 = [];
                    s11 = peg$parseblankSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseblankSpace();
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$currPos;
                      s12 = peg$parsestrings();
                      if (s12 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s13 = peg$c4;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                        if (s13 !== peg$FAILED) {
                          s12 = [s12, s13];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsetupleDotNotation();
                        if (s12 === peg$FAILED) {
                          s12 = peg$parsefactor();
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s13 = peg$c19;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s15 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s13 = [s13, s14, s15];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s13 = peg$c21;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsestrings();
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s15 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s13 = [s13, s14, s15];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              if (s12 === peg$FAILED) {
                                s12 = peg$parsestrings();
                                if (s12 === peg$FAILED) {
                                  s12 = peg$parsenumbers();
                                }
                              }
                            }
                          }
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$currPos;
                      s10 = [];
                      s11 = peg$parseblankSpace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parseblankSpace();
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$currPos;
                        s12 = peg$parsestrings();
                        if (s12 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s13 = peg$c4;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s13 !== peg$FAILED) {
                            s12 = [s12, s13];
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsetupleDotNotation();
                          if (s12 === peg$FAILED) {
                            s12 = peg$parsefactor();
                            if (s12 === peg$FAILED) {
                              s12 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s13 = peg$c19;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsestrings();
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s15 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s13 = [s13, s14, s15];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              if (s12 === peg$FAILED) {
                                s12 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s13 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s13 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s13 !== peg$FAILED) {
                                  s14 = peg$parsestrings();
                                  if (s14 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s15 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s15 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s15 !== peg$FAILED) {
                                      s13 = [s13, s14, s15];
                                      s12 = s13;
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                                if (s12 === peg$FAILED) {
                                  s12 = peg$parsestrings();
                                  if (s12 === peg$FAILED) {
                                    s12 = peg$parsenumbers();
                                  }
                                }
                              }
                            }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseblankSpace();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseblankSpace();
                      }
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c23;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetupleArrayNotation();
            if (s3 === peg$FAILED) {
              s3 = peg$parsetupleDotNotation();
              if (s3 === peg$FAILED) {
                s3 = peg$parsestrings();
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c15;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseblankSpace();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseblankSpace();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsetupleArrayNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsetupleDotNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsestrings();
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c15;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseblankSpace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseblankSpace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsetupleArrayNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsetupleDotNotation();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsestrings();
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseblankSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c23;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseblankSpace();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c33) {
                        s8 = peg$c33;
                        peg$currPos += 2;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c34); }
                      }
                      if (s8 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s8 = peg$c31;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c32); }
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parseblankSpace();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parseblankSpace();
                        }
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 40) {
                            s10 = peg$c17;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c18); }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = [];
                            s12 = peg$parseblankSpace();
                            while (s12 !== peg$FAILED) {
                              s11.push(s12);
                              s12 = peg$parseblankSpace();
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$currPos;
                              s13 = peg$currPos;
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s15 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s14 = [s14, s15];
                                  s13 = s14;
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                              if (s13 === peg$FAILED) {
                                s13 = null;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsetupleArrayNotation();
                                if (s14 === peg$FAILED) {
                                  s14 = peg$parsetupleDotNotation();
                                  if (s14 === peg$FAILED) {
                                    s14 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s15 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s15 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s15 !== peg$FAILED) {
                                      s16 = peg$parsestrings();
                                      if (s16 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s17 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s17 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s17 !== peg$FAILED) {
                                          s15 = [s15, s16, s17];
                                          s14 = s15;
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                    if (s14 === peg$FAILED) {
                                      s14 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s15 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s15 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s15 !== peg$FAILED) {
                                        s16 = peg$parsestrings();
                                        if (s16 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s17 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s17 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s17 !== peg$FAILED) {
                                            s15 = [s15, s16, s17];
                                            s14 = s15;
                                          } else {
                                            peg$currPos = s14;
                                            s14 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                      if (s14 === peg$FAILED) {
                                        s14 = peg$parsestrings();
                                        if (s14 === peg$FAILED) {
                                          s14 = peg$parsenumbers();
                                        }
                                      }
                                    }
                                  }
                                }
                                if (s14 !== peg$FAILED) {
                                  s13 = [s13, s14];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = [];
                                s14 = peg$currPos;
                                s15 = [];
                                s16 = peg$parseblankSpace();
                                while (s16 !== peg$FAILED) {
                                  s15.push(s16);
                                  s16 = peg$parseblankSpace();
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$currPos;
                                  s17 = peg$parsestrings();
                                  if (s17 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 58) {
                                      s18 = peg$c4;
                                      peg$currPos++;
                                    } else {
                                      s18 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                    }
                                    if (s18 !== peg$FAILED) {
                                      s17 = [s17, s18];
                                      s16 = s17;
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s16;
                                    s16 = peg$FAILED;
                                  }
                                  if (s16 === peg$FAILED) {
                                    s16 = null;
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parsetupleDotNotation();
                                    if (s17 === peg$FAILED) {
                                      s17 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 34) {
                                        s18 = peg$c19;
                                        peg$currPos++;
                                      } else {
                                        s18 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$parsestrings();
                                        if (s19 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 34) {
                                            s20 = peg$c19;
                                            peg$currPos++;
                                          } else {
                                            s20 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                          }
                                          if (s20 !== peg$FAILED) {
                                            s18 = [s18, s19, s20];
                                            s17 = s18;
                                          } else {
                                            peg$currPos = s17;
                                            s17 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s17;
                                          s17 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s17;
                                        s17 = peg$FAILED;
                                      }
                                      if (s17 === peg$FAILED) {
                                        s17 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 39) {
                                          s18 = peg$c21;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s19 = peg$parsestrings();
                                          if (s19 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 39) {
                                              s20 = peg$c21;
                                              peg$currPos++;
                                            } else {
                                              s20 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                            }
                                            if (s20 !== peg$FAILED) {
                                              s18 = [s18, s19, s20];
                                              s17 = s18;
                                            } else {
                                              peg$currPos = s17;
                                              s17 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s17;
                                            s17 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s17;
                                          s17 = peg$FAILED;
                                        }
                                        if (s17 === peg$FAILED) {
                                          s17 = peg$parsestrings();
                                          if (s17 === peg$FAILED) {
                                            s17 = peg$parsenumbers();
                                          }
                                        }
                                      }
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s15 = [s15, s16, s17];
                                      s14 = s15;
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                                while (s14 !== peg$FAILED) {
                                  s13.push(s14);
                                  s14 = peg$currPos;
                                  s15 = [];
                                  s16 = peg$parseblankSpace();
                                  while (s16 !== peg$FAILED) {
                                    s15.push(s16);
                                    s16 = peg$parseblankSpace();
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$currPos;
                                    s17 = peg$parsestrings();
                                    if (s17 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 58) {
                                        s18 = peg$c4;
                                        peg$currPos++;
                                      } else {
                                        s18 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s17 = [s17, s18];
                                        s16 = s17;
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$FAILED;
                                    }
                                    if (s16 === peg$FAILED) {
                                      s16 = null;
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsetupleDotNotation();
                                      if (s17 === peg$FAILED) {
                                        s17 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s18 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s19 = peg$parsestrings();
                                          if (s19 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 34) {
                                              s20 = peg$c19;
                                              peg$currPos++;
                                            } else {
                                              s20 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                            }
                                            if (s20 !== peg$FAILED) {
                                              s18 = [s18, s19, s20];
                                              s17 = s18;
                                            } else {
                                              peg$currPos = s17;
                                              s17 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s17;
                                            s17 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s17;
                                          s17 = peg$FAILED;
                                        }
                                        if (s17 === peg$FAILED) {
                                          s17 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s18 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s18 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s18 !== peg$FAILED) {
                                            s19 = peg$parsestrings();
                                            if (s19 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 39) {
                                                s20 = peg$c21;
                                                peg$currPos++;
                                              } else {
                                                s20 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                              }
                                              if (s20 !== peg$FAILED) {
                                                s18 = [s18, s19, s20];
                                                s17 = s18;
                                              } else {
                                                peg$currPos = s17;
                                                s17 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s17;
                                              s17 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s17;
                                            s17 = peg$FAILED;
                                          }
                                          if (s17 === peg$FAILED) {
                                            s17 = peg$parsestrings();
                                            if (s17 === peg$FAILED) {
                                              s17 = peg$parsenumbers();
                                            }
                                          }
                                        }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s15 = [s15, s16, s17];
                                        s14 = s15;
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                }
                                if (s13 !== peg$FAILED) {
                                  s14 = [];
                                  s15 = peg$parseblankSpace();
                                  while (s15 !== peg$FAILED) {
                                    s14.push(s15);
                                    s15 = peg$parseblankSpace();
                                  }
                                  if (s14 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s15 = peg$c23;
                                      peg$currPos++;
                                    } else {
                                      s15 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                    }
                                    if (s15 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parserangeAccess();
          if (s1 === peg$FAILED) {
            s1 = peg$parsetupleArrayNotation();
            if (s1 === peg$FAILED) {
              s1 = peg$parsetupleDotNotation();
              if (s1 === peg$FAILED) {
                s1 = peg$parsestrings();
              }
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseblankSpace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c33) {
                s3 = peg$c33;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s3 = peg$c31;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parseblankSpace();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$currPos;
                  s7 = peg$parsestrings();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s8 = peg$c4;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsetupleArrayNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsetupleDotNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s8 = peg$c19;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsestrings();
                          if (s9 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s10 = peg$c19;
                              peg$currPos++;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s10 !== peg$FAILED) {
                              s8 = [s8, s9, s10];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                        if (s7 === peg$FAILED) {
                          s7 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s8 = peg$c21;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parsestrings();
                            if (s9 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s10 = peg$c21;
                                peg$currPos++;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s10 !== peg$FAILED) {
                                s8 = [s8, s9, s10];
                                s7 = s8;
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsestrings();
                            if (s7 === peg$FAILED) {
                              s7 = peg$parsenumbers();
                            }
                          }
                        }
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s6 = [s6, s7];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$currPos;
                    s8 = [];
                    s9 = peg$parseblankSpace();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseblankSpace();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$parsestrings();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s11 = peg$c4;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsetupleDotNotation();
                        if (s10 === peg$FAILED) {
                          s10 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s11 = peg$c19;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsestrings();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s13 = peg$c19;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s13 !== peg$FAILED) {
                                s11 = [s11, s12, s13];
                                s10 = s11;
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                          if (s10 === peg$FAILED) {
                            s10 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s11 = peg$c21;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parsestrings();
                              if (s12 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s13 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s13 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s13 !== peg$FAILED) {
                                  s11 = [s11, s12, s13];
                                  s10 = s11;
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                            if (s10 === peg$FAILED) {
                              s10 = peg$parsestrings();
                              if (s10 === peg$FAILED) {
                                s10 = peg$parsenumbers();
                              }
                            }
                          }
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$currPos;
                      s8 = [];
                      s9 = peg$parseblankSpace();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseblankSpace();
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s11 = peg$c4;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsetupleDotNotation();
                          if (s10 === peg$FAILED) {
                            s10 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s11 = peg$c19;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parsestrings();
                              if (s12 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s13 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s13 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s13 !== peg$FAILED) {
                                  s11 = [s11, s12, s13];
                                  s10 = s11;
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                            if (s10 === peg$FAILED) {
                              s10 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s11 = peg$c21;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parsestrings();
                                if (s12 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s13 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s11 = [s11, s12, s13];
                                    s10 = s11;
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                              if (s10 === peg$FAILED) {
                                s10 = peg$parsestrings();
                                if (s10 === peg$FAILED) {
                                  s10 = peg$parsenumbers();
                                }
                              }
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            s8 = [s8, s9, s10];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    }
                    if (s6 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parserangeAccess();
            if (s1 === peg$FAILED) {
              s1 = peg$parsetupleArrayNotation();
              if (s1 === peg$FAILED) {
                s1 = peg$parsetupleDotNotation();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsestrings();
                }
              }
            }
            if (s1 === peg$FAILED) {
              s1 = null;
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parseblankSpace();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseblankSpace();
              }
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c33) {
                  s3 = peg$c33;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s3 = peg$c31;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseblankSpace();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parseblankSpace();
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = peg$currPos;
                    s7 = peg$parsestrings();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s8 = peg$c4;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s8 !== peg$FAILED) {
                        s7 = [s7, s8];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsetupleArrayNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsetupleDotNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s8 = peg$c19;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parsestrings();
                            if (s9 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s10 = peg$c19;
                                peg$currPos++;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s10 !== peg$FAILED) {
                                s8 = [s8, s9, s10];
                                s7 = s8;
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                          if (s7 === peg$FAILED) {
                            s7 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s8 = peg$c21;
                              peg$currPos++;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parsestrings();
                              if (s9 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s10 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s10 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s10 !== peg$FAILED) {
                                  s8 = [s8, s9, s10];
                                  s7 = s8;
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                            if (s7 === peg$FAILED) {
                              s7 = peg$parsestrings();
                              if (s7 === peg$FAILED) {
                                s7 = peg$parsenumbers();
                              }
                            }
                          }
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        s6 = [s6, s7];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$currPos;
                      s8 = [];
                      s9 = peg$parseblankSpace();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseblankSpace();
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s11 = peg$c4;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsetupleDotNotation();
                          if (s10 === peg$FAILED) {
                            s10 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s11 = peg$c19;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parsestrings();
                              if (s12 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s13 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s13 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s13 !== peg$FAILED) {
                                  s11 = [s11, s12, s13];
                                  s10 = s11;
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                            if (s10 === peg$FAILED) {
                              s10 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s11 = peg$c21;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parsestrings();
                                if (s12 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s13 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s11 = [s11, s12, s13];
                                    s10 = s11;
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                              if (s10 === peg$FAILED) {
                                s10 = peg$parsestrings();
                                if (s10 === peg$FAILED) {
                                  s10 = peg$parsenumbers();
                                }
                              }
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            s8 = [s8, s9, s10];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$currPos;
                        s8 = [];
                        s9 = peg$parseblankSpace();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parseblankSpace();
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$currPos;
                          s10 = peg$parsestrings();
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                              s11 = peg$c4;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                            }
                            if (s11 !== peg$FAILED) {
                              s10 = [s10, s11];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parsetupleDotNotation();
                            if (s10 === peg$FAILED) {
                              s10 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s11 = peg$c19;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = peg$parsestrings();
                                if (s12 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s13 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s11 = [s11, s12, s13];
                                    s10 = s11;
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                              if (s10 === peg$FAILED) {
                                s10 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s11 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s11 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s11 !== peg$FAILED) {
                                  s12 = peg$parsestrings();
                                  if (s12 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s13 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s13 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s13 !== peg$FAILED) {
                                      s11 = [s11, s12, s13];
                                      s10 = s11;
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                                if (s10 === peg$FAILED) {
                                  s10 = peg$parsestrings();
                                  if (s10 === peg$FAILED) {
                                    s10 = peg$parsenumbers();
                                  }
                                }
                              }
                            }
                            if (s10 !== peg$FAILED) {
                              s8 = [s8, s9, s10];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      }
                      if (s6 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c17;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseblankSpace();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parseblankSpace();
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsetupleArrayNotation();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsetupleDotNotation();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parsestrings();
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$currPos;
                    s6 = [];
                    s7 = peg$parseblankSpace();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseblankSpace();
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s7 = peg$c15;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parseblankSpace();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parseblankSpace();
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsetupleArrayNotation();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parsetupleDotNotation();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parsestrings();
                            }
                          }
                          if (s9 !== peg$FAILED) {
                            s6 = [s6, s7, s8, s9];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$currPos;
                      s6 = [];
                      s7 = peg$parseblankSpace();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseblankSpace();
                      }
                      if (s6 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s7 = peg$c15;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = peg$parseblankSpace();
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$parseblankSpace();
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parsetupleArrayNotation();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parsetupleDotNotation();
                              if (s9 === peg$FAILED) {
                                s9 = peg$parsestrings();
                              }
                            }
                            if (s9 !== peg$FAILED) {
                              s6 = [s6, s7, s8, s9];
                              s5 = s6;
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseblankSpace();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseblankSpace();
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s6 = peg$c23;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parseblankSpace();
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parseblankSpace();
                          }
                          if (s7 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c33) {
                              s8 = peg$c33;
                              peg$currPos += 2;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c34); }
                            }
                            if (s8 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 61) {
                                s8 = peg$c31;
                                peg$currPos++;
                              } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                              }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = [];
                              s10 = peg$parseblankSpace();
                              while (s10 !== peg$FAILED) {
                                s9.push(s10);
                                s10 = peg$parseblankSpace();
                              }
                              if (s9 !== peg$FAILED) {
                                s10 = peg$currPos;
                                s11 = peg$currPos;
                                s12 = peg$parsestrings();
                                if (s12 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s13 = peg$c4;
                                    peg$currPos++;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s12 = [s12, s13];
                                    s11 = s12;
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                                if (s11 === peg$FAILED) {
                                  s11 = null;
                                }
                                if (s11 !== peg$FAILED) {
                                  s12 = peg$parsetupleArrayNotation();
                                  if (s12 === peg$FAILED) {
                                    s12 = peg$parsetupleDotNotation();
                                    if (s12 === peg$FAILED) {
                                      s12 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 34) {
                                        s13 = peg$c19;
                                        peg$currPos++;
                                      } else {
                                        s13 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                      }
                                      if (s13 !== peg$FAILED) {
                                        s14 = peg$parsestrings();
                                        if (s14 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 34) {
                                            s15 = peg$c19;
                                            peg$currPos++;
                                          } else {
                                            s15 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                          }
                                          if (s15 !== peg$FAILED) {
                                            s13 = [s13, s14, s15];
                                            s12 = s13;
                                          } else {
                                            peg$currPos = s12;
                                            s12 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s12;
                                          s12 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                      if (s12 === peg$FAILED) {
                                        s12 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 39) {
                                          s13 = peg$c21;
                                          peg$currPos++;
                                        } else {
                                          s13 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                        }
                                        if (s13 !== peg$FAILED) {
                                          s14 = peg$parsestrings();
                                          if (s14 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 39) {
                                              s15 = peg$c21;
                                              peg$currPos++;
                                            } else {
                                              s15 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                            }
                                            if (s15 !== peg$FAILED) {
                                              s13 = [s13, s14, s15];
                                              s12 = s13;
                                            } else {
                                              peg$currPos = s12;
                                              s12 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s12;
                                            s12 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s12;
                                          s12 = peg$FAILED;
                                        }
                                        if (s12 === peg$FAILED) {
                                          s12 = peg$parsestrings();
                                          if (s12 === peg$FAILED) {
                                            s12 = peg$parsenumbers();
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if (s12 !== peg$FAILED) {
                                    s11 = [s11, s12];
                                    s10 = s11;
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                                if (s10 !== peg$FAILED) {
                                  s11 = [];
                                  s12 = peg$currPos;
                                  s13 = [];
                                  s14 = peg$parseblankSpace();
                                  while (s14 !== peg$FAILED) {
                                    s13.push(s14);
                                    s14 = peg$parseblankSpace();
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s14 = peg$currPos;
                                    s15 = peg$parsestrings();
                                    if (s15 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 58) {
                                        s16 = peg$c4;
                                        peg$currPos++;
                                      } else {
                                        s16 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                      }
                                      if (s16 !== peg$FAILED) {
                                        s15 = [s15, s16];
                                        s14 = s15;
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                    if (s14 === peg$FAILED) {
                                      s14 = null;
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parsetupleDotNotation();
                                      if (s15 === peg$FAILED) {
                                        s15 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s16 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s16 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s16 !== peg$FAILED) {
                                          s17 = peg$parsestrings();
                                          if (s17 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 34) {
                                              s18 = peg$c19;
                                              peg$currPos++;
                                            } else {
                                              s18 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                            }
                                            if (s18 !== peg$FAILED) {
                                              s16 = [s16, s17, s18];
                                              s15 = s16;
                                            } else {
                                              peg$currPos = s15;
                                              s15 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                        if (s15 === peg$FAILED) {
                                          s15 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s16 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s16 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s16 !== peg$FAILED) {
                                            s17 = peg$parsestrings();
                                            if (s17 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 39) {
                                                s18 = peg$c21;
                                                peg$currPos++;
                                              } else {
                                                s18 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                              }
                                              if (s18 !== peg$FAILED) {
                                                s16 = [s16, s17, s18];
                                                s15 = s16;
                                              } else {
                                                peg$currPos = s15;
                                                s15 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s15;
                                              s15 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                          if (s15 === peg$FAILED) {
                                            s15 = peg$parsestrings();
                                            if (s15 === peg$FAILED) {
                                              s15 = peg$parsenumbers();
                                            }
                                          }
                                        }
                                      }
                                      if (s15 !== peg$FAILED) {
                                        s13 = [s13, s14, s15];
                                        s12 = s13;
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                  while (s12 !== peg$FAILED) {
                                    s11.push(s12);
                                    s12 = peg$currPos;
                                    s13 = [];
                                    s14 = peg$parseblankSpace();
                                    while (s14 !== peg$FAILED) {
                                      s13.push(s14);
                                      s14 = peg$parseblankSpace();
                                    }
                                    if (s13 !== peg$FAILED) {
                                      s14 = peg$currPos;
                                      s15 = peg$parsestrings();
                                      if (s15 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 58) {
                                          s16 = peg$c4;
                                          peg$currPos++;
                                        } else {
                                          s16 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                        }
                                        if (s16 !== peg$FAILED) {
                                          s15 = [s15, s16];
                                          s14 = s15;
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                      if (s14 === peg$FAILED) {
                                        s14 = null;
                                      }
                                      if (s14 !== peg$FAILED) {
                                        s15 = peg$parsetupleDotNotation();
                                        if (s15 === peg$FAILED) {
                                          s15 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 34) {
                                            s16 = peg$c19;
                                            peg$currPos++;
                                          } else {
                                            s16 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                          }
                                          if (s16 !== peg$FAILED) {
                                            s17 = peg$parsestrings();
                                            if (s17 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 34) {
                                                s18 = peg$c19;
                                                peg$currPos++;
                                              } else {
                                                s18 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                              }
                                              if (s18 !== peg$FAILED) {
                                                s16 = [s16, s17, s18];
                                                s15 = s16;
                                              } else {
                                                peg$currPos = s15;
                                                s15 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s15;
                                              s15 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                          if (s15 === peg$FAILED) {
                                            s15 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 39) {
                                              s16 = peg$c21;
                                              peg$currPos++;
                                            } else {
                                              s16 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                            }
                                            if (s16 !== peg$FAILED) {
                                              s17 = peg$parsestrings();
                                              if (s17 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 39) {
                                                  s18 = peg$c21;
                                                  peg$currPos++;
                                                } else {
                                                  s18 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                                }
                                                if (s18 !== peg$FAILED) {
                                                  s16 = [s16, s17, s18];
                                                  s15 = s16;
                                                } else {
                                                  peg$currPos = s15;
                                                  s15 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s15;
                                                s15 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s15;
                                              s15 = peg$FAILED;
                                            }
                                            if (s15 === peg$FAILED) {
                                              s15 = peg$parsestrings();
                                              if (s15 === peg$FAILED) {
                                                s15 = peg$parsenumbers();
                                              }
                                            }
                                          }
                                        }
                                        if (s15 !== peg$FAILED) {
                                          s13 = [s13, s14, s15];
                                          s12 = s13;
                                        } else {
                                          peg$currPos = s12;
                                          s12 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  }
                                  if (s11 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parserangeAccess();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsetupleArrayNotation();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsetupleDotNotation();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsestrings();
                    }
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parseblankSpace();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseblankSpace();
                  }
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c33) {
                      s3 = peg$c33;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c31;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                      }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parseblankSpace();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parseblankSpace();
                      }
                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s5 = peg$c17;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c18); }
                        }
                        if (s5 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s6 = peg$c23;
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                          }
                          if (s6 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesingleDimensionalTuples() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;

    s0 = peg$currPos;
    s1 = peg$parserangeAccess();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsestrings();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s9 = peg$c4;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetupleDotNotation();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseexpressions();
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s9 = peg$c19;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s11 = peg$c19;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s9 = peg$c21;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestrings();
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s11 = peg$c21;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s11 !== peg$FAILED) {
                              s9 = [s9, s10, s11];
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsestrings();
                        }
                      }
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$currPos;
                    s11 = [];
                    s12 = peg$parseblankSpace();
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$parseblankSpace();
                    }
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s12 = peg$c15;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = [];
                        s14 = peg$parseblankSpace();
                        while (s14 !== peg$FAILED) {
                          s13.push(s14);
                          s14 = peg$parseblankSpace();
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$currPos;
                          s15 = peg$parsestrings();
                          if (s15 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                              s16 = peg$c4;
                              peg$currPos++;
                            } else {
                              s16 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                            }
                            if (s16 !== peg$FAILED) {
                              s15 = [s15, s16];
                              s14 = s15;
                            } else {
                              peg$currPos = s14;
                              s14 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s14;
                            s14 = peg$FAILED;
                          }
                          if (s14 === peg$FAILED) {
                            s14 = null;
                          }
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parsetupleDotNotation();
                            if (s15 === peg$FAILED) {
                              s15 = peg$parseexpressions();
                              if (s15 === peg$FAILED) {
                                s15 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s16 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parsestrings();
                                  if (s17 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s18 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s18 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s18 !== peg$FAILED) {
                                      s16 = [s16, s17, s18];
                                      s15 = s16;
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                                if (s15 === peg$FAILED) {
                                  s15 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s16 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parsestrings();
                                    if (s17 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s18 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s18 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s16 = [s16, s17, s18];
                                        s15 = s16;
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$parsestrings();
                                  }
                                }
                              }
                            }
                            if (s15 !== peg$FAILED) {
                              s11 = [s11, s12, s13, s14, s15];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$currPos;
                      s11 = [];
                      s12 = peg$parseblankSpace();
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parseblankSpace();
                      }
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s12 = peg$c15;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = [];
                          s14 = peg$parseblankSpace();
                          while (s14 !== peg$FAILED) {
                            s13.push(s14);
                            s14 = peg$parseblankSpace();
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$currPos;
                            s15 = peg$parsestrings();
                            if (s15 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s16 = peg$c4;
                                peg$currPos++;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                              if (s16 !== peg$FAILED) {
                                s15 = [s15, s16];
                                s14 = s15;
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s14;
                              s14 = peg$FAILED;
                            }
                            if (s14 === peg$FAILED) {
                              s14 = null;
                            }
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parsetupleDotNotation();
                              if (s15 === peg$FAILED) {
                                s15 = peg$parseexpressions();
                                if (s15 === peg$FAILED) {
                                  s15 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s16 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parsestrings();
                                    if (s17 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 34) {
                                        s18 = peg$c19;
                                        peg$currPos++;
                                      } else {
                                        s18 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s16 = [s16, s17, s18];
                                        s15 = s16;
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s16 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsestrings();
                                      if (s17 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 39) {
                                          s18 = peg$c21;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s16 = [s16, s17, s18];
                                          s15 = s16;
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                    if (s15 === peg$FAILED) {
                                      s15 = peg$parsestrings();
                                    }
                                  }
                                }
                              }
                              if (s15 !== peg$FAILED) {
                                s11 = [s11, s12, s13, s14, s15];
                                s10 = s11;
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parseblankSpace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parseblankSpace();
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s11 = peg$c23;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s11 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parserangeAccess();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleArrayNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleDotNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestrings();
          }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c31;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c17;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parsestrings();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s9 = peg$c4;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetupleDotNotation();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseexpressions();
                      if (s8 === peg$FAILED) {
                        s8 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s9 = peg$c19;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestrings();
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s11 = peg$c19;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s11 !== peg$FAILED) {
                              s9 = [s9, s10, s11];
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s9 = peg$c21;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parsestrings();
                            if (s10 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s11 = peg$c21;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s11 !== peg$FAILED) {
                                s9 = [s9, s10, s11];
                                s8 = s9;
                              } else {
                                peg$currPos = s8;
                                s8 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsestrings();
                          }
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$currPos;
                      s11 = [];
                      s12 = peg$parseblankSpace();
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parseblankSpace();
                      }
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s12 = peg$c15;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = [];
                          s14 = peg$parseblankSpace();
                          while (s14 !== peg$FAILED) {
                            s13.push(s14);
                            s14 = peg$parseblankSpace();
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$currPos;
                            s15 = peg$parsestrings();
                            if (s15 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s16 = peg$c4;
                                peg$currPos++;
                              } else {
                                s16 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                              if (s16 !== peg$FAILED) {
                                s15 = [s15, s16];
                                s14 = s15;
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s14;
                              s14 = peg$FAILED;
                            }
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parsetupleDotNotation();
                              if (s15 === peg$FAILED) {
                                s15 = peg$parseexpressions();
                                if (s15 === peg$FAILED) {
                                  s15 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s16 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parsestrings();
                                    if (s17 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 34) {
                                        s18 = peg$c19;
                                        peg$currPos++;
                                      } else {
                                        s18 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s16 = [s16, s17, s18];
                                        s15 = s16;
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s16 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsestrings();
                                      if (s17 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 39) {
                                          s18 = peg$c21;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s16 = [s16, s17, s18];
                                          s15 = s16;
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                    if (s15 === peg$FAILED) {
                                      s15 = peg$parsestrings();
                                    }
                                  }
                                }
                              }
                              if (s15 !== peg$FAILED) {
                                s11 = [s11, s12, s13, s14, s15];
                                s10 = s11;
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$currPos;
                        s11 = [];
                        s12 = peg$parseblankSpace();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parseblankSpace();
                        }
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s12 = peg$c15;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = [];
                            s14 = peg$parseblankSpace();
                            while (s14 !== peg$FAILED) {
                              s13.push(s14);
                              s14 = peg$parseblankSpace();
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$currPos;
                              s15 = peg$parsestrings();
                              if (s15 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s16 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                                if (s16 !== peg$FAILED) {
                                  s15 = [s15, s16];
                                  s14 = s15;
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parsetupleDotNotation();
                                if (s15 === peg$FAILED) {
                                  s15 = peg$parseexpressions();
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s16 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsestrings();
                                      if (s17 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s18 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s16 = [s16, s17, s18];
                                          s15 = s16;
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                    if (s15 === peg$FAILED) {
                                      s15 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s16 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s16 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s16 !== peg$FAILED) {
                                        s17 = peg$parsestrings();
                                        if (s17 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s18 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s18 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s18 !== peg$FAILED) {
                                            s16 = [s16, s17, s18];
                                            s15 = s16;
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                      if (s15 === peg$FAILED) {
                                        s15 = peg$parsestrings();
                                      }
                                    }
                                  }
                                }
                                if (s15 !== peg$FAILED) {
                                  s11 = [s11, s12, s13, s14, s15];
                                  s10 = s11;
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parseblankSpace();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parseblankSpace();
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s11 = peg$c23;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                          }
                          if (s11 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetupleArrayNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetupleDotNotation();
            if (s2 === peg$FAILED) {
              s2 = peg$parsestrings();
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c15;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetupleArrayNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsetupleDotNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsestrings();
                  }
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c15;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetupleArrayNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleDotNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsestrings();
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c23;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseblankSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c33) {
                    s6 = peg$c33;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s6 = peg$c31;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c32); }
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseblankSpace();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s8 = peg$c17;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c18); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = [];
                        s10 = peg$parseblankSpace();
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$parseblankSpace();
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$currPos;
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                              s12 = peg$c4;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                            }
                            if (s12 !== peg$FAILED) {
                              s11 = [s11, s12];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                          if (s10 === peg$FAILED) {
                            s10 = null;
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsetupleDotNotation();
                            if (s11 === peg$FAILED) {
                              s11 = peg$parseexpressions();
                              if (s11 === peg$FAILED) {
                                s11 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s12 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsestrings();
                                  if (s13 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s14 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s12 = [s12, s13, s14];
                                      s11 = s12;
                                    } else {
                                      peg$currPos = s11;
                                      s11 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                                if (s11 === peg$FAILED) {
                                  s11 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s12 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s12 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s12 !== peg$FAILED) {
                                    s13 = peg$parsestrings();
                                    if (s13 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s14 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s14 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s14 !== peg$FAILED) {
                                        s12 = [s12, s13, s14];
                                        s11 = s12;
                                      } else {
                                        peg$currPos = s11;
                                        s11 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s11;
                                      s11 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                  if (s11 === peg$FAILED) {
                                    s11 = peg$parsestrings();
                                  }
                                }
                              }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = [];
                              s13 = peg$currPos;
                              s14 = [];
                              s15 = peg$parseblankSpace();
                              while (s15 !== peg$FAILED) {
                                s14.push(s15);
                                s15 = peg$parseblankSpace();
                              }
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                  s15 = peg$c15;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = [];
                                  s17 = peg$parseblankSpace();
                                  while (s17 !== peg$FAILED) {
                                    s16.push(s17);
                                    s17 = peg$parseblankSpace();
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$currPos;
                                    s18 = peg$parsestrings();
                                    if (s18 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 58) {
                                        s19 = peg$c4;
                                        peg$currPos++;
                                      } else {
                                        s19 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                      }
                                      if (s19 !== peg$FAILED) {
                                        s18 = [s18, s19];
                                        s17 = s18;
                                      } else {
                                        peg$currPos = s17;
                                        s17 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s17;
                                      s17 = peg$FAILED;
                                    }
                                    if (s17 === peg$FAILED) {
                                      s17 = null;
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parsetupleDotNotation();
                                      if (s18 === peg$FAILED) {
                                        s18 = peg$parseexpressions();
                                        if (s18 === peg$FAILED) {
                                          s18 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 34) {
                                            s19 = peg$c19;
                                            peg$currPos++;
                                          } else {
                                            s19 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                          }
                                          if (s19 !== peg$FAILED) {
                                            s20 = peg$parsestrings();
                                            if (s20 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 34) {
                                                s21 = peg$c19;
                                                peg$currPos++;
                                              } else {
                                                s21 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                              }
                                              if (s21 !== peg$FAILED) {
                                                s19 = [s19, s20, s21];
                                                s18 = s19;
                                              } else {
                                                peg$currPos = s18;
                                                s18 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s18;
                                              s18 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s18;
                                            s18 = peg$FAILED;
                                          }
                                          if (s18 === peg$FAILED) {
                                            s18 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 39) {
                                              s19 = peg$c21;
                                              peg$currPos++;
                                            } else {
                                              s19 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                            }
                                            if (s19 !== peg$FAILED) {
                                              s20 = peg$parsestrings();
                                              if (s20 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 39) {
                                                  s21 = peg$c21;
                                                  peg$currPos++;
                                                } else {
                                                  s21 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                                }
                                                if (s21 !== peg$FAILED) {
                                                  s19 = [s19, s20, s21];
                                                  s18 = s19;
                                                } else {
                                                  peg$currPos = s18;
                                                  s18 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s18;
                                                s18 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s18;
                                              s18 = peg$FAILED;
                                            }
                                            if (s18 === peg$FAILED) {
                                              s18 = peg$parsestrings();
                                            }
                                          }
                                        }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s14 = [s14, s15, s16, s17, s18];
                                        s13 = s14;
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                              while (s13 !== peg$FAILED) {
                                s12.push(s13);
                                s13 = peg$currPos;
                                s14 = [];
                                s15 = peg$parseblankSpace();
                                while (s15 !== peg$FAILED) {
                                  s14.push(s15);
                                  s15 = peg$parseblankSpace();
                                }
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                    s15 = peg$c15;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parseblankSpace();
                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parseblankSpace();
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$currPos;
                                      s18 = peg$parsestrings();
                                      if (s18 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 58) {
                                          s19 = peg$c4;
                                          peg$currPos++;
                                        } else {
                                          s19 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                        }
                                        if (s19 !== peg$FAILED) {
                                          s18 = [s18, s19];
                                          s17 = s18;
                                        } else {
                                          peg$currPos = s17;
                                          s17 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s17;
                                        s17 = peg$FAILED;
                                      }
                                      if (s17 === peg$FAILED) {
                                        s17 = null;
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s18 = peg$parsetupleDotNotation();
                                        if (s18 === peg$FAILED) {
                                          s18 = peg$parseexpressions();
                                          if (s18 === peg$FAILED) {
                                            s18 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 34) {
                                              s19 = peg$c19;
                                              peg$currPos++;
                                            } else {
                                              s19 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                            }
                                            if (s19 !== peg$FAILED) {
                                              s20 = peg$parsestrings();
                                              if (s20 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 34) {
                                                  s21 = peg$c19;
                                                  peg$currPos++;
                                                } else {
                                                  s21 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                                }
                                                if (s21 !== peg$FAILED) {
                                                  s19 = [s19, s20, s21];
                                                  s18 = s19;
                                                } else {
                                                  peg$currPos = s18;
                                                  s18 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s18;
                                                s18 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s18;
                                              s18 = peg$FAILED;
                                            }
                                            if (s18 === peg$FAILED) {
                                              s18 = peg$currPos;
                                              if (input.charCodeAt(peg$currPos) === 39) {
                                                s19 = peg$c21;
                                                peg$currPos++;
                                              } else {
                                                s19 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                              }
                                              if (s19 !== peg$FAILED) {
                                                s20 = peg$parsestrings();
                                                if (s20 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 39) {
                                                    s21 = peg$c21;
                                                    peg$currPos++;
                                                  } else {
                                                    s21 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                                  }
                                                  if (s21 !== peg$FAILED) {
                                                    s19 = [s19, s20, s21];
                                                    s18 = s19;
                                                  } else {
                                                    peg$currPos = s18;
                                                    s18 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s18;
                                                  s18 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s18;
                                                s18 = peg$FAILED;
                                              }
                                              if (s18 === peg$FAILED) {
                                                s18 = peg$parsestrings();
                                              }
                                            }
                                          }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s14 = [s14, s15, s16, s17, s18];
                                          s13 = s14;
                                        } else {
                                          peg$currPos = s13;
                                          s13 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = [];
                                s14 = peg$parseblankSpace();
                                while (s14 !== peg$FAILED) {
                                  s13.push(s14);
                                  s14 = peg$parseblankSpace();
                                }
                                if (s13 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 41) {
                                    s14 = peg$c23;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsemultiDimensionalTuples() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsenestedTuples();
              if (s6 === peg$FAILED) {
                s6 = peg$parsetupleStructure();
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c15;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$parseblankSpace();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parseblankSpace();
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$currPos;
                    s12 = peg$parsestrings();
                    if (s12 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s13 = peg$c4;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s13 !== peg$FAILED) {
                        s12 = [s12, s13];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    if (s11 === peg$FAILED) {
                      s11 = null;
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseexpressions();
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s13 = peg$c19;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsestrings();
                          if (s14 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s15 = peg$c19;
                              peg$currPos++;
                            } else {
                              s15 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s15 !== peg$FAILED) {
                              s13 = [s13, s14, s15];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s13 = peg$c21;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsestrings();
                            if (s14 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s15 = peg$c21;
                                peg$currPos++;
                              } else {
                                s15 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s15 !== peg$FAILED) {
                                s13 = [s13, s14, s15];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                          if (s12 === peg$FAILED) {
                            s12 = peg$parsestrings();
                          }
                        }
                      }
                      if (s12 !== peg$FAILED) {
                        s9 = [s9, s10, s11, s12];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s9 = peg$c15;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parseblankSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseblankSpace();
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$currPos;
                      s12 = peg$parsestrings();
                      if (s12 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s13 = peg$c4;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                        if (s13 !== peg$FAILED) {
                          s12 = [s12, s13];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      if (s11 === peg$FAILED) {
                        s11 = null;
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseexpressions();
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s13 = peg$c19;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsestrings();
                            if (s14 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s15 = peg$c19;
                                peg$currPos++;
                              } else {
                                s15 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s15 !== peg$FAILED) {
                                s13 = [s13, s14, s15];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s13 = peg$c21;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s15 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s13 = [s13, s14, s15];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$parsestrings();
                            }
                          }
                        }
                        if (s12 !== peg$FAILED) {
                          s9 = [s9, s10, s11, s12];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c23;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s8 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c31;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c17;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenestedTuples();
                if (s6 === peg$FAILED) {
                  s6 = peg$parsetupleStructure();
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s9 = peg$c15;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parseblankSpace();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseblankSpace();
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$currPos;
                      s12 = peg$parsestrings();
                      if (s12 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s13 = peg$c4;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                        if (s13 !== peg$FAILED) {
                          s12 = [s12, s13];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseexpressions();
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s13 = peg$c19;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsestrings();
                            if (s14 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s15 = peg$c19;
                                peg$currPos++;
                              } else {
                                s15 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s15 !== peg$FAILED) {
                                s13 = [s13, s14, s15];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s13 = peg$c21;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s15 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s13 = [s13, s14, s15];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$parsestrings();
                            }
                          }
                        }
                        if (s12 !== peg$FAILED) {
                          s9 = [s9, s10, s11, s12];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c15;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parseblankSpace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parseblankSpace();
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$currPos;
                        s12 = peg$parsestrings();
                        if (s12 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s13 = peg$c4;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s13 !== peg$FAILED) {
                            s12 = [s12, s13];
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseexpressions();
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s13 = peg$c19;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s15 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s13 = [s13, s14, s15];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 === peg$FAILED) {
                              s12 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s13 = peg$c21;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsestrings();
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s15 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s13 = [s13, s14, s15];
                                    s12 = s13;
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              if (s12 === peg$FAILED) {
                                s12 = peg$parsestrings();
                              }
                            }
                          }
                          if (s12 !== peg$FAILED) {
                            s9 = [s9, s10, s11, s12];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c23;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetupleArrayNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetupleDotNotation();
            if (s2 === peg$FAILED) {
              s2 = peg$parsestrings();
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c15;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetupleArrayNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsetupleDotNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsestrings();
                  }
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c15;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetupleArrayNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleDotNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsestrings();
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s4 = peg$c23;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseblankSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c33) {
                    s6 = peg$c33;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s6 = peg$c31;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c32); }
                    }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseblankSpace();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s8 = peg$c17;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c18); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsenestedTuples();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsetupleStructure();
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = [];
                          s11 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s12 = peg$c15;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = [];
                            s14 = peg$parseblankSpace();
                            while (s14 !== peg$FAILED) {
                              s13.push(s14);
                              s14 = peg$parseblankSpace();
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$currPos;
                              s15 = peg$parsestrings();
                              if (s15 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s16 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                                if (s16 !== peg$FAILED) {
                                  s15 = [s15, s16];
                                  s14 = s15;
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                              if (s14 === peg$FAILED) {
                                s14 = null;
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parseexpressions();
                                if (s15 === peg$FAILED) {
                                  s15 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s16 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parsestrings();
                                    if (s17 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 34) {
                                        s18 = peg$c19;
                                        peg$currPos++;
                                      } else {
                                        s18 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s16 = [s16, s17, s18];
                                        s15 = s16;
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s16 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsestrings();
                                      if (s17 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 39) {
                                          s18 = peg$c21;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s16 = [s16, s17, s18];
                                          s15 = s16;
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                    if (s15 === peg$FAILED) {
                                      s15 = peg$parsestrings();
                                    }
                                  }
                                }
                                if (s15 !== peg$FAILED) {
                                  s12 = [s12, s13, s14, s15];
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s12 = peg$c15;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c16); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = [];
                              s14 = peg$parseblankSpace();
                              while (s14 !== peg$FAILED) {
                                s13.push(s14);
                                s14 = peg$parseblankSpace();
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$currPos;
                                s15 = peg$parsestrings();
                                if (s15 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s16 = peg$c4;
                                    peg$currPos++;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s15 = [s15, s16];
                                    s14 = s15;
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                                if (s14 === peg$FAILED) {
                                  s14 = null;
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parseexpressions();
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s16 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsestrings();
                                      if (s17 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s18 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s16 = [s16, s17, s18];
                                          s15 = s16;
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                    if (s15 === peg$FAILED) {
                                      s15 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s16 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s16 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s16 !== peg$FAILED) {
                                        s17 = peg$parsestrings();
                                        if (s17 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s18 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s18 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s18 !== peg$FAILED) {
                                            s16 = [s16, s17, s18];
                                            s15 = s16;
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                      if (s15 === peg$FAILED) {
                                        s15 = peg$parsestrings();
                                      }
                                    }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s12 = [s12, s13, s14, s15];
                                    s11 = s12;
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                              s11 = peg$c23;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c24); }
                            }
                            if (s11 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsemultiLineTuples() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$currPos;
              s8 = peg$parsestrings();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s9 = peg$c4;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetupleArrayNotation();
                if (s8 === peg$FAILED) {
                  s8 = peg$parsetupleDotNotation();
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s9 = peg$c19;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestrings();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s11 = peg$c19;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s9 = peg$c21;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s11 = peg$c21;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseexpressions();
                        }
                      }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parsenewLine();
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$parseblankSpace();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parseblankSpace();
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$currPos;
                    s12 = peg$currPos;
                    s13 = peg$parsestrings();
                    if (s13 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s14 = peg$c4;
                        peg$currPos++;
                      } else {
                        s14 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s14 !== peg$FAILED) {
                        s13 = [s13, s14];
                        s12 = s13;
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = null;
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsetupleArrayNotation();
                      if (s13 === peg$FAILED) {
                        s13 = peg$parsetupleDotNotation();
                        if (s13 === peg$FAILED) {
                          s13 = peg$parseexpressions();
                          if (s13 === peg$FAILED) {
                            s13 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s14 = peg$c19;
                              peg$currPos++;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parsestrings();
                              if (s15 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s16 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s16 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s16 !== peg$FAILED) {
                                  s14 = [s14, s15, s16];
                                  s13 = s14;
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                            if (s13 === peg$FAILED) {
                              s13 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s14 = peg$c21;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parsestrings();
                                if (s15 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s16 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s16 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s14 = [s14, s15, s16];
                                    s13 = s14;
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                              if (s13 === peg$FAILED) {
                                s13 = peg$parsestrings();
                              }
                            }
                          }
                        }
                      }
                      if (s13 !== peg$FAILED) {
                        s12 = [s12, s13];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    if (s11 !== peg$FAILED) {
                      s9 = [s9, s10, s11];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$currPos;
                    s9 = peg$parsenewLine();
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parseblankSpace();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parseblankSpace();
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$currPos;
                        s12 = peg$currPos;
                        s13 = peg$parsestrings();
                        if (s13 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s14 = peg$c4;
                            peg$currPos++;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s14 !== peg$FAILED) {
                            s13 = [s13, s14];
                            s12 = s13;
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                        if (s12 === peg$FAILED) {
                          s12 = null;
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsetupleArrayNotation();
                          if (s13 === peg$FAILED) {
                            s13 = peg$parsetupleDotNotation();
                            if (s13 === peg$FAILED) {
                              s13 = peg$parseexpressions();
                              if (s13 === peg$FAILED) {
                                s13 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s14 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsestrings();
                                  if (s15 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s16 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s14 = [s14, s15, s16];
                                      s13 = s14;
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                                if (s13 === peg$FAILED) {
                                  s13 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s14 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parsestrings();
                                    if (s15 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s16 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s16 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s16 !== peg$FAILED) {
                                        s14 = [s14, s15, s16];
                                        s13 = s14;
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                  if (s13 === peg$FAILED) {
                                    s13 = peg$parsestrings();
                                  }
                                }
                              }
                            }
                          }
                          if (s13 !== peg$FAILED) {
                            s12 = [s12, s13];
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c23;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s8 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetupleArrayNotation();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetupleDotNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsestrings();
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c15;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseblankSpace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetupleArrayNotation();
              if (s7 === peg$FAILED) {
                s7 = peg$parsetupleDotNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsestrings();
                }
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c15;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetupleArrayNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsetupleDotNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsestrings();
                  }
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c23;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseblankSpace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c33) {
                  s6 = peg$c33;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s6 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s6 = peg$c31;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseblankSpace();
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s8 = peg$c17;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c18); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = peg$currPos;
                      s11 = peg$parsestrings();
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s12 = peg$c4;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                        }
                        if (s12 !== peg$FAILED) {
                          s11 = [s11, s12];
                          s10 = s11;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsetupleArrayNotation();
                        if (s11 === peg$FAILED) {
                          s11 = peg$parsetupleDotNotation();
                          if (s11 === peg$FAILED) {
                            s11 = peg$parseexpressions();
                            if (s11 === peg$FAILED) {
                              s11 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s12 = peg$c19;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parsestrings();
                                if (s13 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s14 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s12 = [s12, s13, s14];
                                    s11 = s12;
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                              if (s11 === peg$FAILED) {
                                s11 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s12 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsestrings();
                                  if (s13 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s14 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s12 = [s12, s13, s14];
                                      s11 = s12;
                                    } else {
                                      peg$currPos = s11;
                                      s11 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                                if (s11 === peg$FAILED) {
                                  s11 = peg$parsestrings();
                                }
                              }
                            }
                          }
                        }
                        if (s11 !== peg$FAILED) {
                          s10 = [s10, s11];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$currPos;
                        s12 = peg$parsenewLine();
                        if (s12 !== peg$FAILED) {
                          s13 = [];
                          s14 = peg$parseblankSpace();
                          while (s14 !== peg$FAILED) {
                            s13.push(s14);
                            s14 = peg$parseblankSpace();
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$currPos;
                            s15 = peg$currPos;
                            s16 = peg$parsestrings();
                            if (s16 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s17 = peg$c4;
                                peg$currPos++;
                              } else {
                                s17 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                              if (s17 !== peg$FAILED) {
                                s16 = [s16, s17];
                                s15 = s16;
                              } else {
                                peg$currPos = s15;
                                s15 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s15;
                              s15 = peg$FAILED;
                            }
                            if (s15 === peg$FAILED) {
                              s15 = null;
                            }
                            if (s15 !== peg$FAILED) {
                              s16 = peg$parsetupleArrayNotation();
                              if (s16 === peg$FAILED) {
                                s16 = peg$parsetupleDotNotation();
                                if (s16 === peg$FAILED) {
                                  s16 = peg$parseexpressions();
                                  if (s16 === peg$FAILED) {
                                    s16 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s17 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s17 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parsestrings();
                                      if (s18 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s19 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s19 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s19 !== peg$FAILED) {
                                          s17 = [s17, s18, s19];
                                          s16 = s17;
                                        } else {
                                          peg$currPos = s16;
                                          s16 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$FAILED;
                                    }
                                    if (s16 === peg$FAILED) {
                                      s16 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s17 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s18 = peg$parsestrings();
                                        if (s18 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s19 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s19 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s19 !== peg$FAILED) {
                                            s17 = [s17, s18, s19];
                                            s16 = s17;
                                          } else {
                                            peg$currPos = s16;
                                            s16 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s16;
                                          s16 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$FAILED;
                                      }
                                      if (s16 === peg$FAILED) {
                                        s16 = peg$parsestrings();
                                      }
                                    }
                                  }
                                }
                              }
                              if (s16 !== peg$FAILED) {
                                s15 = [s15, s16];
                                s14 = s15;
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s14;
                              s14 = peg$FAILED;
                            }
                            if (s14 !== peg$FAILED) {
                              s12 = [s12, s13, s14];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 !== peg$FAILED) {
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$currPos;
                            s12 = peg$parsenewLine();
                            if (s12 !== peg$FAILED) {
                              s13 = [];
                              s14 = peg$parseblankSpace();
                              while (s14 !== peg$FAILED) {
                                s13.push(s14);
                                s14 = peg$parseblankSpace();
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$currPos;
                                s15 = peg$currPos;
                                s16 = peg$parsestrings();
                                if (s16 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s17 = peg$c4;
                                    peg$currPos++;
                                  } else {
                                    s17 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                  }
                                  if (s17 !== peg$FAILED) {
                                    s16 = [s16, s17];
                                    s15 = s16;
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                                if (s15 === peg$FAILED) {
                                  s15 = null;
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parsetupleArrayNotation();
                                  if (s16 === peg$FAILED) {
                                    s16 = peg$parsetupleDotNotation();
                                    if (s16 === peg$FAILED) {
                                      s16 = peg$parseexpressions();
                                      if (s16 === peg$FAILED) {
                                        s16 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s17 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s17 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s17 !== peg$FAILED) {
                                          s18 = peg$parsestrings();
                                          if (s18 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 34) {
                                              s19 = peg$c19;
                                              peg$currPos++;
                                            } else {
                                              s19 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                            }
                                            if (s19 !== peg$FAILED) {
                                              s17 = [s17, s18, s19];
                                              s16 = s17;
                                            } else {
                                              peg$currPos = s16;
                                              s16 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s16;
                                            s16 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s16;
                                          s16 = peg$FAILED;
                                        }
                                        if (s16 === peg$FAILED) {
                                          s16 = peg$currPos;
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s17 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s17 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s17 !== peg$FAILED) {
                                            s18 = peg$parsestrings();
                                            if (s18 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 39) {
                                                s19 = peg$c21;
                                                peg$currPos++;
                                              } else {
                                                s19 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                              }
                                              if (s19 !== peg$FAILED) {
                                                s17 = [s17, s18, s19];
                                                s16 = s17;
                                              } else {
                                                peg$currPos = s16;
                                                s16 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s16;
                                              s16 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s16;
                                            s16 = peg$FAILED;
                                          }
                                          if (s16 === peg$FAILED) {
                                            s16 = peg$parsestrings();
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s15 = [s15, s16];
                                    s14 = s15;
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                                if (s14 !== peg$FAILED) {
                                  s12 = [s12, s13, s14];
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          }
                        } else {
                          s10 = peg$FAILED;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s11 = peg$c23;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                          }
                          if (s11 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetupleStructure() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsestrings();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenestedTuples();
      if (s2 === peg$FAILED) {
        s2 = peg$parsetupleDotNotation();
        if (s2 === peg$FAILED) {
          s2 = peg$parseexpressions();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c19;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsestrings();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s5 = peg$c19;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s5 !== peg$FAILED) {
                  s3 = [s3, s4, s5];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 39) {
                s3 = peg$c21;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsestrings();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s5 = peg$c21;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsestrings();
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c15;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseblankSpace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseblankSpace();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            s8 = peg$parsestrings();
            if (s8 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s9 = peg$c4;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsenestedTuples();
              if (s8 === peg$FAILED) {
                s8 = peg$parsetupleDotNotation();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseexpressions();
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s9 = peg$c19;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestrings();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s11 = peg$c19;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s9 = peg$c21;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s11 = peg$c21;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                      }
                    }
                  }
                }
              }
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c15;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseblankSpace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parsestrings();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s9 = peg$c4;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsenestedTuples();
                if (s8 === peg$FAILED) {
                  s8 = peg$parsetupleDotNotation();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseexpressions();
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s9 = peg$c19;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s11 = peg$c19;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s9 = peg$c21;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestrings();
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s11 = peg$c21;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s11 !== peg$FAILED) {
                              s9 = [s9, s10, s11];
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsestrings();
                        }
                      }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenestedTuples() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetupleStructure();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c23;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetupleDotNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsestrings();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c55;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 === peg$FAILED) {
          s3 = peg$parsestrings();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c55;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c56); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseinteger();
            if (s7 === peg$FAILED) {
              s7 = peg$parsestrings();
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c55;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseinteger();
              if (s7 === peg$FAILED) {
                s7 = peg$parsestrings();
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetupleArrayNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parsestrings();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c106;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleArrayNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleArrayIndexWithoutComma();
          if (s3 === peg$FAILED) {
            s3 = peg$parsetupleArrayIndex();
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s4 = peg$c19;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestrings();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s6 = peg$c19;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s4 = peg$c21;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsestrings();
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s6 = peg$c21;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s6 !== peg$FAILED) {
                      s4 = [s4, s5, s6];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$parsestrings();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseexpressions();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseinteger();
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c108;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s7 = peg$c106;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c107); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsetupleArrayNotation();
              if (s8 === peg$FAILED) {
                s8 = peg$parsetupleArrayIndex();
                if (s8 === peg$FAILED) {
                  s8 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s9 = peg$c19;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsestrings();
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s11 = peg$c19;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s11 !== peg$FAILED) {
                        s9 = [s9, s10, s11];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s9 = peg$c21;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestrings();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s11 = peg$c21;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsestrings();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseexpressions();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseinteger();
                        }
                      }
                    }
                  }
                }
              }
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s9 = peg$c108;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s7 = peg$c106;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c107); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetupleArrayNotation();
                if (s8 === peg$FAILED) {
                  s8 = peg$parsetupleArrayIndex();
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s9 = peg$c19;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestrings();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s11 = peg$c19;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s9 = peg$c21;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s11 = peg$c21;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseexpressions();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parseinteger();
                          }
                        }
                      }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s9 = peg$c108;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c109); }
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetupleArrayIndexWithoutComma() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsestrings();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetupleDotNotation();
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c19;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestrings();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c21;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestrings();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c21;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$parsestrings();
            if (s2 === peg$FAILED) {
              s2 = peg$parseexpressions();
              if (s2 === peg$FAILED) {
                s2 = peg$parseinteger();
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseblankSpace();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseblankSpace();
        }
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c15;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseblankSpace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseblankSpace();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parsestrings();
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s10 = peg$c4;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetupleDotNotation();
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s10 = peg$c19;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsestrings();
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s12 = peg$c19;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s10 = peg$c21;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsestrings();
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s12 = peg$c21;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsestrings();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parseexpressions();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parseinteger();
                        }
                      }
                    }
                  }
                }
                if (s9 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8, s9];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseblankSpace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseblankSpace();
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c15;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseblankSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseblankSpace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parsestrings();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s10 = peg$c4;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetupleDotNotation();
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c19;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsestrings();
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s12 = peg$c19;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s10 = peg$c21;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s12 = peg$c21;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsestrings();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parseexpressions();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parseinteger();
                          }
                        }
                      }
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8, s9];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetupleArrayIndex() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsestrings();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c4;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetupleDotNotation();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestrings();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                  s7 = peg$c19;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c21;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestrings();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s7 = peg$c21;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$parsestrings();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseexpressions();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseinteger();
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parseblankSpace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseblankSpace();
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c15;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parseblankSpace();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseblankSpace();
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$currPos;
                  s11 = peg$parsestrings();
                  if (s11 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s12 = peg$c4;
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s12 !== peg$FAILED) {
                      s11 = [s11, s12];
                      s10 = s11;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsetupleDotNotation();
                    if (s11 === peg$FAILED) {
                      s11 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s12 = peg$c19;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsestrings();
                        if (s13 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s14 = peg$c19;
                            peg$currPos++;
                          } else {
                            s14 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s14 !== peg$FAILED) {
                            s12 = [s12, s13, s14];
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                      if (s11 === peg$FAILED) {
                        s11 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s12 = peg$c21;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsestrings();
                          if (s13 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s14 = peg$c21;
                              peg$currPos++;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s14 !== peg$FAILED) {
                              s12 = [s12, s13, s14];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 === peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 === peg$FAILED) {
                            s11 = peg$parseexpressions();
                            if (s11 === peg$FAILED) {
                              s11 = peg$parseinteger();
                            }
                          }
                        }
                      }
                    }
                    if (s11 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10, s11];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parseblankSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseblankSpace();
              }
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c15;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parseblankSpace();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parseblankSpace();
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    s11 = peg$parsestrings();
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s12 = peg$c4;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s12 !== peg$FAILED) {
                        s11 = [s11, s12];
                        s10 = s11;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    if (s10 === peg$FAILED) {
                      s10 = null;
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsetupleDotNotation();
                      if (s11 === peg$FAILED) {
                        s11 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s12 = peg$c19;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsestrings();
                          if (s13 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s14 = peg$c19;
                              peg$currPos++;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s14 !== peg$FAILED) {
                              s12 = [s12, s13, s14];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 === peg$FAILED) {
                          s11 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s12 = peg$c21;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsestrings();
                            if (s13 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s14 = peg$c21;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s14 !== peg$FAILED) {
                                s12 = [s12, s13, s14];
                                s11 = s12;
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                          if (s11 === peg$FAILED) {
                            s11 = peg$parsestrings();
                            if (s11 === peg$FAILED) {
                              s11 = peg$parseexpressions();
                              if (s11 === peg$FAILED) {
                                s11 = peg$parseinteger();
                              }
                            }
                          }
                        }
                      }
                      if (s11 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10, s11];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c23;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsestrings();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s5 = peg$c4;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetupleDotNotation();
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s5 = peg$c19;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestrings();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s7 = peg$c19;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s5 = peg$c21;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsestrings();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s7 = peg$c21;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$parsestrings();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseexpressions();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseinteger();
                    }
                  }
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parseblankSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseblankSpace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parsestrings();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s10 = peg$c4;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetupleDotNotation();
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c19;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsestrings();
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s12 = peg$c19;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s10 = peg$c21;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s12 = peg$c21;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsestrings();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parseexpressions();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parseinteger();
                          }
                        }
                      }
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = [];
                s8 = peg$parseblankSpace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s10 = peg$c4;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsetupleDotNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s10 = peg$c19;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s12 = peg$c19;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s10 = peg$c21;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s12 = peg$c21;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s12 !== peg$FAILED) {
                              s10 = [s10, s11, s12];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsestrings();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parseexpressions();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parseinteger();
                            }
                          }
                        }
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c23;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesingleElementTupleNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parsestrings();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s6 = peg$c4;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetupleArrayNotation();
          if (s5 === peg$FAILED) {
            s5 = peg$parsetupleDotNotation();
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 34) {
                s6 = peg$c19;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c20); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestrings();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s8 = peg$c19;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                  s6 = peg$c21;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestrings();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s8 = peg$c21;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$parsestrings();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsenumbers();
                  }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parseblankSpace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$currPos;
            s8 = peg$parsestrings();
            if (s8 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s9 = peg$c4;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsetupleDotNotation();
              if (s8 === peg$FAILED) {
                s8 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s9 = peg$c19;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsestrings();
                  if (s10 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s11 = peg$c19;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s11 !== peg$FAILED) {
                      s9 = [s9, s10, s11];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s9 = peg$c21;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsestrings();
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s11 = peg$c21;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s11 !== peg$FAILED) {
                        s9 = [s9, s10, s11];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$parsestrings();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsenumbers();
                    }
                  }
                }
              }
              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseblankSpace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parsestrings();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s9 = peg$c4;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetupleDotNotation();
                if (s8 === peg$FAILED) {
                  s8 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s9 = peg$c19;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsestrings();
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s11 = peg$c19;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s11 !== peg$FAILED) {
                        s9 = [s9, s10, s11];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s9 = peg$c21;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestrings();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s11 = peg$c21;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsestrings();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsenumbers();
                      }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseblankSpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c23;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseasTupleNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c29) {
          s3 = peg$c29;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c17;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseasNotation1();
              if (s6 === peg$FAILED) {
                s6 = peg$parseasNotation2();
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseblankSpace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s10 = peg$c15;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    s12 = peg$parseblankSpace();
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$parseblankSpace();
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseasNotation1();
                      if (s12 === peg$FAILED) {
                        s12 = peg$parseasNotation2();
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s10 = peg$c15;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = [];
                      s12 = peg$parseblankSpace();
                      while (s12 !== peg$FAILED) {
                        s11.push(s12);
                        s12 = peg$parseblankSpace();
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseasNotation1();
                        if (s12 === peg$FAILED) {
                          s12 = peg$parseasNotation2();
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c23;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s9 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c29) {
            s3 = peg$c29;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseasNotation1();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = [];
                s9 = peg$parseblankSpace();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseblankSpace();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseasNotation1();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = [];
                  s9 = peg$parseblankSpace();
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseblankSpace();
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseasNotation1();
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetupleArrayNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleDotNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestrings();
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c29) {
              s3 = peg$c29;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseblankSpace();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseasNotation1();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseasDatatypeNotation();
                  if (s5 === peg$FAILED) {
                    s5 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s6 = peg$c19;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsestrings();
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s8 = peg$c19;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s8 !== peg$FAILED) {
                          s6 = [s6, s7, s8];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s6 = peg$c21;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsestrings();
                        if (s7 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s8 = peg$c21;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s8 !== peg$FAILED) {
                            s6 = [s6, s7, s8];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = peg$parsestrings();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parsenumbers();
                        }
                      }
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseasNotation1() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsestrings();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c4;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c31;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseblankSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseblankSpace();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumbers();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseasNotation2() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsestrings();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c29) {
          s3 = peg$c29;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseasTypes();
            if (s5 === peg$FAILED) {
              s5 = peg$parsestrings();
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseasTypes() {
    var s0;

    s0 = peg$parseasBitNotation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseasDatatypeNotation();
      if (s0 === peg$FAILED) {
        s0 = peg$parseasSetNotation();
      }
    }

    return s0;
  }

  function peg$parseasBitNotation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c102) {
      s1 = peg$c102;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c4;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseinteger();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseasDatatypeNotation() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseasDatatype();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsestrings();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c4;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c31;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetrueFalse();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseasDatatype() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c115) {
      s0 = peg$c115;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c117) {
        s0 = peg$c117;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c136) {
          s0 = peg$c136;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
      }
    }

    return s0;
  }

  function peg$parseasSetNotation() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c138) {
      s0 = peg$c138;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c139); }
    }

    return s0;
  }

  function peg$parseisExpressions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c140) {
          s3 = peg$c140;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestrings();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s6 = peg$c4;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseblankSpace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsenumbers();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parsestrings();
                  }
                  if (s8 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c140) {
            s3 = peg$c140;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c141); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseasDatatypeNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parsestrings();
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetupleArrayNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleDotNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestrings();
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c140) {
              s3 = peg$c140;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c141); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseblankSpace();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s5 = peg$c17;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parsestrings();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s8 = peg$c4;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s8 !== peg$FAILED) {
                      s7 = [s7, s8];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsetupleDotNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parseexpressions();
                      if (s7 === peg$FAILED) {
                        s7 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s8 = peg$c19;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsestrings();
                          if (s9 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s10 = peg$c19;
                              peg$currPos++;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s10 !== peg$FAILED) {
                              s8 = [s8, s9, s10];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                        if (s7 === peg$FAILED) {
                          s7 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s8 = peg$c21;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parsestrings();
                            if (s9 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s10 = peg$c21;
                                peg$currPos++;
                              } else {
                                s10 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s10 !== peg$FAILED) {
                                s8 = [s8, s9, s10];
                                s7 = s8;
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsestrings();
                          }
                        }
                      }
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s10 = peg$c15;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parseblankSpace();
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parseblankSpace();
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$parsestrings();
                          if (s13 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                              s14 = peg$c4;
                              peg$currPos++;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                            }
                            if (s14 !== peg$FAILED) {
                              s13 = [s13, s14];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsetupleDotNotation();
                            if (s13 === peg$FAILED) {
                              s13 = peg$parseexpressions();
                              if (s13 === peg$FAILED) {
                                s13 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s14 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsestrings();
                                  if (s15 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s16 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s14 = [s14, s15, s16];
                                      s13 = s14;
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                                if (s13 === peg$FAILED) {
                                  s13 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s14 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parsestrings();
                                    if (s15 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s16 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s16 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s16 !== peg$FAILED) {
                                        s14 = [s14, s15, s16];
                                        s13 = s14;
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                  if (s13 === peg$FAILED) {
                                    s13 = peg$parsestrings();
                                  }
                                }
                              }
                            }
                            if (s13 === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 !== peg$FAILED) {
                              s10 = [s10, s11, s12, s13];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s10 = peg$c15;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = [];
                          s12 = peg$parseblankSpace();
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseblankSpace();
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$currPos;
                            s13 = peg$parsestrings();
                            if (s13 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s14 = peg$c4;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                              if (s14 !== peg$FAILED) {
                                s13 = [s13, s14];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsetupleDotNotation();
                              if (s13 === peg$FAILED) {
                                s13 = peg$parseexpressions();
                                if (s13 === peg$FAILED) {
                                  s13 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s14 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s15 = peg$parsestrings();
                                    if (s15 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 34) {
                                        s16 = peg$c19;
                                        peg$currPos++;
                                      } else {
                                        s16 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                      }
                                      if (s16 !== peg$FAILED) {
                                        s14 = [s14, s15, s16];
                                        s13 = s14;
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                  if (s13 === peg$FAILED) {
                                    s13 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s14 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parsestrings();
                                      if (s15 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 39) {
                                          s16 = peg$c21;
                                          peg$currPos++;
                                        } else {
                                          s16 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                        }
                                        if (s16 !== peg$FAILED) {
                                          s14 = [s14, s15, s16];
                                          s13 = s14;
                                        } else {
                                          peg$currPos = s13;
                                          s13 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                    if (s13 === peg$FAILED) {
                                      s13 = peg$parsestrings();
                                    }
                                  }
                                }
                              }
                              if (s13 === peg$FAILED) {
                                s13 = null;
                              }
                              if (s13 !== peg$FAILED) {
                                s10 = [s10, s11, s12, s13];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s9 = peg$c23;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s9 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c17;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetupleArrayNotation();
            if (s2 === peg$FAILED) {
              s2 = peg$parsetupleDotNotation();
              if (s2 === peg$FAILED) {
                s2 = peg$parsestrings();
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c15;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetupleArrayNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleDotNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsestrings();
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c15;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseblankSpace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsetupleArrayNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsetupleDotNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsestrings();
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s4 = peg$c23;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseblankSpace();
                  if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseblankSpace();
                    }
                  } else {
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c140) {
                      s6 = peg$c140;
                      peg$currPos += 2;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c141); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parseblankSpace();
                      if (s8 !== peg$FAILED) {
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parseblankSpace();
                        }
                      } else {
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s9 = peg$c4;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = [];
                            s11 = peg$parseblankSpace();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parseblankSpace();
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsenumbers();
                              if (s11 === peg$FAILED) {
                                s11 = peg$parsestrings();
                              }
                              if (s11 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s1 = peg$c17;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsetupleArrayNotation();
              if (s2 === peg$FAILED) {
                s2 = peg$parsetupleDotNotation();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsestrings();
                }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c15;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseblankSpace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsetupleArrayNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsetupleDotNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsestrings();
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c15;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseblankSpace();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseblankSpace();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsetupleArrayNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsetupleDotNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsestrings();
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s4 = peg$c23;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parseblankSpace();
                    if (s6 !== peg$FAILED) {
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseblankSpace();
                      }
                    } else {
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c140) {
                        s6 = peg$c140;
                        peg$currPos += 2;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c141); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parseblankSpace();
                        if (s8 !== peg$FAILED) {
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parseblankSpace();
                          }
                        } else {
                          s7 = peg$FAILED;
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseasDatatypeNotation();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsestrings();
                          }
                          if (s8 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c17;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsetupleArrayNotation();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsetupleDotNotation();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsestrings();
                  }
                }
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c15;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parseblankSpace();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseblankSpace();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsetupleArrayNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsetupleDotNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsestrings();
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s5 = peg$c15;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parseblankSpace();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parseblankSpace();
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsetupleArrayNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsetupleDotNotation();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsestrings();
                          }
                        }
                        if (s7 !== peg$FAILED) {
                          s5 = [s5, s6, s7];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s4 = peg$c23;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = [];
                      s6 = peg$parseblankSpace();
                      if (s6 !== peg$FAILED) {
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parseblankSpace();
                        }
                      } else {
                        s5 = peg$FAILED;
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c140) {
                          s6 = peg$c140;
                          peg$currPos += 2;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c141); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parseblankSpace();
                          if (s8 !== peg$FAILED) {
                            while (s8 !== peg$FAILED) {
                              s7.push(s8);
                              s8 = peg$parseblankSpace();
                            }
                          } else {
                            s7 = peg$FAILED;
                          }
                          if (s7 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                              s8 = peg$c17;
                              peg$currPos++;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c18); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$currPos;
                              s10 = peg$parsestrings();
                              if (s10 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s11 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s11 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                                if (s11 !== peg$FAILED) {
                                  s10 = [s10, s11];
                                  s9 = s10;
                                } else {
                                  peg$currPos = s9;
                                  s9 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                              if (s9 !== peg$FAILED) {
                                s10 = peg$parsetupleDotNotation();
                                if (s10 === peg$FAILED) {
                                  s10 = peg$parseexpressions();
                                  if (s10 === peg$FAILED) {
                                    s10 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s11 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s11 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s11 !== peg$FAILED) {
                                      s12 = peg$parsestrings();
                                      if (s12 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s13 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s13 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s13 !== peg$FAILED) {
                                          s11 = [s11, s12, s13];
                                          s10 = s11;
                                        } else {
                                          peg$currPos = s10;
                                          s10 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s10;
                                        s10 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                    if (s10 === peg$FAILED) {
                                      s10 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s11 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s11 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s11 !== peg$FAILED) {
                                        s12 = peg$parsestrings();
                                        if (s12 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s13 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s13 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s13 !== peg$FAILED) {
                                            s11 = [s11, s12, s13];
                                            s10 = s11;
                                          } else {
                                            peg$currPos = s10;
                                            s10 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s10;
                                          s10 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s10;
                                        s10 = peg$FAILED;
                                      }
                                      if (s10 === peg$FAILED) {
                                        s10 = peg$parsestrings();
                                      }
                                    }
                                  }
                                }
                                if (s10 === peg$FAILED) {
                                  s10 = null;
                                }
                                if (s10 !== peg$FAILED) {
                                  s11 = [];
                                  s12 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                    s13 = peg$c15;
                                    peg$currPos++;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s14 = [];
                                    s15 = peg$parseblankSpace();
                                    while (s15 !== peg$FAILED) {
                                      s14.push(s15);
                                      s15 = peg$parseblankSpace();
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$currPos;
                                      s16 = peg$parsestrings();
                                      if (s16 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 58) {
                                          s17 = peg$c4;
                                          peg$currPos++;
                                        } else {
                                          s17 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                        }
                                        if (s17 !== peg$FAILED) {
                                          s16 = [s16, s17];
                                          s15 = s16;
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                      if (s15 !== peg$FAILED) {
                                        s16 = peg$parsetupleDotNotation();
                                        if (s16 === peg$FAILED) {
                                          s16 = peg$parseexpressions();
                                          if (s16 === peg$FAILED) {
                                            s16 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 34) {
                                              s17 = peg$c19;
                                              peg$currPos++;
                                            } else {
                                              s17 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                            }
                                            if (s17 !== peg$FAILED) {
                                              s18 = peg$parsestrings();
                                              if (s18 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 34) {
                                                  s19 = peg$c19;
                                                  peg$currPos++;
                                                } else {
                                                  s19 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                                }
                                                if (s19 !== peg$FAILED) {
                                                  s17 = [s17, s18, s19];
                                                  s16 = s17;
                                                } else {
                                                  peg$currPos = s16;
                                                  s16 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s16;
                                                s16 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s16;
                                              s16 = peg$FAILED;
                                            }
                                            if (s16 === peg$FAILED) {
                                              s16 = peg$currPos;
                                              if (input.charCodeAt(peg$currPos) === 39) {
                                                s17 = peg$c21;
                                                peg$currPos++;
                                              } else {
                                                s17 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                              }
                                              if (s17 !== peg$FAILED) {
                                                s18 = peg$parsestrings();
                                                if (s18 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 39) {
                                                    s19 = peg$c21;
                                                    peg$currPos++;
                                                  } else {
                                                    s19 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                                  }
                                                  if (s19 !== peg$FAILED) {
                                                    s17 = [s17, s18, s19];
                                                    s16 = s17;
                                                  } else {
                                                    peg$currPos = s16;
                                                    s16 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s16;
                                                  s16 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s16;
                                                s16 = peg$FAILED;
                                              }
                                              if (s16 === peg$FAILED) {
                                                s16 = peg$parsestrings();
                                              }
                                            }
                                          }
                                        }
                                        if (s16 === peg$FAILED) {
                                          s16 = null;
                                        }
                                        if (s16 !== peg$FAILED) {
                                          s13 = [s13, s14, s15, s16];
                                          s12 = s13;
                                        } else {
                                          peg$currPos = s12;
                                          s12 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s12;
                                    s12 = peg$FAILED;
                                  }
                                  while (s12 !== peg$FAILED) {
                                    s11.push(s12);
                                    s12 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                      s13 = peg$c15;
                                      peg$currPos++;
                                    } else {
                                      s13 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                    }
                                    if (s13 !== peg$FAILED) {
                                      s14 = [];
                                      s15 = peg$parseblankSpace();
                                      while (s15 !== peg$FAILED) {
                                        s14.push(s15);
                                        s15 = peg$parseblankSpace();
                                      }
                                      if (s14 !== peg$FAILED) {
                                        s15 = peg$currPos;
                                        s16 = peg$parsestrings();
                                        if (s16 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 58) {
                                            s17 = peg$c4;
                                            peg$currPos++;
                                          } else {
                                            s17 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                          }
                                          if (s17 !== peg$FAILED) {
                                            s16 = [s16, s17];
                                            s15 = s16;
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                        if (s15 !== peg$FAILED) {
                                          s16 = peg$parsetupleDotNotation();
                                          if (s16 === peg$FAILED) {
                                            s16 = peg$parseexpressions();
                                            if (s16 === peg$FAILED) {
                                              s16 = peg$currPos;
                                              if (input.charCodeAt(peg$currPos) === 34) {
                                                s17 = peg$c19;
                                                peg$currPos++;
                                              } else {
                                                s17 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                              }
                                              if (s17 !== peg$FAILED) {
                                                s18 = peg$parsestrings();
                                                if (s18 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 34) {
                                                    s19 = peg$c19;
                                                    peg$currPos++;
                                                  } else {
                                                    s19 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                                  }
                                                  if (s19 !== peg$FAILED) {
                                                    s17 = [s17, s18, s19];
                                                    s16 = s17;
                                                  } else {
                                                    peg$currPos = s16;
                                                    s16 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s16;
                                                  s16 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s16;
                                                s16 = peg$FAILED;
                                              }
                                              if (s16 === peg$FAILED) {
                                                s16 = peg$currPos;
                                                if (input.charCodeAt(peg$currPos) === 39) {
                                                  s17 = peg$c21;
                                                  peg$currPos++;
                                                } else {
                                                  s17 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                                }
                                                if (s17 !== peg$FAILED) {
                                                  s18 = peg$parsestrings();
                                                  if (s18 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 39) {
                                                      s19 = peg$c21;
                                                      peg$currPos++;
                                                    } else {
                                                      s19 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                                    }
                                                    if (s19 !== peg$FAILED) {
                                                      s17 = [s17, s18, s19];
                                                      s16 = s17;
                                                    } else {
                                                      peg$currPos = s16;
                                                      s16 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s16;
                                                    s16 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s16;
                                                  s16 = peg$FAILED;
                                                }
                                                if (s16 === peg$FAILED) {
                                                  s16 = peg$parsestrings();
                                                }
                                              }
                                            }
                                          }
                                          if (s16 === peg$FAILED) {
                                            s16 = null;
                                          }
                                          if (s16 !== peg$FAILED) {
                                            s13 = [s13, s14, s15, s16];
                                            s12 = s13;
                                          } else {
                                            peg$currPos = s12;
                                            s12 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s12;
                                          s12 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s12;
                                        s12 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s12;
                                      s12 = peg$FAILED;
                                    }
                                  }
                                  if (s11 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s12 = peg$c23;
                                      peg$currPos++;
                                    } else {
                                      s12 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                    }
                                    if (s12 !== peg$FAILED) {
                                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebitSelectionNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parserangeNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c142;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseblankSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseblankSpace();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = peg$parsestrings();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s7 = peg$c4;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetupleArrayNotation();
            if (s6 === peg$FAILED) {
              s6 = peg$parsetupleDotNotation();
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s7 = peg$c19;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsestrings();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s9 = peg$c19;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s7 = peg$c21;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsestrings();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s9 = peg$c21;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$parsestrings();
                    if (s6 === peg$FAILED) {
                      s6 = peg$parsenumbers();
                    }
                  }
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = [];
            s8 = peg$parseblankSpace();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseblankSpace();
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              s9 = peg$parsestrings();
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s10 = peg$c4;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetupleDotNotation();
                if (s9 === peg$FAILED) {
                  s9 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s10 = peg$c19;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsestrings();
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s12 = peg$c19;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s12 !== peg$FAILED) {
                        s10 = [s10, s11, s12];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s10 = peg$c21;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsestrings();
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s12 = peg$c21;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsestrings();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsenumbers();
                      }
                    }
                  }
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = [];
              s8 = peg$parseblankSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseblankSpace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parsestrings();
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s10 = peg$c4;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetupleDotNotation();
                  if (s9 === peg$FAILED) {
                    s9 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c19;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsestrings();
                      if (s11 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s12 = peg$c19;
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s10 = peg$c21;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s12 = peg$c21;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsestrings();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsenumbers();
                        }
                      }
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c144;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c145); }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c142;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$parsestrings();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s6 = peg$c4;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetupleArrayNotation();
            if (s5 === peg$FAILED) {
              s5 = peg$parsetupleDotNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s6 = peg$c19;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestrings();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c19;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s6 = peg$c21;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsestrings();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s8 = peg$c21;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s8 !== peg$FAILED) {
                        s6 = [s6, s7, s8];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsestrings();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parsenumbers();
                    }
                  }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c146) {
              s4 = peg$c146;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c147); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parseblankSpace();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c123) {
                  s6 = peg$c123;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c124); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = [];
                s6 = peg$parseblankSpace();
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseblankSpace();
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c148) {
                    s6 = peg$c148;
                    peg$currPos += 5;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c149); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parseblankSpace();
                    if (s8 !== peg$FAILED) {
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parseblankSpace();
                      }
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      s5 = [s5, s6, s7];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$currPos;
              s7 = peg$parsestrings();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s8 = peg$c4;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetupleArrayNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsetupleDotNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c19;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestrings();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s8 = peg$c21;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsestrings();
                        if (s9 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s10 = peg$c21;
                            peg$currPos++;
                          } else {
                            s10 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s10 !== peg$FAILED) {
                            s8 = [s8, s9, s10];
                            s7 = s8;
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsestrings();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsenumbers();
                        }
                      }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c144;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c145); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            s5 = peg$parsestrings();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s6 = peg$c4;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetupleArrayNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parsetupleDotNotation();
                if (s5 === peg$FAILED) {
                  s5 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s6 = peg$c19;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsestrings();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s8 = peg$c19;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s8 !== peg$FAILED) {
                        s6 = [s6, s7, s8];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s6 = peg$c21;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsestrings();
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s8 = peg$c21;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s8 !== peg$FAILED) {
                          s6 = [s6, s7, s8];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = peg$parsestrings();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parsenumbers();
                      }
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsestrings();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s9 = peg$c4;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetupleDotNotation();
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s9 = peg$c19;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestrings();
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s11 = peg$c19;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s9 = peg$c21;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s11 = peg$c21;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsenumbers();
                        }
                      }
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s6 = [s6, s7, s8];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parsestrings();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s9 = peg$c4;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetupleDotNotation();
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s9 = peg$c19;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s11 = peg$c19;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s9 = peg$c21;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestrings();
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s11 = peg$c21;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s11 !== peg$FAILED) {
                              s9 = [s9, s10, s11];
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsestrings();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsenumbers();
                          }
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseblankSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s6 = peg$c23;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s7 = peg$c142;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c143); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parseblankSpace();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseblankSpace();
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$currPos;
                        s10 = peg$currPos;
                        s11 = peg$parsestrings();
                        if (s11 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s12 = peg$c4;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c5); }
                          }
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsetupleArrayNotation();
                          if (s11 === peg$FAILED) {
                            s11 = peg$parsetupleDotNotation();
                            if (s11 === peg$FAILED) {
                              s11 = peg$currPos;
                              if (input.charCodeAt(peg$currPos) === 34) {
                                s12 = peg$c19;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c20); }
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parsestrings();
                                if (s13 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s14 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s14 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s12 = [s12, s13, s14];
                                    s11 = s12;
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                              if (s11 === peg$FAILED) {
                                s11 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 39) {
                                  s12 = peg$c21;
                                  peg$currPos++;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsestrings();
                                  if (s13 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s14 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s12 = [s12, s13, s14];
                                      s11 = s12;
                                    } else {
                                      peg$currPos = s11;
                                      s11 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                                if (s11 === peg$FAILED) {
                                  s11 = peg$parsestrings();
                                  if (s11 === peg$FAILED) {
                                    s11 = peg$parsenumbers();
                                  }
                                }
                              }
                            }
                          }
                          if (s11 !== peg$FAILED) {
                            s10 = [s10, s11];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = [];
                          s11 = peg$currPos;
                          s12 = [];
                          s13 = peg$parseblankSpace();
                          while (s13 !== peg$FAILED) {
                            s12.push(s13);
                            s13 = peg$parseblankSpace();
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$currPos;
                            s14 = peg$parsestrings();
                            if (s14 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s15 = peg$c4;
                                peg$currPos++;
                              } else {
                                s15 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                              if (s15 !== peg$FAILED) {
                                s14 = [s14, s15];
                                s13 = s14;
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                            if (s13 === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsetupleDotNotation();
                              if (s14 === peg$FAILED) {
                                s14 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s15 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parsestrings();
                                  if (s16 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s17 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s17 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s15 = [s15, s16, s17];
                                      s14 = s15;
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                                if (s14 === peg$FAILED) {
                                  s14 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s15 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parsestrings();
                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s17 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s15 = [s15, s16, s17];
                                        s14 = s15;
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                  if (s14 === peg$FAILED) {
                                    s14 = peg$parsestrings();
                                    if (s14 === peg$FAILED) {
                                      s14 = peg$parsenumbers();
                                    }
                                  }
                                }
                              }
                              if (s14 !== peg$FAILED) {
                                s12 = [s12, s13, s14];
                                s11 = s12;
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$currPos;
                            s12 = [];
                            s13 = peg$parseblankSpace();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseblankSpace();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$currPos;
                              s14 = peg$parsestrings();
                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s15 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                                if (s15 !== peg$FAILED) {
                                  s14 = [s14, s15];
                                  s13 = s14;
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s13;
                                s13 = peg$FAILED;
                              }
                              if (s13 === peg$FAILED) {
                                s13 = null;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parsetupleDotNotation();
                                if (s14 === peg$FAILED) {
                                  s14 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 34) {
                                    s15 = peg$c19;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parsestrings();
                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 34) {
                                        s17 = peg$c19;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s15 = [s15, s16, s17];
                                        s14 = s15;
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                  if (s14 === peg$FAILED) {
                                    s14 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 39) {
                                      s15 = peg$c21;
                                      peg$currPos++;
                                    } else {
                                      s15 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s15 !== peg$FAILED) {
                                      s16 = peg$parsestrings();
                                      if (s16 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 39) {
                                          s17 = peg$c21;
                                          peg$currPos++;
                                        } else {
                                          s17 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                        }
                                        if (s17 !== peg$FAILED) {
                                          s15 = [s15, s16, s17];
                                          s14 = s15;
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                    if (s14 === peg$FAILED) {
                                      s14 = peg$parsestrings();
                                      if (s14 === peg$FAILED) {
                                        s14 = peg$parsenumbers();
                                      }
                                    }
                                  }
                                }
                                if (s14 !== peg$FAILED) {
                                  s12 = [s12, s13, s14];
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = [];
                            s12 = peg$parseblankSpace();
                            while (s12 !== peg$FAILED) {
                              s11.push(s12);
                              s12 = peg$parseblankSpace();
                            }
                            if (s11 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s12 = peg$c144;
                                peg$currPos++;
                              } else {
                                s12 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c145); }
                              }
                              if (s12 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c17;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseblankSpace();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              s5 = peg$parsestrings();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s6 = peg$c4;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsetupleArrayNotation();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsetupleDotNotation();
                  if (s5 === peg$FAILED) {
                    s5 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s6 = peg$c19;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsestrings();
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s8 = peg$c19;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s8 !== peg$FAILED) {
                          s6 = [s6, s7, s8];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 39) {
                        s6 = peg$c21;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsestrings();
                        if (s7 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s8 = peg$c21;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s8 !== peg$FAILED) {
                            s6 = [s6, s7, s8];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                      if (s5 === peg$FAILED) {
                        s5 = peg$parsestrings();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parsenumbers();
                        }
                      }
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$currPos;
                s6 = [];
                s7 = peg$parseblankSpace();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parsestrings();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s9 = peg$c4;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsetupleDotNotation();
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s9 = peg$c19;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsestrings();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 34) {
                            s11 = peg$c19;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c20); }
                          }
                          if (s11 !== peg$FAILED) {
                            s9 = [s9, s10, s11];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                      if (s8 === peg$FAILED) {
                        s8 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s9 = peg$c21;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestrings();
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 39) {
                              s11 = peg$c21;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s11 !== peg$FAILED) {
                              s9 = [s9, s10, s11];
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsestrings();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsenumbers();
                          }
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s6 = [s6, s7, s8];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$currPos;
                  s6 = [];
                  s7 = peg$parseblankSpace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parsestrings();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s9 = peg$c4;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsetupleDotNotation();
                      if (s8 === peg$FAILED) {
                        s8 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s9 = peg$c19;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsestrings();
                          if (s10 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 34) {
                              s11 = peg$c19;
                              peg$currPos++;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c20); }
                            }
                            if (s11 !== peg$FAILED) {
                              s9 = [s9, s10, s11];
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                        if (s8 === peg$FAILED) {
                          s8 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 39) {
                            s9 = peg$c21;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parsestrings();
                            if (s10 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 39) {
                                s11 = peg$c21;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                              }
                              if (s11 !== peg$FAILED) {
                                s9 = [s9, s10, s11];
                                s8 = s9;
                              } else {
                                peg$currPos = s8;
                                s8 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsestrings();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parsenumbers();
                            }
                          }
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        s6 = [s6, s7, s8];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                }
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseblankSpace();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseblankSpace();
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s6 = peg$c23;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 123) {
                        s7 = peg$c142;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c143); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parseblankSpace();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parseblankSpace();
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$currPos;
                          s10 = peg$currPos;
                          s11 = peg$parsestrings();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                              s12 = peg$c4;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c5); }
                            }
                            if (s12 !== peg$FAILED) {
                              s11 = [s11, s12];
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                          if (s10 === peg$FAILED) {
                            s10 = null;
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsetupleArrayNotation();
                            if (s11 === peg$FAILED) {
                              s11 = peg$parsetupleDotNotation();
                              if (s11 === peg$FAILED) {
                                s11 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 34) {
                                  s12 = peg$c19;
                                  peg$currPos++;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsestrings();
                                  if (s13 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s14 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s12 = [s12, s13, s14];
                                      s11 = s12;
                                    } else {
                                      peg$currPos = s11;
                                      s11 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                                if (s11 === peg$FAILED) {
                                  s11 = peg$currPos;
                                  if (input.charCodeAt(peg$currPos) === 39) {
                                    s12 = peg$c21;
                                    peg$currPos++;
                                  } else {
                                    s12 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                  }
                                  if (s12 !== peg$FAILED) {
                                    s13 = peg$parsestrings();
                                    if (s13 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s14 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s14 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s14 !== peg$FAILED) {
                                        s12 = [s12, s13, s14];
                                        s11 = s12;
                                      } else {
                                        peg$currPos = s11;
                                        s11 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s11;
                                      s11 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s11;
                                    s11 = peg$FAILED;
                                  }
                                  if (s11 === peg$FAILED) {
                                    s11 = peg$parsestrings();
                                    if (s11 === peg$FAILED) {
                                      s11 = peg$parsenumbers();
                                    }
                                  }
                                }
                              }
                            }
                            if (s11 !== peg$FAILED) {
                              s10 = [s10, s11];
                              s9 = s10;
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                          if (s9 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c146) {
                              s10 = peg$c146;
                              peg$currPos += 2;
                            } else {
                              s10 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c147); }
                            }
                            if (s10 === peg$FAILED) {
                              s10 = peg$currPos;
                              s11 = [];
                              s12 = peg$parseblankSpace();
                              if (s12 !== peg$FAILED) {
                                while (s12 !== peg$FAILED) {
                                  s11.push(s12);
                                  s12 = peg$parseblankSpace();
                                }
                              } else {
                                s11 = peg$FAILED;
                              }
                              if (s11 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c123) {
                                  s12 = peg$c123;
                                  peg$currPos += 2;
                                } else {
                                  s12 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = [];
                                  s14 = peg$parseblankSpace();
                                  if (s14 !== peg$FAILED) {
                                    while (s14 !== peg$FAILED) {
                                      s13.push(s14);
                                      s14 = peg$parseblankSpace();
                                    }
                                  } else {
                                    s13 = peg$FAILED;
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s11 = [s11, s12, s13];
                                    s10 = s11;
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                              if (s10 === peg$FAILED) {
                                s10 = peg$currPos;
                                s11 = [];
                                s12 = peg$parseblankSpace();
                                if (s12 !== peg$FAILED) {
                                  while (s12 !== peg$FAILED) {
                                    s11.push(s12);
                                    s12 = peg$parseblankSpace();
                                  }
                                } else {
                                  s11 = peg$FAILED;
                                }
                                if (s11 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c148) {
                                    s12 = peg$c148;
                                    peg$currPos += 5;
                                  } else {
                                    s12 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c149); }
                                  }
                                  if (s12 !== peg$FAILED) {
                                    s13 = [];
                                    s14 = peg$parseblankSpace();
                                    if (s14 !== peg$FAILED) {
                                      while (s14 !== peg$FAILED) {
                                        s13.push(s14);
                                        s14 = peg$parseblankSpace();
                                      }
                                    } else {
                                      s13 = peg$FAILED;
                                    }
                                    if (s13 !== peg$FAILED) {
                                      s11 = [s11, s12, s13];
                                      s10 = s11;
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s10;
                                  s10 = peg$FAILED;
                                }
                              }
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$currPos;
                              s12 = peg$currPos;
                              s13 = peg$parsestrings();
                              if (s13 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s14 = peg$c4;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s13 = [s13, s14];
                                  s12 = s13;
                                } else {
                                  peg$currPos = s12;
                                  s12 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                              if (s12 === peg$FAILED) {
                                s12 = null;
                              }
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parsetupleArrayNotation();
                                if (s13 === peg$FAILED) {
                                  s13 = peg$parsetupleDotNotation();
                                  if (s13 === peg$FAILED) {
                                    s13 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 34) {
                                      s14 = peg$c19;
                                      peg$currPos++;
                                    } else {
                                      s14 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parsestrings();
                                      if (s15 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s16 = peg$c19;
                                          peg$currPos++;
                                        } else {
                                          s16 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                                        }
                                        if (s16 !== peg$FAILED) {
                                          s14 = [s14, s15, s16];
                                          s13 = s14;
                                        } else {
                                          peg$currPos = s13;
                                          s13 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                    if (s13 === peg$FAILED) {
                                      s13 = peg$currPos;
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s14 = peg$c21;
                                        peg$currPos++;
                                      } else {
                                        s14 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                      }
                                      if (s14 !== peg$FAILED) {
                                        s15 = peg$parsestrings();
                                        if (s15 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 39) {
                                            s16 = peg$c21;
                                            peg$currPos++;
                                          } else {
                                            s16 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                          }
                                          if (s16 !== peg$FAILED) {
                                            s14 = [s14, s15, s16];
                                            s13 = s14;
                                          } else {
                                            peg$currPos = s13;
                                            s13 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s13;
                                          s13 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s13;
                                        s13 = peg$FAILED;
                                      }
                                      if (s13 === peg$FAILED) {
                                        s13 = peg$parsestrings();
                                        if (s13 === peg$FAILED) {
                                          s13 = peg$parsenumbers();
                                        }
                                      }
                                    }
                                  }
                                }
                                if (s13 !== peg$FAILED) {
                                  s12 = [s12, s13];
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = [];
                                s13 = peg$parseblankSpace();
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parseblankSpace();
                                }
                                if (s12 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 125) {
                                    s13 = peg$c144;
                                    peg$currPos++;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebitSelectionAssignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebitSelectionNotation();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserangeBoundNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
        if (s1 === peg$FAILED) {
          s1 = peg$parseinteger();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c146) {
        s2 = peg$c146;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseblankSpace();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseblankSpace();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c123) {
            s4 = peg$c123;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c124); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseblankSpace();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseblankSpace();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseblankSpace();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c148) {
              s4 = peg$c148;
              peg$currPos += 5;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c149); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseblankSpace();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleArrayNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleDotNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestrings();
            if (s3 === peg$FAILED) {
              s3 = peg$parseinteger();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetupleArrayNotation();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetupleDotNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsestrings();
            if (s2 === peg$FAILED) {
              s2 = peg$parseinteger();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c146) {
            s3 = peg$c146;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c123) {
                s5 = peg$c123;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parseblankSpace();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c148) {
                  s5 = peg$c148;
                  peg$currPos += 5;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c149); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseblankSpace();
                  if (s7 !== peg$FAILED) {
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseblankSpace();
                    }
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetupleArrayNotation();
            if (s4 === peg$FAILED) {
              s4 = peg$parsetupleDotNotation();
              if (s4 === peg$FAILED) {
                s4 = peg$parsestrings();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseinteger();
                }
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c23;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserangeUnboundNotation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
        if (s1 === peg$FAILED) {
          s1 = peg$parseinteger();
        }
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c146) {
        s2 = peg$c146;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseblankSpace();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseblankSpace();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c123) {
            s4 = peg$c123;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c124); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseblankSpace();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          s4 = peg$parseblankSpace();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseblankSpace();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c148) {
              s4 = peg$c148;
              peg$currPos += 5;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c149); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseblankSpace();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleArrayNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleDotNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestrings();
            if (s3 === peg$FAILED) {
              s3 = peg$parseinteger();
            }
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetupleArrayNotation();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetupleDotNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsestrings();
            if (s2 === peg$FAILED) {
              s2 = peg$parseinteger();
            }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c146) {
            s3 = peg$c146;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c123) {
                s5 = peg$c123;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = [];
              s5 = peg$parseblankSpace();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c148) {
                  s5 = peg$c148;
                  peg$currPos += 5;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c149); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parseblankSpace();
                  if (s7 !== peg$FAILED) {
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parseblankSpace();
                    }
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetupleArrayNotation();
            if (s4 === peg$FAILED) {
              s4 = peg$parsetupleDotNotation();
              if (s4 === peg$FAILED) {
                s4 = peg$parsestrings();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseinteger();
                }
              }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parseblankSpace();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c125) {
                  s7 = peg$c125;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c126); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseblankSpace();
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseblankSpace();
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsetupleArrayNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsetupleDotNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsestrings();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parseinteger();
                        }
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c23;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserangeNotation() {
    var s0;

    s0 = peg$parserangeBoundNotation();
    if (s0 === peg$FAILED) {
      s0 = peg$parserangeUnboundNotation();
    }

    return s0;
  }

  function peg$parserangeAccess() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c106;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleArrayNotation();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetupleDotNotation();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestrings();
            if (s3 === peg$FAILED) {
              s3 = peg$parseinteger();
            }
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c146) {
            s4 = peg$c146;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parseblankSpace();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c123) {
                s6 = peg$c123;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseblankSpace();
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseblankSpace();
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parseblankSpace();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c148) {
                  s6 = peg$c148;
                  peg$currPos += 5;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c149); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetupleArrayNotation();
            if (s5 === peg$FAILED) {
              s5 = peg$parsetupleDotNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parsestrings();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseinteger();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c108;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c109); }
              }
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserangeAssignment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsetupleArrayNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleDotNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestrings();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseblankSpace();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserangeAccess();
            if (s5 === peg$FAILED) {
              s5 = peg$parserangeUnboundNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parserangeNotation();
              }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c31;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserangeExpressions();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserangeExpressions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parserangeNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleDotNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
          if (s1 === peg$FAILED) {
            s1 = peg$parseinteger();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoperator();
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c150) {
            s3 = peg$c150;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c151); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c152) {
              s3 = peg$c152;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c153); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c154) {
                s3 = peg$c154;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c155); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c156) {
                  s3 = peg$c156;
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c157); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c121) {
                    s3 = peg$c121;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c122); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c119) {
                      s3 = peg$c119;
                      peg$currPos += 9;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c120); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserangeNotation();
            if (s5 === peg$FAILED) {
              s5 = peg$parsetupleArrayNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parsetupleDotNotation();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsestrings();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseinteger();
                  }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c150) {
                  s7 = peg$c150;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c151); }
                }
                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c152) {
                    s7 = peg$c152;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c153); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c154) {
                      s7 = peg$c154;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c155); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c156) {
                        s7 = peg$c156;
                        peg$currPos += 3;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c157); }
                      }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseblankSpace();
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseblankSpace();
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parserangeNotation();
                    if (s9 === peg$FAILED) {
                      s9 = peg$parsetupleArrayNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsetupleDotNotation();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsestrings();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parseinteger();
                          }
                        }
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parserangeNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleArrayNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleDotNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestrings();
            if (s1 === peg$FAILED) {
              s1 = peg$parseinteger();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseblankSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseblankSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c150) {
            s3 = peg$c150;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c151); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c152) {
              s3 = peg$c152;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c153); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c154) {
                s3 = peg$c154;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c155); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c156) {
                  s3 = peg$c156;
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c157); }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserangeNotation();
              if (s5 === peg$FAILED) {
                s5 = peg$parsetupleArrayNotation();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsetupleDotNotation();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsestrings();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseinteger();
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseoperator();
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c150) {
                      s7 = peg$c150;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c151); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c152) {
                        s7 = peg$c152;
                        peg$currPos += 3;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c153); }
                      }
                      if (s7 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c154) {
                          s7 = peg$c154;
                          peg$currPos += 2;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c155); }
                        }
                        if (s7 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c156) {
                            s7 = peg$c156;
                            peg$currPos += 3;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c157); }
                          }
                          if (s7 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c121) {
                              s7 = peg$c121;
                              peg$currPos += 5;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c122); }
                            }
                            if (s7 === peg$FAILED) {
                              if (input.substr(peg$currPos, 9) === peg$c119) {
                                s7 = peg$c119;
                                peg$currPos += 9;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c120); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseblankSpace();
                    if (s9 !== peg$FAILED) {
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseblankSpace();
                      }
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parserangeNotation();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsetupleArrayNotation();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parsetupleDotNotation();
                          if (s9 === peg$FAILED) {
                            s9 = peg$parsestrings();
                            if (s9 === peg$FAILED) {
                              s9 = peg$parseinteger();
                            }
                          }
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parserangeNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleArrayNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsetupleDotNotation();
            if (s1 === peg$FAILED) {
              s1 = peg$parsestrings();
              if (s1 === peg$FAILED) {
                s1 = peg$parseinteger();
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseblankSpace();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseblankSpace();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseoperator();
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c150) {
                s3 = peg$c150;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c151); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c152) {
                  s3 = peg$c152;
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c154) {
                    s3 = peg$c154;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c156) {
                      s3 = peg$c156;
                      peg$currPos += 3;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c157); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c121) {
                        s3 = peg$c121;
                        peg$currPos += 5;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c122); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 9) === peg$c119) {
                          s3 = peg$c119;
                          peg$currPos += 9;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c120); }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseblankSpace();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseblankSpace();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parserangeNotation();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsetupleArrayNotation();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsetupleDotNotation();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parsestrings();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseinteger();
                      }
                    }
                  }
                }
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsemultiLineExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseexpressions();
    if (s1 === peg$FAILED) {
      s1 = peg$parsestrings();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenumbers();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenewLine();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$parseblankSpace();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseblankSpace();
        }
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s6 = peg$c158;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c159); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseblankSpace();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseexpressions();
              if (s8 === peg$FAILED) {
                s8 = peg$parsestrings();
                if (s8 === peg$FAILED) {
                  s8 = peg$parsenumbers();
                }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsenewLine();
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                if (s9 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8, s9];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parseblankSpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s6 = peg$c158;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c159); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseblankSpace();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexpressions();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parsestrings();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsenumbers();
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenewLine();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8, s9];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestart();
          if (s4 === peg$FAILED) {
            s4 = peg$parseEOS();
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesingleElementTupleNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parseexpressions();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
          if (s1 === peg$FAILED) {
            s1 = peg$parsenumbers();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenewLine();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseblankSpace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseblankSpace();
          }
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c134) {
              s6 = peg$c134;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c135); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseblankSpace();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsesingleElementTupleNotation();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseexpressions();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parsestrings();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsenumbers();
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsenewLine();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8, s9];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parseblankSpace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c134) {
                  s6 = peg$c134;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c135); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseblankSpace();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesingleElementTupleNotation();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseexpressions();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsenumbers();
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenewLine();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestart();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEOS();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexpressions();
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
          if (s1 === peg$FAILED) {
            s1 = peg$parsenumbers();
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsenewLine();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parseblankSpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c160;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c161); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseblankSpace();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseexpressions();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parsestrings();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsenumbers();
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenewLine();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8, s9];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = [];
                s6 = peg$parseblankSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s6 = peg$c160;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c161); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseblankSpace();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseexpressions();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsenumbers();
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsenewLine();
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          s5 = [s5, s6, s7, s8, s9];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsestart();
              if (s4 === peg$FAILED) {
                s4 = peg$parseEOS();
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsesingleElementTupleNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parseexpressions();
            if (s1 === peg$FAILED) {
              s1 = peg$parsestrings();
              if (s1 === peg$FAILED) {
                s1 = peg$parsenumbers();
              }
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsenewLine();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parseblankSpace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c162) {
                  s6 = peg$c162;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c163); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseblankSpace();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsesingleElementTupleNotation();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseexpressions();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsenumbers();
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenewLine();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = [];
                  s6 = peg$parseblankSpace();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseblankSpace();
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c162) {
                      s6 = peg$c162;
                      peg$currPos += 2;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c163); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseblankSpace();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsesingleElementTupleNotation();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseexpressions();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsestrings();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parsenumbers();
                            }
                          }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsenewLine();
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s5 = [s5, s6, s7, s8, s9];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsestart();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseEOS();
                }
                if (s4 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseexpressions();
            if (s1 === peg$FAILED) {
              s1 = peg$parsestrings();
              if (s1 === peg$FAILED) {
                s1 = peg$parsenumbers();
              }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsenewLine();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = [];
                s6 = peg$parseblankSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s6 = peg$c164;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c165); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseblankSpace();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseexpressions();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsestrings();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsenumbers();
                        }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsenewLine();
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        if (s9 !== peg$FAILED) {
                          s5 = [s5, s6, s7, s8, s9];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$currPos;
                    s5 = [];
                    s6 = peg$parseblankSpace();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseblankSpace();
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 42) {
                        s6 = peg$c164;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c165); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseblankSpace();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseexpressions();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsestrings();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parsenumbers();
                            }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parsenewLine();
                            if (s9 === peg$FAILED) {
                              s9 = null;
                            }
                            if (s9 !== peg$FAILED) {
                              s5 = [s5, s6, s7, s8, s9];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  }
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsestart();
                  if (s4 === peg$FAILED) {
                    s4 = peg$parseEOS();
                  }
                  if (s4 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsesingleElementTupleNotation();
              if (s1 === peg$FAILED) {
                s1 = peg$parseexpressions();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsestrings();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsenumbers();
                  }
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsenewLine();
                if (s2 !== peg$FAILED) {
                  s3 = [];
                  s4 = peg$currPos;
                  s5 = [];
                  s6 = peg$parseblankSpace();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseblankSpace();
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c166) {
                      s6 = peg$c166;
                      peg$currPos += 2;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c167); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseblankSpace();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsesingleElementTupleNotation();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseexpressions();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsestrings();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parsenumbers();
                            }
                          }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parsenewLine();
                          if (s9 === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 !== peg$FAILED) {
                            s5 = [s5, s6, s7, s8, s9];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$currPos;
                      s5 = [];
                      s6 = peg$parseblankSpace();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseblankSpace();
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c166) {
                          s6 = peg$c166;
                          peg$currPos += 2;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c167); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseblankSpace();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsesingleElementTupleNotation();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parseexpressions();
                              if (s8 === peg$FAILED) {
                                s8 = peg$parsestrings();
                                if (s8 === peg$FAILED) {
                                  s8 = peg$parsenumbers();
                                }
                              }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parsenewLine();
                              if (s9 === peg$FAILED) {
                                s9 = null;
                              }
                              if (s9 !== peg$FAILED) {
                                s5 = [s5, s6, s7, s8, s9];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    }
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsestart();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseEOS();
                    }
                    if (s4 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseexpressions();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsestrings();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsenumbers();
                  }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsenewLine();
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = [];
                    s6 = peg$parseblankSpace();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parseblankSpace();
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 47) {
                        s6 = peg$c168;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c169); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseblankSpace();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseexpressions();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parsestrings();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parsenumbers();
                            }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parsenewLine();
                            if (s9 === peg$FAILED) {
                              s9 = null;
                            }
                            if (s9 !== peg$FAILED) {
                              s5 = [s5, s6, s7, s8, s9];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                      while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = [];
                        s6 = peg$parseblankSpace();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parseblankSpace();
                        }
                        if (s5 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 47) {
                            s6 = peg$c168;
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c169); }
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseblankSpace();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseexpressions();
                              if (s8 === peg$FAILED) {
                                s8 = peg$parsestrings();
                                if (s8 === peg$FAILED) {
                                  s8 = peg$parsenumbers();
                                }
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parsenewLine();
                                if (s9 === peg$FAILED) {
                                  s9 = null;
                                }
                                if (s9 !== peg$FAILED) {
                                  s5 = [s5, s6, s7, s8, s9];
                                  s4 = s5;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      }
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsestart();
                      if (s4 === peg$FAILED) {
                        s4 = peg$parseEOS();
                      }
                      if (s4 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseexpressions();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsestrings();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsenumbers();
                    }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsenewLine();
                    if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$currPos;
                      s5 = [];
                      s6 = peg$parseblankSpace();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parseblankSpace();
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c170) {
                          s6 = peg$c170;
                          peg$currPos += 3;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c171); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseblankSpace();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parseexpressions();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parsestrings();
                              if (s8 === peg$FAILED) {
                                s8 = peg$parsenumbers();
                              }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parsenewLine();
                              if (s9 === peg$FAILED) {
                                s9 = null;
                              }
                              if (s9 !== peg$FAILED) {
                                s5 = [s5, s6, s7, s8, s9];
                                s4 = s5;
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$currPos;
                          s5 = [];
                          s6 = peg$parseblankSpace();
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parseblankSpace();
                          }
                          if (s5 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c170) {
                              s6 = peg$c170;
                              peg$currPos += 3;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c171); }
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseblankSpace();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseexpressions();
                                if (s8 === peg$FAILED) {
                                  s8 = peg$parsestrings();
                                  if (s8 === peg$FAILED) {
                                    s8 = peg$parsenumbers();
                                  }
                                }
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parsenewLine();
                                  if (s9 === peg$FAILED) {
                                    s9 = null;
                                  }
                                  if (s9 !== peg$FAILED) {
                                    s5 = [s5, s6, s7, s8, s9];
                                    s4 = s5;
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        }
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsestart();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parseEOS();
                        }
                        if (s4 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseexpressions();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsestrings();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsenumbers();
                      }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsenewLine();
                      if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$currPos;
                        s5 = [];
                        s6 = peg$parseblankSpace();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parseblankSpace();
                        }
                        if (s5 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c172) {
                            s6 = peg$c172;
                            peg$currPos += 3;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c173); }
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseblankSpace();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseexpressions();
                              if (s8 === peg$FAILED) {
                                s8 = peg$parsestrings();
                                if (s8 === peg$FAILED) {
                                  s8 = peg$parsenumbers();
                                }
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parsenewLine();
                                if (s9 === peg$FAILED) {
                                  s9 = null;
                                }
                                if (s9 !== peg$FAILED) {
                                  s5 = [s5, s6, s7, s8, s9];
                                  s4 = s5;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                          while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$currPos;
                            s5 = [];
                            s6 = peg$parseblankSpace();
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              s6 = peg$parseblankSpace();
                            }
                            if (s5 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c172) {
                                s6 = peg$c172;
                                peg$currPos += 3;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c173); }
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parseblankSpace();
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parseexpressions();
                                  if (s8 === peg$FAILED) {
                                    s8 = peg$parsestrings();
                                    if (s8 === peg$FAILED) {
                                      s8 = peg$parsenumbers();
                                    }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parsenewLine();
                                    if (s9 === peg$FAILED) {
                                      s9 = null;
                                    }
                                    if (s9 !== peg$FAILED) {
                                      s5 = [s5, s6, s7, s8, s9];
                                      s4 = s5;
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          }
                        } else {
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsestart();
                          if (s4 === peg$FAILED) {
                            s4 = peg$parseEOS();
                          }
                          if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseexpressions();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsestrings();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsenumbers();
                        }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsenewLine();
                        if (s2 !== peg$FAILED) {
                          s3 = [];
                          s4 = peg$currPos;
                          s5 = [];
                          s6 = peg$parseblankSpace();
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parseblankSpace();
                          }
                          if (s5 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c174) {
                              s6 = peg$c174;
                              peg$currPos += 2;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c175); }
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseblankSpace();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseexpressions();
                                if (s8 === peg$FAILED) {
                                  s8 = peg$parsestrings();
                                  if (s8 === peg$FAILED) {
                                    s8 = peg$parsenumbers();
                                  }
                                }
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parsenewLine();
                                  if (s9 === peg$FAILED) {
                                    s9 = null;
                                  }
                                  if (s9 !== peg$FAILED) {
                                    s5 = [s5, s6, s7, s8, s9];
                                    s4 = s5;
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          if (s4 !== peg$FAILED) {
                            while (s4 !== peg$FAILED) {
                              s3.push(s4);
                              s4 = peg$currPos;
                              s5 = [];
                              s6 = peg$parseblankSpace();
                              while (s6 !== peg$FAILED) {
                                s5.push(s6);
                                s6 = peg$parseblankSpace();
                              }
                              if (s5 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c174) {
                                  s6 = peg$c174;
                                  peg$currPos += 2;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c175); }
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parseblankSpace();
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parseexpressions();
                                    if (s8 === peg$FAILED) {
                                      s8 = peg$parsestrings();
                                      if (s8 === peg$FAILED) {
                                        s8 = peg$parsenumbers();
                                      }
                                    }
                                    if (s8 !== peg$FAILED) {
                                      s9 = peg$parsenewLine();
                                      if (s9 === peg$FAILED) {
                                        s9 = null;
                                      }
                                      if (s9 !== peg$FAILED) {
                                        s5 = [s5, s6, s7, s8, s9];
                                        s4 = s5;
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            }
                          } else {
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsestart();
                            if (s4 === peg$FAILED) {
                              s4 = peg$parseEOS();
                            }
                            if (s4 !== peg$FAILED) {
                              s1 = [s1, s2, s3, s4];
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseexpressions();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsestrings();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsenumbers();
                          }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parsenewLine();
                          if (s2 !== peg$FAILED) {
                            s3 = [];
                            s4 = peg$currPos;
                            s5 = [];
                            s6 = peg$parseblankSpace();
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              s6 = peg$parseblankSpace();
                            }
                            if (s5 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c176) {
                                s6 = peg$c176;
                                peg$currPos += 2;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c177); }
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parseblankSpace();
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parseexpressions();
                                  if (s8 === peg$FAILED) {
                                    s8 = peg$parsestrings();
                                    if (s8 === peg$FAILED) {
                                      s8 = peg$parsenumbers();
                                    }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parsenewLine();
                                    if (s9 === peg$FAILED) {
                                      s9 = null;
                                    }
                                    if (s9 !== peg$FAILED) {
                                      s5 = [s5, s6, s7, s8, s9];
                                      s4 = s5;
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                            if (s4 !== peg$FAILED) {
                              while (s4 !== peg$FAILED) {
                                s3.push(s4);
                                s4 = peg$currPos;
                                s5 = [];
                                s6 = peg$parseblankSpace();
                                while (s6 !== peg$FAILED) {
                                  s5.push(s6);
                                  s6 = peg$parseblankSpace();
                                }
                                if (s5 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c176) {
                                    s6 = peg$c176;
                                    peg$currPos += 2;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parseblankSpace();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseexpressions();
                                      if (s8 === peg$FAILED) {
                                        s8 = peg$parsestrings();
                                        if (s8 === peg$FAILED) {
                                          s8 = peg$parsenumbers();
                                        }
                                      }
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parsenewLine();
                                        if (s9 === peg$FAILED) {
                                          s9 = null;
                                        }
                                        if (s9 !== peg$FAILED) {
                                          s5 = [s5, s6, s7, s8, s9];
                                          s4 = s5;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              }
                            } else {
                              s3 = peg$FAILED;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsestart();
                              if (s4 === peg$FAILED) {
                                s4 = peg$parseEOS();
                              }
                              if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parselogicalExpressions();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsestrings();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsenumbers();
                            }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsenewLine();
                            if (s2 !== peg$FAILED) {
                              s3 = [];
                              s4 = peg$currPos;
                              s5 = [];
                              s6 = peg$parseblankSpace();
                              while (s6 !== peg$FAILED) {
                                s5.push(s6);
                                s6 = peg$parseblankSpace();
                              }
                              if (s5 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c113) {
                                  s6 = peg$c113;
                                  peg$currPos += 2;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c114); }
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parseblankSpace();
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parselogicalExpressions();
                                    if (s8 === peg$FAILED) {
                                      s8 = peg$parsestrings();
                                      if (s8 === peg$FAILED) {
                                        s8 = peg$parsenumbers();
                                      }
                                    }
                                    if (s8 !== peg$FAILED) {
                                      s9 = peg$parsenewLine();
                                      if (s9 === peg$FAILED) {
                                        s9 = null;
                                      }
                                      if (s9 !== peg$FAILED) {
                                        s5 = [s5, s6, s7, s8, s9];
                                        s4 = s5;
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                              if (s4 !== peg$FAILED) {
                                while (s4 !== peg$FAILED) {
                                  s3.push(s4);
                                  s4 = peg$currPos;
                                  s5 = [];
                                  s6 = peg$parseblankSpace();
                                  while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$parseblankSpace();
                                  }
                                  if (s5 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c113) {
                                      s6 = peg$c113;
                                      peg$currPos += 2;
                                    } else {
                                      s6 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c114); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parseblankSpace();
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parselogicalExpressions();
                                        if (s8 === peg$FAILED) {
                                          s8 = peg$parsestrings();
                                          if (s8 === peg$FAILED) {
                                            s8 = peg$parsenumbers();
                                          }
                                        }
                                        if (s8 !== peg$FAILED) {
                                          s9 = peg$parsenewLine();
                                          if (s9 === peg$FAILED) {
                                            s9 = null;
                                          }
                                          if (s9 !== peg$FAILED) {
                                            s5 = [s5, s6, s7, s8, s9];
                                            s4 = s5;
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                }
                              } else {
                                s3 = peg$FAILED;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsestart();
                                if (s4 === peg$FAILED) {
                                  s4 = peg$parseEOS();
                                }
                                if (s4 !== peg$FAILED) {
                                  s1 = [s1, s2, s3, s4];
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parselogicalExpressions();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsestrings();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsenumbers();
                              }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parsenewLine();
                              if (s2 !== peg$FAILED) {
                                s3 = [];
                                s4 = peg$currPos;
                                s5 = [];
                                s6 = peg$parseblankSpace();
                                while (s6 !== peg$FAILED) {
                                  s5.push(s6);
                                  s6 = peg$parseblankSpace();
                                }
                                if (s5 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 3) === peg$c111) {
                                    s6 = peg$c111;
                                    peg$currPos += 3;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parseblankSpace();
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parselogicalExpressions();
                                      if (s8 === peg$FAILED) {
                                        s8 = peg$parsestrings();
                                        if (s8 === peg$FAILED) {
                                          s8 = peg$parsenumbers();
                                        }
                                      }
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parsenewLine();
                                        if (s9 === peg$FAILED) {
                                          s9 = null;
                                        }
                                        if (s9 !== peg$FAILED) {
                                          s5 = [s5, s6, s7, s8, s9];
                                          s4 = s5;
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                                if (s4 !== peg$FAILED) {
                                  while (s4 !== peg$FAILED) {
                                    s3.push(s4);
                                    s4 = peg$currPos;
                                    s5 = [];
                                    s6 = peg$parseblankSpace();
                                    while (s6 !== peg$FAILED) {
                                      s5.push(s6);
                                      s6 = peg$parseblankSpace();
                                    }
                                    if (s5 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c111) {
                                        s6 = peg$c111;
                                        peg$currPos += 3;
                                      } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c112); }
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parseblankSpace();
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parselogicalExpressions();
                                          if (s8 === peg$FAILED) {
                                            s8 = peg$parsestrings();
                                            if (s8 === peg$FAILED) {
                                              s8 = peg$parsenumbers();
                                            }
                                          }
                                          if (s8 !== peg$FAILED) {
                                            s9 = peg$parsenewLine();
                                            if (s9 === peg$FAILED) {
                                              s9 = null;
                                            }
                                            if (s9 !== peg$FAILED) {
                                              s5 = [s5, s6, s7, s8, s9];
                                              s4 = s5;
                                            } else {
                                              peg$currPos = s4;
                                              s4 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s4;
                                          s4 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s4;
                                      s4 = peg$FAILED;
                                    }
                                  }
                                } else {
                                  s3 = peg$FAILED;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsestart();
                                  if (s4 === peg$FAILED) {
                                    s4 = peg$parseEOS();
                                  }
                                  if (s4 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexpressions() {
    var s0;

    s0 = peg$parseprecedenceExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetupleArithmeticExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseisExpressions();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefactor();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumbers();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseshiftExpression() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c178;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c179); }
    }

    return s0;
  }

  function peg$parseprecedenceExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseprecedenceFactor();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleArrayNotation();
      if (s1 === peg$FAILED) {
        s1 = peg$parserangeBoundNotation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebitSelectionNotation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsestrings();
            if (s1 === peg$FAILED) {
              s1 = peg$parsenumbers();
              if (s1 === peg$FAILED) {
                s1 = peg$parseinteger();
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseblankSpace();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseblankSpace();
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s5 = peg$c158;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c160;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c161); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s5 = peg$c164;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c165); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c168;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c169); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c170) {
                  s5 = peg$c170;
                  peg$currPos += 3;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c171); }
                }
                if (s5 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c172) {
                    s5 = peg$c172;
                    peg$currPos += 3;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c173); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c174) {
                      s5 = peg$c174;
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c175); }
                    }
                    if (s5 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c176) {
                        s5 = peg$c176;
                        peg$currPos += 2;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c177); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseblankSpace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseblankSpace();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseprecedenceFactor();
            if (s7 === peg$FAILED) {
              s7 = peg$parsetupleArrayNotation();
              if (s7 === peg$FAILED) {
                s7 = peg$parserangeBoundNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsebitSelectionNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsestrings();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsenumbers();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parseinteger();
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseblankSpace();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c158;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c159); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c160;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c161); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                  s5 = peg$c164;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c165); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s5 = peg$c168;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c169); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c170) {
                      s5 = peg$c170;
                      peg$currPos += 3;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c171); }
                    }
                    if (s5 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c172) {
                        s5 = peg$c172;
                        peg$currPos += 3;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c173); }
                      }
                      if (s5 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c174) {
                          s5 = peg$c174;
                          peg$currPos += 2;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c175); }
                        }
                        if (s5 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c176) {
                            s5 = peg$c176;
                            peg$currPos += 2;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c177); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseprecedenceFactor();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsetupleArrayNotation();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parserangeBoundNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsebitSelectionNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsestrings();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsenumbers();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parseinteger();
                          }
                        }
                      }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c180(s1, s2);
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetupleArithmeticExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parserangeBoundNotation();
    if (s1 === peg$FAILED) {
      s1 = peg$parsefactor();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestrings();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c19;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
          if (s1 === peg$FAILED) {
            s1 = peg$parsetupleArrayNotation();
            if (s1 === peg$FAILED) {
              s1 = peg$parsetupleArrayIndex();
              if (s1 === peg$FAILED) {
                s1 = peg$parsesingleElementTupleNotation();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsenumbers();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseinteger();
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseblankSpace();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseblankSpace();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsetupleOps();
        if (s5 === peg$FAILED) {
          s5 = peg$parseoverloadNotation();
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseblankSpace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parserangeBoundNotation();
            if (s7 === peg$FAILED) {
              s7 = peg$parsefactor();
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s8 = peg$c19;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c19;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$parsestrings();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleArrayNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsetupleArrayIndex();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsesingleElementTupleNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsenumbers();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parseinteger();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseblankSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsetupleOps();
            if (s5 === peg$FAILED) {
              s5 = peg$parseoverloadNotation();
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parserangeBoundNotation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsefactor();
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c19;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestrings();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsestrings();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsetupleArrayNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsetupleArrayIndex();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsesingleElementTupleNotation();
                            if (s7 === peg$FAILED) {
                              s7 = peg$parsenumbers();
                              if (s7 === peg$FAILED) {
                                s7 = peg$parseinteger();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpressionWOS() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefactor();
    if (s1 === peg$FAILED) {
      s1 = peg$parsestrings();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenumbers();
        if (s1 === peg$FAILED) {
          s1 = peg$parseinteger();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseoperator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefactor();
        if (s5 === peg$FAILED) {
          s5 = peg$parsestrings();
          if (s5 === peg$FAILED) {
            s5 = peg$parsenumbers();
            if (s5 === peg$FAILED) {
              s5 = peg$parseinteger();
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseoperator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefactor();
            if (s5 === peg$FAILED) {
              s5 = peg$parsestrings();
              if (s5 === peg$FAILED) {
                s5 = peg$parsenumbers();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseinteger();
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c181(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpressionWS() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsefactor();
    if (s1 === peg$FAILED) {
      s1 = peg$parsestrings();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenumbers();
        if (s1 === peg$FAILED) {
          s1 = peg$parseinteger();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseblankSpace();
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseblankSpace();
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseoperator();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseblankSpace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseblankSpace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsefactor();
            if (s7 === peg$FAILED) {
              s7 = peg$parsestrings();
              if (s7 === peg$FAILED) {
                s7 = peg$parsenumbers();
                if (s7 === peg$FAILED) {
                  s7 = peg$parseinteger();
                }
              }
            }
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseblankSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoperator();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseblankSpace();
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseblankSpace();
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsefactor();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsestrings();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsenumbers();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parseinteger();
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c181(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsefactor();
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestrings();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c19;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$parsestrings();
          if (s1 === peg$FAILED) {
            s1 = peg$parsetupleArrayIndex();
            if (s1 === peg$FAILED) {
              s1 = peg$parsesingleElementTupleNotation();
              if (s1 === peg$FAILED) {
                s1 = peg$parsenumbers();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseinteger();
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseblankSpace();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseblankSpace();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetupleOps();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parseblankSpace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseblankSpace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsefactor();
              if (s7 === peg$FAILED) {
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                  s8 = peg$c19;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsestrings();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s10 = peg$c19;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$parsestrings();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleArrayIndex();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsesingleElementTupleNotation();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsenumbers();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parseinteger();
                        }
                      }
                    }
                  }
                }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetupleOps();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsefactor();
                  if (s7 === peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s8 = peg$c19;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestrings();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                          s10 = peg$c19;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsestrings();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsetupleArrayIndex();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsesingleElementTupleNotation();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsenumbers();
                            if (s7 === peg$FAILED) {
                              s7 = peg$parseinteger();
                            }
                          }
                        }
                      }
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsestringExpressions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsestrings();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseblankSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseblankSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetupleOps();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseblankSpace();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseblankSpace();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestrings();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c19;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestrings();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseblankSpace();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseblankSpace();
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetupleOps();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseblankSpace();
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parseblankSpace();
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 34) {
                    s7 = peg$c19;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsestrings();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s9 = peg$c19;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserelationalExpressions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c78;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpressions();
      if (s2 === peg$FAILED) {
        s2 = peg$parsefactor();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetupleArrayNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetupleArrayIndex();
            if (s2 === peg$FAILED) {
              s2 = peg$parsesingleElementTupleNotation();
              if (s2 === peg$FAILED) {
                s2 = peg$parsebitSelectionNotation();
                if (s2 === peg$FAILED) {
                  s2 = peg$parserangeNotation();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsestrings();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsenumbers();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseblankSpace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseblankSpace();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parserelationalOps();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseblankSpace();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 33) {
                s6 = peg$c78;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseexpressions();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsefactor();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleArrayNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsetupleArrayIndex();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsesingleElementTupleNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parsebitSelectionNotation();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parserangeNotation();
                            if (s7 === peg$FAILED) {
                              s7 = peg$parsestrings();
                              if (s7 === peg$FAILED) {
                                s7 = peg$parsenumbers();
                                if (s7 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c182) {
                                    s7 = peg$c182;
                                    peg$currPos += 2;
                                  } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c183); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpressions();
        if (s2 === peg$FAILED) {
          s2 = peg$parsefactor();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetupleArrayNotation();
            if (s2 === peg$FAILED) {
              s2 = peg$parsetupleArrayIndex();
              if (s2 === peg$FAILED) {
                s2 = peg$parsesingleElementTupleNotation();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsebitSelectionNotation();
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsestrings();
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parseblankSpace();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parseblankSpace();
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsefunctionCallNotation();
                        if (s5 !== peg$FAILED) {
                          s3 = [s3, s4, s5];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsestrings();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsenumbers();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseblankSpace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseblankSpace();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserelationalOps();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseblankSpace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpressions();
                if (s6 === peg$FAILED) {
                  s6 = peg$parsefactor();
                  if (s6 === peg$FAILED) {
                    s6 = peg$parsetupleArrayNotation();
                    if (s6 === peg$FAILED) {
                      s6 = peg$parsetupleArrayIndex();
                      if (s6 === peg$FAILED) {
                        s6 = peg$parsesingleElementTupleNotation();
                        if (s6 === peg$FAILED) {
                          s6 = peg$parsebitSelectionNotation();
                          if (s6 === peg$FAILED) {
                            s6 = peg$currPos;
                            s7 = peg$parsestrings();
                            if (s7 !== peg$FAILED) {
                              s8 = [];
                              s9 = peg$parseblankSpace();
                              while (s9 !== peg$FAILED) {
                                s8.push(s9);
                                s9 = peg$parseblankSpace();
                              }
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parsefunctionCallNotation();
                                if (s9 !== peg$FAILED) {
                                  s7 = [s7, s8, s9];
                                  s6 = s7;
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$FAILED;
                            }
                            if (s6 === peg$FAILED) {
                              s6 = peg$parsestrings();
                              if (s6 === peg$FAILED) {
                                s6 = peg$parsenumbers();
                                if (s6 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c182) {
                                    s6 = peg$c182;
                                    peg$currPos += 2;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c183); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c23;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c78;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefunctionCall();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseblankSpace();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseblankSpace();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parserelationalOps();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parseblankSpace();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 33) {
                    s6 = peg$c78;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c79); }
                  }
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsefunctionCall();
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c17;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefunctionCall();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseblankSpace();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseblankSpace();
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parserelationalOps();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parseblankSpace();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parseblankSpace();
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsefunctionCall();
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s7 = peg$c23;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                      }
                      if (s7 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parselogicalExpressions() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c78;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefactor();
      if (s2 === peg$FAILED) {
        s2 = peg$parserelationalExpressions();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetupleArrayNotation();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetupleArrayIndex();
            if (s2 === peg$FAILED) {
              s2 = peg$parsesingleElementTupleNotation();
              if (s2 === peg$FAILED) {
                s2 = peg$parseexpressions();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsestrings();
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseblankSpace();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseblankSpace();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselogicalOps();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseblankSpace();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseblankSpace();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 33) {
                s6 = peg$c78;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsefactor();
                if (s7 === peg$FAILED) {
                  s7 = peg$parserelationalExpressions();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsetupleArrayNotation();
                    if (s7 === peg$FAILED) {
                      s7 = peg$parsetupleArrayIndex();
                      if (s7 === peg$FAILED) {
                        s7 = peg$parsesingleElementTupleNotation();
                        if (s7 === peg$FAILED) {
                          s7 = peg$parseexpressions();
                          if (s7 === peg$FAILED) {
                            s7 = peg$parsestrings();
                          }
                        }
                      }
                    }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6, s7];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c78;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefactor();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseblankSpace();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseblankSpace();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parselogicalOps();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseblankSpace();
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseblankSpace();
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 33) {
                  s8 = peg$c78;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c79); }
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsefactor();
                  if (s9 !== peg$FAILED) {
                    s5 = [s5, s6, s7, s8, s9];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parseblankSpace();
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parseblankSpace();
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parselogicalOps();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseblankSpace();
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parseblankSpace();
                    }
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 33) {
                      s8 = peg$c78;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c79); }
                    }
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsefactor();
                      if (s9 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselogicalNOT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsefactor();
          if (s2 === peg$FAILED) {
            s2 = peg$parserelationalExpressions();
            if (s2 === peg$FAILED) {
              s2 = peg$parsetupleArrayNotation();
              if (s2 === peg$FAILED) {
                s2 = peg$parsetupleArrayIndex();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsesingleElementTupleNotation();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseexpressions();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsestrings();
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsefactor() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parserelationalExpressions();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c23;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprecedenceExpression();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c23;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parselogicalExpressions();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c23;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsenumbers();
        }
      }
    }

    return s0;
  }

  function peg$parseprecedenceFactor() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprecedenceExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parsenumbers();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c23;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseshiftOperationFactor() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseshiftExpression();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c23;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumbers() {
    var s0;

    s0 = peg$parsehexaDecimal();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebinary();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetrueFalse();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedecimalSigned();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedecimalDigit();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesamedent() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 32) {
      s2 = peg$c178;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c179); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c178;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c185(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }

    return s0;
  }

  function peg$parseindent() {
    var s0;

    peg$savedPos = peg$currPos;
    s0 = peg$c186();
    if (s0) {
      s0 = void 0;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsededent() {
    var s0;

    peg$savedPos = peg$currPos;
    s0 = peg$c187();
    if (s0) {
      s0 = void 0;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehexaDecimal() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c188) {
      s1 = peg$c188;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c189); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedecimalDigit();
      if (s3 === peg$FAILED) {
        s3 = peg$parsehexDigit();
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedecimalDigit();
          if (s3 === peg$FAILED) {
            s3 = peg$parsehexDigit();
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 115) {
          s4 = peg$c190;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c191); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsenonZeroDigit();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsedecimalDigit();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsedecimalDigit();
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c188) {
        s1 = peg$c188;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c189); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsedecimalDigit();
        if (s3 === peg$FAILED) {
          s3 = peg$parsehexDigit();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsedecimalDigit();
            if (s3 === peg$FAILED) {
              s3 = peg$parsehexDigit();
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 117) {
            s4 = peg$c192;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c193); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsenonZeroDigit();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parsedecimalDigit();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsedecimalDigit();
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c188) {
          s1 = peg$c188;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsedecimalDigit();
          if (s3 === peg$FAILED) {
            s3 = peg$parsehexDigit();
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsedecimalDigit();
              if (s3 === peg$FAILED) {
                s3 = peg$parsehexDigit();
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsebinary() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c194) {
      s1 = peg$c194;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c195); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsebinaryDigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsebinaryDigit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s4 = peg$c196;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c197); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsebinaryDigit();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsebinaryDigit();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 117) {
            s5 = peg$c192;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c193); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsenonZeroDigit();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsedecimalDigit();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsedecimalDigit();
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c194) {
        s1 = peg$c194;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c195); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsebinaryDigit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsebinaryDigit();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s4 = peg$c196;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c197); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsebinaryDigit();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsebinaryDigit();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetrueFalse() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 4) === peg$c199) {
      s0 = peg$c199;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c200); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c201) {
        s0 = peg$c201;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c203) {
          s0 = peg$c203;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c204); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c205) {
            s0 = peg$c205;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c206); }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }

    return s0;
  }

  function peg$parsedecimalSigned() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedecimalDigit();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsedecimalDigit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 117) {
        s2 = peg$c192;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenonZeroDigit();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsedecimalDigit();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsedecimalDigit();
          }
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedecimalDigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedecimalDigit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 115) {
          s2 = peg$c190;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c191); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenonZeroDigit();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsedecimalDigit();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsedecimalDigit();
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedecimalDigit() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c160;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c161); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c208.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c208.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c209); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c207); }
    }

    return s0;
  }

  function peg$parsenonZeroDigit() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c211.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c212); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c211.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c212); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }

    return s0;
  }

  function peg$parsebinaryDigit() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c214.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c215); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c214.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c215); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c213); }
    }

    return s0;
  }

  function peg$parsehexDigit() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c217.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c217.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c218); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c216); }
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c208.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c209); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c208.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c219); }
    }

    return s0;
  }

  function peg$parseoperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c158;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c159); }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c160;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c164;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s1 = peg$c168;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c169); }
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c176) {
              s1 = peg$c176;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c177); }
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c174) {
                s1 = peg$c174;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c175); }
              }
              if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
              } else {
                s0 = s1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c172) {
                  s1 = peg$c172;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c173); }
                }
                if (s1 !== peg$FAILED) {
                  s0 = input.substring(s0, peg$currPos);
                } else {
                  s0 = s1;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c170) {
                    s1 = peg$c170;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c171); }
                  }
                  if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                  } else {
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parserelationalOps() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c150) {
      s1 = peg$c150;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c154) {
        s1 = peg$c154;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c220) {
          s1 = peg$c220;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c221); }
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c222) {
            s1 = peg$c222;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c223); }
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s1 = peg$c224;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c225); }
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 60) {
                s1 = peg$c226;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c227); }
              }
              if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
              } else {
                s0 = s1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c152) {
                  s1 = peg$c152;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
                }
                if (s1 !== peg$FAILED) {
                  s0 = input.substring(s0, peg$currPos);
                } else {
                  s0 = s1;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c156) {
                    s1 = peg$c156;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c157); }
                  }
                  if (s1 !== peg$FAILED) {
                    s0 = input.substring(s0, peg$currPos);
                  } else {
                    s0 = s1;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c228) {
                      s1 = peg$c228;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c229); }
                    }
                    if (s1 !== peg$FAILED) {
                      s0 = input.substring(s0, peg$currPos);
                    } else {
                      s0 = s1;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 3) === peg$c230) {
                        s1 = peg$c230;
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c231); }
                      }
                      if (s1 !== peg$FAILED) {
                        s0 = input.substring(s0, peg$currPos);
                      } else {
                        s0 = s1;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c232) {
                          s1 = peg$c232;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c233); }
                        }
                        if (s1 !== peg$FAILED) {
                          s0 = input.substring(s0, peg$currPos);
                        } else {
                          s0 = s1;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c234) {
                            s1 = peg$c234;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c235); }
                          }
                          if (s1 !== peg$FAILED) {
                            s0 = input.substring(s0, peg$currPos);
                          } else {
                            s0 = s1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselogicalOps() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c111) {
      s1 = peg$c111;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c112); }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parselogicalNOT() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c78;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetupleOps() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c134) {
      s1 = peg$c134;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c135); }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c162) {
        s1 = peg$c162;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c166) {
          s1 = peg$c166;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c131) {
            s1 = peg$c131;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c125) {
              s1 = peg$c125;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c126); }
            }
            if (s1 !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEOI() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$c237;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c236); }
    }

    return s0;
  }

  function peg$parsenewLine() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c239;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c240); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c238); }
    }

    return s0;
  }

  function peg$parseblankSpace() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c178;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c179); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c241); }
    }

    return s0;
  }

  function peg$parseEOS() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseEOL();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseEOL();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseEOL();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseEOL();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = peg$parseEOL();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseEOL();
        }
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseEOF();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseblankSpace();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseblankSpace();
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecomment();
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$parseEOL();
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$parseEOL();
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = [];
            s1 = peg$parseblankSpace();
            if (s1 !== peg$FAILED) {
              while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parseblankSpace();
              }
            } else {
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c239;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c240); }
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c133); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCN() {
    var s0, s1, s2;

    s0 = peg$parsenewLine();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecomment();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenewLine();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCA() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseblankSpace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseblankSpace();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c243;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c244); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 11) {
        s0 = peg$c245;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c239;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c247;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c248); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c178;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c179); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 160) {
                s0 = peg$c249;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c250); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65279) {
                  s0 = peg$c251;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c252); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseZs();
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c242); }
    }

    return s0;
  }

  function peg$parseZs() {
    var s0;

    if (peg$c253.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c256) {
      s1 = peg$c256;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c257); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c142;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 4) === peg$c258) {
          s8 = peg$c258;
          peg$currPos += 4;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c259); }
        }
        peg$silentFails--;
        if (s8 === peg$FAILED) {
          s7 = void 0;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c133); }
          }
          if (s8 !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 4) === peg$c258) {
            s8 = peg$c258;
            peg$currPos += 4;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c259); }
          }
          peg$silentFails--;
          if (s8 === peg$FAILED) {
            s7 = void 0;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        if (s5 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c258) {
            s6 = peg$c258;
            peg$currPos += 4;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c259); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 4) === peg$c258) {
              s8 = peg$c258;
              peg$currPos += 4;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c259); }
            }
            peg$silentFails--;
            if (s8 === peg$FAILED) {
              s7 = void 0;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 4) === peg$c258) {
                s8 = peg$c258;
                peg$currPos += 4;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c259); }
              }
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = void 0;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c133); }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c258) {
                s6 = peg$c258;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c259); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c256) {
        s1 = peg$c256;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 3) === peg$c256) {
          s5 = peg$c256;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c257); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c133); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 3) === peg$c256) {
            s5 = peg$c256;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c257); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c256) {
            s3 = peg$c256;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c257); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c260;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c261); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parsenewLine();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parsenewLine();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c255); }
    }

    return s0;
  }


    var INDENT_STEP = 2;

    var indentLevel = 0;
    


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
